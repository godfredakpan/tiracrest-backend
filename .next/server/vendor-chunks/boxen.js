"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/boxen";
exports.ids = ["vendor-chunks/boxen"];
exports.modules = {

/***/ "(ssr)/./node_modules/boxen/index.js":
/*!*************************************!*\
  !*** ./node_modules/boxen/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stringWidth = __webpack_require__(/*! string-width */ \"(ssr)/./node_modules/string-width/index.js\");\nconst chalk = __webpack_require__(/*! chalk */ \"(ssr)/./node_modules/chalk/source/index.js\");\nconst widestLine = __webpack_require__(/*! widest-line */ \"(ssr)/./node_modules/widest-line/index.js\");\nconst cliBoxes = __webpack_require__(/*! cli-boxes */ \"(ssr)/./node_modules/cli-boxes/index.js\");\nconst camelCase = __webpack_require__(/*! camelcase */ \"(ssr)/./node_modules/camelcase/index.js\");\nconst ansiAlign = __webpack_require__(/*! ansi-align */ \"(ssr)/./node_modules/ansi-align/index.js\");\nconst wrapAnsi = __webpack_require__(/*! wrap-ansi */ \"(ssr)/./node_modules/wrap-ansi/index.js\");\n\nconst NL = '\\n';\nconst PAD = ' ';\n\nconst terminalColumns = () => {\n\tconst {env, stdout, stderr} = process;\n\n\tif (stdout && stdout.columns) {\n\t\treturn stdout.columns;\n\t}\n\n\tif (stderr && stderr.columns) {\n\t\treturn stderr.columns;\n\t}\n\n\tif (env.COLUMNS) {\n\t\treturn Number.parseInt(env.COLUMNS, 10);\n\t}\n\n\treturn 80;\n};\n\nconst getObject = detail => {\n\treturn typeof detail === 'number' ? {\n\t\ttop: detail,\n\t\tright: detail * 3,\n\t\tbottom: detail,\n\t\tleft: detail * 3\n\t} : {\n\t\ttop: 0,\n\t\tright: 0,\n\t\tbottom: 0,\n\t\tleft: 0,\n\t\t...detail\n\t};\n};\n\nconst getBorderChars = borderStyle => {\n\tconst sides = [\n\t\t'topLeft',\n\t\t'topRight',\n\t\t'bottomRight',\n\t\t'bottomLeft',\n\t\t'vertical',\n\t\t'horizontal'\n\t];\n\n\tlet chararacters;\n\n\tif (typeof borderStyle === 'string') {\n\t\tchararacters = cliBoxes[borderStyle];\n\n\t\tif (!chararacters) {\n\t\t\tthrow new TypeError(`Invalid border style: ${borderStyle}`);\n\t\t}\n\t} else {\n\t\tfor (const side of sides) {\n\t\t\tif (!borderStyle[side] || typeof borderStyle[side] !== 'string') {\n\t\t\t\tthrow new TypeError(`Invalid border style: ${side}`);\n\t\t\t}\n\t\t}\n\n\t\tchararacters = borderStyle;\n\t}\n\n\treturn chararacters;\n};\n\nconst makeTitle = (text, horizontal, alignement) => {\n\tlet title = '';\n\n\tconst textWidth = stringWidth(text);\n\n\tswitch (alignement) {\n\t\tcase 'left':\n\t\t\ttitle = text + horizontal.slice(textWidth);\n\t\t\tbreak;\n\t\tcase 'right':\n\t\t\ttitle = horizontal.slice(textWidth) + text;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\thorizontal = horizontal.slice(textWidth);\n\n\t\t\tif (horizontal.length % 2 === 1) { // This is needed in case the length is odd\n\t\t\t\thorizontal = horizontal.slice(Math.floor(horizontal.length / 2));\n\t\t\t\ttitle = horizontal.slice(1) + text + horizontal; // We reduce the left part of one character to avoid the bar to go beyond its limit\n\t\t\t} else {\n\t\t\t\thorizontal = horizontal.slice(horizontal.length / 2);\n\t\t\t\ttitle = horizontal + text + horizontal;\n\t\t\t}\n\n\t\t\tbreak;\n\t}\n\n\treturn title;\n};\n\nconst makeContentText = (text, padding, columns, align) => {\n\ttext = ansiAlign(text, {align});\n\tlet lines = text.split(NL);\n\tconst textWidth = widestLine(text);\n\n\tconst max = columns - padding.left - padding.right;\n\n\tif (textWidth > max) {\n\t\tconst newLines = [];\n\t\tfor (const line of lines) {\n\t\t\tconst createdLines = wrapAnsi(line, max, {hard: true});\n\t\t\tconst alignedLines = ansiAlign(createdLines, {align});\n\t\t\tconst alignedLinesArray = alignedLines.split('\\n');\n\t\t\tconst longestLength = Math.max(...alignedLinesArray.map(s => stringWidth(s)));\n\n\t\t\tfor (const alignedLine of alignedLinesArray) {\n\t\t\t\tlet paddedLine;\n\t\t\t\tswitch (align) {\n\t\t\t\t\tcase 'center':\n\t\t\t\t\t\tpaddedLine = PAD.repeat((max - longestLength) / 2) + alignedLine;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'right':\n\t\t\t\t\t\tpaddedLine = PAD.repeat(max - longestLength) + alignedLine;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tpaddedLine = alignedLine;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tnewLines.push(paddedLine);\n\t\t\t}\n\t\t}\n\n\t\tlines = newLines;\n\t}\n\n\tif (align === 'center' && textWidth < max) {\n\t\tlines = lines.map(line => PAD.repeat((max - textWidth) / 2) + line);\n\t} else if (align === 'right' && textWidth < max) {\n\t\tlines = lines.map(line => PAD.repeat(max - textWidth) + line);\n\t}\n\n\tconst paddingLeft = PAD.repeat(padding.left);\n\tconst paddingRight = PAD.repeat(padding.right);\n\n\tlines = lines.map(line => paddingLeft + line + paddingRight);\n\n\tlines = lines.map(line => {\n\t\tif (columns - stringWidth(line) > 0) {\n\t\t\tswitch (align) {\n\t\t\t\tcase 'center':\n\t\t\t\t\treturn line + PAD.repeat(columns - stringWidth(line));\n\t\t\t\tcase 'right':\n\t\t\t\t\treturn line + PAD.repeat(columns - stringWidth(line));\n\t\t\t\tdefault:\n\t\t\t\t\treturn line + PAD.repeat(columns - stringWidth(line));\n\t\t\t}\n\t\t}\n\n\t\treturn line;\n\t});\n\n\tif (padding.top > 0) {\n\t\tlines = new Array(padding.top).fill(PAD.repeat(columns)).concat(lines);\n\t}\n\n\tif (padding.bottom > 0) {\n\t\tlines = lines.concat(new Array(padding.bottom).fill(PAD.repeat(columns)));\n\t}\n\n\treturn lines.join(NL);\n};\n\nconst isHex = color => color.match(/^#(?:[0-f]{3}){1,2}$/i);\nconst isColorValid = color => typeof color === 'string' && ((chalk[color]) || isHex(color));\nconst getColorFn = color => isHex(color) ? chalk.hex(color) : chalk[color];\nconst getBGColorFn = color => isHex(color) ? chalk.bgHex(color) : chalk[camelCase(['bg', color])];\n\nmodule.exports = (text, options) => {\n\toptions = {\n\t\tpadding: 0,\n\t\tborderStyle: 'single',\n\t\tdimBorder: false,\n\t\ttextAlignment: 'left',\n\t\tfloat: 'left',\n\t\ttitleAlignment: 'left',\n\t\t...options\n\t};\n\n\t// This option is deprecated\n\tif (options.align) {\n\t\toptions.textAlignment = options.align;\n\t}\n\n\tconst BORDERS_WIDTH = 2;\n\n\tif (options.borderColor && !isColorValid(options.borderColor)) {\n\t\tthrow new Error(`${options.borderColor} is not a valid borderColor`);\n\t}\n\n\tif (options.backgroundColor && !isColorValid(options.backgroundColor)) {\n\t\tthrow new Error(`${options.backgroundColor} is not a valid backgroundColor`);\n\t}\n\n\tconst chars = getBorderChars(options.borderStyle);\n\tconst padding = getObject(options.padding);\n\tconst margin = getObject(options.margin);\n\n\tconst colorizeBorder = border => {\n\t\tconst newBorder = options.borderColor ? getColorFn(options.borderColor)(border) : border;\n\t\treturn options.dimBorder ? chalk.dim(newBorder) : newBorder;\n\t};\n\n\tconst colorizeContent = content => options.backgroundColor ? getBGColorFn(options.backgroundColor)(content) : content;\n\n\tconst columns = terminalColumns();\n\n\tlet contentWidth = widestLine(wrapAnsi(text, columns - BORDERS_WIDTH, {hard: true, trim: false})) + padding.left + padding.right;\n\n\t// This prevents the title bar to exceed the console's width\n\tlet title = options.title && options.title.slice(0, columns - 4 - margin.left - margin.right);\n\n\tif (title) {\n\t\ttitle = ` ${title} `;\n\t\t// Make the box larger to fit a larger title\n\t\tif (stringWidth(title) > contentWidth) {\n\t\t\tcontentWidth = stringWidth(title);\n\t\t}\n\t}\n\n\tif ((margin.left && margin.right) && contentWidth + BORDERS_WIDTH + margin.left + margin.right > columns) {\n\t\t// Let's assume we have margins: left = 3, right = 5, in total = 8\n\t\tconst spaceForMargins = columns - contentWidth - BORDERS_WIDTH;\n\t\t// Let's assume we have space = 4\n\t\tconst multiplier = spaceForMargins / (margin.left + margin.right);\n\t\t// Here: multiplier = 4/8 = 0.5\n\t\tmargin.left = Math.max(0, Math.floor(margin.left * multiplier));\n\t\tmargin.right = Math.max(0, Math.floor(margin.right * multiplier));\n\t\t// Left: 3 * 0.5 = 1.5 -> 1\n\t\t// Right: 6 * 0.5 = 3\n\t}\n\n\t// Prevent content from exceeding the console's width\n\tcontentWidth = Math.min(contentWidth, columns - BORDERS_WIDTH - margin.left - margin.right);\n\n\ttext = makeContentText(text, padding, contentWidth, options.textAlignment);\n\n\tlet marginLeft = PAD.repeat(margin.left);\n\n\tif (options.float === 'center') {\n\t\tconst marginWidth = Math.max((columns - contentWidth - BORDERS_WIDTH) / 2, 0);\n\t\tmarginLeft = PAD.repeat(marginWidth);\n\t} else if (options.float === 'right') {\n\t\tconst marginWidth = Math.max(columns - contentWidth - margin.right - BORDERS_WIDTH, 0);\n\t\tmarginLeft = PAD.repeat(marginWidth);\n\t}\n\n\tconst horizontal = chars.horizontal.repeat(contentWidth);\n\tconst top = colorizeBorder(NL.repeat(margin.top) + marginLeft + chars.topLeft + (title ? makeTitle(title, horizontal, options.titleAlignment) : horizontal) + chars.topRight);\n\tconst bottom = colorizeBorder(marginLeft + chars.bottomLeft + horizontal + chars.bottomRight + NL.repeat(margin.bottom));\n\tconst side = colorizeBorder(chars.vertical);\n\n\tconst LINE_SEPARATOR = (contentWidth + BORDERS_WIDTH + margin.left >= columns) ? '' : NL;\n\n\tconst lines = text.split(NL);\n\n\tconst middle = lines.map(line => {\n\t\treturn marginLeft + side + colorizeContent(line) + side;\n\t}).join(LINE_SEPARATOR);\n\n\treturn top + LINE_SEPARATOR + middle + LINE_SEPARATOR + bottom;\n};\n\nmodule.exports._borderStyles = cliBoxes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/boxen/index.js\n");

/***/ })

};
;