/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/faunadb";
exports.ids = ["vendor-chunks/faunadb"];
exports.modules = {

/***/ "(ssr)/./node_modules/faunadb/index.js":
/*!***************************************!*\
  !*** ./node_modules/faunadb/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var query = __webpack_require__(/*! ./src/query */ \"(ssr)/./node_modules/faunadb/src/query.js\")\nvar util = __webpack_require__(/*! ./src/_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\nvar parseJSON = (__webpack_require__(/*! ./src/_json */ \"(ssr)/./node_modules/faunadb/src/_json.js\").parseJSON)\n\nmodule.exports = util.mergeObjects(\n  {\n    Client: __webpack_require__(/*! ./src/Client */ \"(ssr)/./node_modules/faunadb/src/Client.js\"),\n    Expr: __webpack_require__(/*! ./src/Expr */ \"(ssr)/./node_modules/faunadb/src/Expr.js\"),\n    PageHelper: __webpack_require__(/*! ./src/PageHelper */ \"(ssr)/./node_modules/faunadb/src/PageHelper.js\"),\n    RequestResult: __webpack_require__(/*! ./src/RequestResult */ \"(ssr)/./node_modules/faunadb/src/RequestResult.js\"),\n\n    clientLogger: __webpack_require__(/*! ./src/clientLogger */ \"(ssr)/./node_modules/faunadb/src/clientLogger.js\"),\n    errors: __webpack_require__(/*! ./src/errors */ \"(ssr)/./node_modules/faunadb/src/errors.js\"),\n    values: __webpack_require__(/*! ./src/values */ \"(ssr)/./node_modules/faunadb/src/values.js\"),\n    query: query,\n    parseJSON: parseJSON,\n  },\n  query\n)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmF1bmFkYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLG1CQUFPLENBQUMsOERBQWE7QUFDakMsV0FBVyxtQkFBTyxDQUFDLDhEQUFhO0FBQ2hDLGdCQUFnQiwrRkFBZ0M7O0FBRWhEO0FBQ0E7QUFDQSxZQUFZLG1CQUFPLENBQUMsZ0VBQWM7QUFDbEMsVUFBVSxtQkFBTyxDQUFDLDREQUFZO0FBQzlCLGdCQUFnQixtQkFBTyxDQUFDLHdFQUFrQjtBQUMxQyxtQkFBbUIsbUJBQU8sQ0FBQyw4RUFBcUI7O0FBRWhELGtCQUFrQixtQkFBTyxDQUFDLDRFQUFvQjtBQUM5QyxZQUFZLG1CQUFPLENBQUMsZ0VBQWM7QUFDbEMsWUFBWSxtQkFBTyxDQUFDLGdFQUFjO0FBQ2xDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29rYm9va3Nob3BuZy8uL25vZGVfbW9kdWxlcy9mYXVuYWRiL2luZGV4LmpzPzZkY2MiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHF1ZXJ5ID0gcmVxdWlyZSgnLi9zcmMvcXVlcnknKVxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3NyYy9fdXRpbCcpXG52YXIgcGFyc2VKU09OID0gcmVxdWlyZSgnLi9zcmMvX2pzb24nKS5wYXJzZUpTT05cblxubW9kdWxlLmV4cG9ydHMgPSB1dGlsLm1lcmdlT2JqZWN0cyhcbiAge1xuICAgIENsaWVudDogcmVxdWlyZSgnLi9zcmMvQ2xpZW50JyksXG4gICAgRXhwcjogcmVxdWlyZSgnLi9zcmMvRXhwcicpLFxuICAgIFBhZ2VIZWxwZXI6IHJlcXVpcmUoJy4vc3JjL1BhZ2VIZWxwZXInKSxcbiAgICBSZXF1ZXN0UmVzdWx0OiByZXF1aXJlKCcuL3NyYy9SZXF1ZXN0UmVzdWx0JyksXG5cbiAgICBjbGllbnRMb2dnZXI6IHJlcXVpcmUoJy4vc3JjL2NsaWVudExvZ2dlcicpLFxuICAgIGVycm9yczogcmVxdWlyZSgnLi9zcmMvZXJyb3JzJyksXG4gICAgdmFsdWVzOiByZXF1aXJlKCcuL3NyYy92YWx1ZXMnKSxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgcGFyc2VKU09OOiBwYXJzZUpTT04sXG4gIH0sXG4gIHF1ZXJ5XG4pXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/Client.js":
/*!********************************************!*\
  !*** ./node_modules/faunadb/src/Client.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar packageJson = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/faunadb/package.json\")\nvar PageHelper = __webpack_require__(/*! ./PageHelper */ \"(ssr)/./node_modules/faunadb/src/PageHelper.js\")\nvar RequestResult = __webpack_require__(/*! ./RequestResult */ \"(ssr)/./node_modules/faunadb/src/RequestResult.js\")\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/faunadb/src/errors.js\")\nvar http = __webpack_require__(/*! ./_http */ \"(ssr)/./node_modules/faunadb/src/_http/index.js\")\nvar json = __webpack_require__(/*! ./_json */ \"(ssr)/./node_modules/faunadb/src/_json.js\")\nvar query = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/faunadb/src/query.js\")\nvar stream = __webpack_require__(/*! ./stream */ \"(ssr)/./node_modules/faunadb/src/stream.js\")\nvar util = __webpack_require__(/*! ./_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\nvar values = __webpack_require__(/*! ./values */ \"(ssr)/./node_modules/faunadb/src/values.js\")\n\n/**\n * The callback that will be executed after every completed request.\n *\n * @callback Client~observerCallback\n * @param {RequestResult} res\n */\n\n/**\n * **WARNING: This is an experimental feature. There are no guarantees to\n * its API stability and/or service availability. DO NOT USE IT IN\n * PRODUCTION**.\n *\n * Creates a subscription to the result of the given read-only expression. When\n * executed, the expression must only perform reads and produce a single\n * streamable type, such as a reference or a version. Expressions that attempt\n * to perform writes or produce non-streamable types will result in an error.\n * Otherwise, any expression can be used to initiate a stream, including\n * user-defined function calls.\n *\n * The subscription returned by this method does not issue any requests until\n * the {@link module:stream~Subscription#start} method is called. Make sure to\n * subscribe to the events of interest, otherwise the received events are simply\n * ignored. For example:\n *\n * ```\n * client.stream(document.ref)\n *   .on('version', version => console.log(version))\n *   .on('error', error => console.log(error))\n *   .start()\n * ```\n *\n * Please note that streams are not temporal, meaning that there is no option to\n * configure its starting timestamp. The stream will, however, state its initial\n * subscription time via the {@link module:stream~Subscription#event:start}\n * event. A common programming mistake is to read a document, then initiate a\n * subscription. This approach can miss events that occurred between the initial\n * read and the subscription request. To prevent event loss, make sure the\n * subscription has started before performing a data load. The following example\n * buffer events until the document's data is loaded:\n *\n * ```\n * var buffer = []\n * var loaded = false\n *\n * client.stream(document.ref)\n *   .on('start', ts => {\n *     loadData(ts).then(data => {\n *       processData(data)\n *       processBuffer(buffer)\n *       loaded = true\n *     })\n *   })\n *   .on('version', version => {\n *     if (loaded) {\n *       processVersion(version)\n *     } else {\n *       buffer.push(version)\n *     }\n *   })\n *   .start()\n * ```\n *\n * The reduce boilerplate, the `document` helper implements a similar\n * functionality, except it discards events prior to the document's snapshot\n * time. The expression given to this helper must be a reference as it\n * internally runs a {@link module:query~Get} call with it. The example above\n * can be rewritten as:\n *\n * ```\n * client.stream.document(document.ref)\n *   .on('snapshot', data => processData(data))\n *   .on('version', version => processVersion(version))\n *   .start()\n * ```\n *\n * Be aware that streams are not available in all browsers. If the client can't\n * initiate a stream, an error event with the {@link\n * module:errors~StreamsNotSupported} error will be emmited.\n *\n * To stop a subscription, call the {@link module:stream~Subscription#close}\n * method:\n *\n * ```\n * var subscription = client.stream(document.ref)\n *   .on('version', version => processVersion(version))\n *   .start()\n *\n * // ...\n * subscription.close()\n * ```\n *\n * @param {module:query~ExprArg} expression\n *   The expression to subscribe to. Created from {@link module:query}\n *   functions.\n *\n * @param {?module:stream~Options} options\n *   Object that configures the stream.\n *\n * @property {function} document\n *  A document stream helper. See {@link Client#stream} for more information.\n *\n * @see module:stream~Subscription\n *\n * @function\n * @name Client#stream\n * @returns {module:stream~Subscription} A new subscription instance.\n */\n\n/**\n * A client for interacting with FaunaDB.\n *\n * Users will mainly call the {@link Client#query} method to execute queries, or\n * the {@link Client#stream} method to subscribe to streams.\n *\n * See the [FaunaDB Documentation](https://fauna.com/documentation) for detailed examples.\n *\n * All methods return promises containing a JSON object that represents the FaunaDB response.\n * Literal types in the response object will remain as strings, Arrays, and objects.\n * FaunaDB types, such as {@link Ref}, {@link SetRef}, {@link FaunaTime}, and {@link FaunaDate} will\n * be converted into the appropriate object.\n *\n * (So if a response contains `{ \"@ref\": \"collections/frogs/123\" }`,\n * it will be returned as `new Ref(\"collections/frogs/123\")`.)\n *\n * @constructor\n * @param {?Object} options\n *   Object that configures this FaunaDB client.\n * @param {?string} options.endpoint\n *   Full URL for the FaunaDB server.\n * @param {?string} options.domain\n *   Base URL for the FaunaDB server.\n * @param {?('http'|'https')} options.scheme\n *   HTTP scheme to use.\n * @param {?number} options.port\n *   Port of the FaunaDB server.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @param {?number} options.timeout Read timeout in seconds.\n * @param {?Client~observerCallback} options.observer\n *   Callback that will be called after every completed request.\n * @param {?boolean} options.keepAlive\n *   Configures http/https keepAlive option (ignored in browser environments)\n * @param {?{ string: string }} options.headers\n *   Optional headers to send with requests\n * @param {?fetch} options.fetch\n *   a fetch compatible [API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for making a request\n * @param {?number} options.queryTimeout\n *   Sets the maximum amount of time (in milliseconds) for query execution on the server\n * @param {?number} options.http2SessionIdleTime\n *   Sets the maximum amount of time (in milliseconds) an HTTP2 session may live\n *   when there's no activity. Must be a non-negative integer, with a maximum value of 5000.\n *   If an invalid value is passed a default of 500 ms is applied. If a value\n *   exceeding 5000 ms is passed (e.g. Infinity) the maximum of 5000 ms is applied.\n *   Only applicable for NodeJS environment (when http2 module is used).\n *   can also be configured via the FAUNADB_HTTP2_SESSION_IDLE_TIME environment variable\n *   which has the highest priority and overrides the option passed into the Client constructor.\n * @param {?boolean} options.checkNewVersion\n *   Enabled by default. Prints a message to the terminal when a newer driver is available.\n * @param {?boolean} options.metrics\n *   Disabled by default. Controls whether or not query metrics are returned.\n */\nfunction Client(options) {\n  const http2SessionIdleTime = getHttp2SessionIdleTime(\n    options ? options.http2SessionIdleTime : undefined\n  )\n\n  if (options) options.http2SessionIdleTime = http2SessionIdleTime\n\n  options = util.applyDefaults(options, {\n    endpoint: null,\n    domain: 'db.fauna.com',\n    scheme: 'https',\n    port: null,\n    secret: null,\n    timeout: 60,\n    observer: null,\n    keepAlive: true,\n    headers: {},\n    fetch: undefined,\n    queryTimeout: null,\n    http2SessionIdleTime,\n    checkNewVersion: false,\n  })\n\n  this._observer = options.observer\n  this._http = new http.HttpClient(options)\n  this.stream = stream.StreamAPI(this)\n}\n\n/**\n * Current API version.\n *\n * @type {string}\n */\nClient.apiVersion = packageJson.apiVersion\n\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} FaunaDB response object.\n */\nClient.prototype.query = function(expression, options) {\n  query.arity.between(1, 2, arguments, 'Client.prototype.query')\n  options = Object.assign({}, this._globalQueryOptions, options)\n  return this._execute('POST', '', query.wrap(expression), null, options)\n}\n\n/**\n * Returns a {@link PageHelper} for the given Query expression.\n * This provides a helpful API for paginating over FaunaDB responses.\n * @param expression {Expr}\n *   The Query expression to paginate over.\n * @param params {Object}\n *   Options to be passed to the paginate function. See [paginate](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * @param options {?Object}\n *   Object that configures the current pagination queries, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @returns {PageHelper} A PageHelper that wraps the provided expression.\n */\nClient.prototype.paginate = function(expression, params, options) {\n  params = util.defaults(params, {})\n  options = util.defaults(options, {})\n\n  return new PageHelper(this, expression, params, options)\n}\n\n/**\n * Sends a `ping` request to FaunaDB.\n * @return {external:Promise<string>} Ping response.\n */\nClient.prototype.ping = function(scope, timeout) {\n  return this._execute('GET', 'ping', null, { scope: scope, timeout: timeout })\n}\n\n/**\n * Get the freshest timestamp reported to this client.\n * @returns {number} the last seen transaction time\n */\nClient.prototype.getLastTxnTime = function() {\n  return this._http.getLastTxnTime()\n}\n\n/**\n * Sync the freshest timestamp seen by this client.\n *\n * This has no effect if staler than currently stored timestamp.\n * WARNING: This should be used only when coordinating timestamps across\n *          multiple clients. Moving the timestamp arbitrarily forward into\n *          the future will cause transactions to stall.\n * @param time {number} the last seen transaction time\n */\nClient.prototype.syncLastTxnTime = function(time) {\n  this._http.syncLastTxnTime(time)\n}\n\n/**\n * Closes the client session and cleans up any held resources.\n * By default, it will wait for any ongoing requests to complete on their own;\n * streaming requests are terminated forcibly. Any subsequent requests will\n * error after the .close method is called.\n * Should be used at application termination in order to release any open resources\n * and allow the process to terminate e.g. when the custom http2SessionIdleTime parameter is used.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Specifying this property will force any ongoing\n * requests to terminate instead of gracefully waiting until they complete.\n * This may result in an ERR_HTTP2_STREAM_CANCEL error for NodeJS.\n * @returns {Promise<void>}\n */\nClient.prototype.close = function(opts) {\n  return this._http.close(opts)\n}\n\n/**\n * Executes a query via the FaunaDB Query API.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi),\n * and the query functions in this documentation.\n * @param expression {module:query~ExprArg}\n *   The query to execute. Created from {@link module:query} functions.\n * @param {?Object} options\n *   Object that configures the current query, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @return {external:Promise<Object>} {value, metrics} An object containing the FaunaDB response object and the list of query metrics incurred by the request.\n */\nClient.prototype.queryWithMetrics = function(expression, options) {\n  query.arity.between(1, 2, arguments, 'Client.prototype.query')\n  return this._execute('POST', '', query.wrap(expression), null, options, true)\n}\n\nClient.prototype._execute = function(\n  method,\n  path,\n  data,\n  query,\n  options,\n  returnMetrics = false\n) {\n  query = util.defaults(query, null)\n\n  if (\n    path instanceof values.Ref ||\n    util.checkInstanceHasProperty(path, '_isFaunaRef')\n  ) {\n    path = path.value\n  }\n\n  if (query !== null) {\n    query = util.removeUndefinedValues(query)\n  }\n\n  var startTime = Date.now()\n  var self = this\n  var body =\n    ['GET', 'HEAD'].indexOf(method) >= 0 ? undefined : JSON.stringify(data)\n\n  return this._http\n    .execute(\n      Object.assign({}, options, {\n        path: path,\n        query: query,\n        method: method,\n        body: body,\n      })\n    )\n    .then(function(response) {\n      var endTime = Date.now()\n      var responseObject = json.parseJSON(response.body)\n      var result = new RequestResult(\n        method,\n        path,\n        query,\n        body,\n        data,\n        response.body,\n        responseObject,\n        response.status,\n        response.headers,\n        startTime,\n        endTime\n      )\n      self._handleRequestResult(response, result, options)\n\n      const metricsHeaders = [\n        'x-compute-ops',\n        'x-byte-read-ops',\n        'x-byte-write-ops',\n        'x-query-time',\n        'x-txn-retries',\n      ]\n\n      if (returnMetrics) {\n        return {\n          value: responseObject['resource'],\n          metrics: Object.fromEntries(\n            Array.from(Object.entries(response.headers))\n              .filter(([k, v]) => metricsHeaders.includes(k))\n              .map(([k, v]) => [k, parseInt(v)])\n          ),\n        }\n      } else {\n        return responseObject['resource']\n      }\n    })\n}\n\nClient.prototype._handleRequestResult = function(response, result, options) {\n  var txnTimeHeaderKey = 'x-txn-time'\n\n  if (response.headers[txnTimeHeaderKey] != null) {\n    this.syncLastTxnTime(parseInt(response.headers[txnTimeHeaderKey], 10))\n  }\n\n  var observers = [this._observer, options && options.observer]\n\n  observers.forEach(observer => {\n    if (typeof observer == 'function') {\n      observer(result, this)\n    }\n  })\n\n  errors.FaunaHTTPError.raiseForStatusCode(result)\n}\n\nfunction getHttp2SessionIdleTime(configuredIdleTime) {\n  const maxIdleTime = 5000\n  const defaultIdleTime = 500\n  const envIdleTime = util.getEnvVariable('FAUNADB_HTTP2_SESSION_IDLE_TIME')\n\n  var value = defaultIdleTime\n  // attemp to set the idle time to the env value and then the configured value\n  const values = [envIdleTime, configuredIdleTime]\n  for (const rawValue of values) {\n    const parsedValue =\n      rawValue === 'Infinity' ? Number.MAX_SAFE_INTEGER : parseInt(rawValue, 10)\n    const isNegative = parsedValue < 0\n    const isGreaterThanMax = parsedValue > maxIdleTime\n    // if we didn't get infinity or a positive integer move to the next value\n    if (isNegative || !parsedValue) continue\n    // if we did get something valid constrain it to the ceiling\n    value = parsedValue\n    if (isGreaterThanMax) value = maxIdleTime\n    break\n  }\n\n  return value\n}\n\nmodule.exports = Client\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/Client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/Expr.js":
/*!******************************************!*\
  !*** ./node_modules/faunadb/src/Expr.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar util = __webpack_require__(/*! ./_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\n\n/**\n * A representation of a FaunaDB Query Expression. Generally, you shouldn't need\n * to use this class directly; use the Query helpers defined in {@link module:query}.\n *\n * @param {Object} obj The object that represents a Query to be treated as an Expression.\n * @constructor\n */\nfunction Expr(obj) {\n  this.raw = obj\n}\n\nExpr.prototype._isFaunaExpr = true\n\nExpr.prototype.toJSON = function() {\n  return this.raw\n}\n\nExpr.prototype.toFQL = function() {\n  return exprToString(this.raw)\n}\n\nvar varArgsFunctions = [\n  'Do',\n  'Call',\n  'Union',\n  'Intersection',\n  'Difference',\n  'Equals',\n  'Add',\n  'BitAnd',\n  'BitOr',\n  'BitXor',\n  'Divide',\n  'Max',\n  'Min',\n  'Modulo',\n  'Multiply',\n  'Subtract',\n  'LT',\n  'LTE',\n  'GT',\n  'GTE',\n  'And',\n  'Or',\n]\n\n// FQL function names come across the wire as all lowercase letters\n// (like the key of this object). Not all are properly snake-cased\n// on the Core side, which causes improper capitalizations.\n//\n// JS Driver patch: https://faunadb.atlassian.net/browse/FE-540\n// Core update: https://faunadb.atlassian.net/browse/ENG-2110\n\nvar specialCases = {\n  containsstrregex: 'ContainsStrRegex',\n  containsstr: 'ContainsStr',\n  endswith: 'EndsWith',\n  findstr: 'FindStr',\n  findstrregex: 'FindStrRegex',\n  gt: 'GT',\n  gte: 'GTE',\n  is_nonempty: 'is_non_empty',\n  lowercase: 'LowerCase',\n  lt: 'LT',\n  lte: 'LTE',\n  ltrim: 'LTrim',\n  ngram: 'NGram',\n  rtrim: 'RTrim',\n  regexescape: 'RegexEscape',\n  replacestr: 'ReplaceStr',\n  replacestrregex: 'ReplaceStrRegex',\n  startswith: 'StartsWith',\n  substring: 'SubString',\n  titlecase: 'TitleCase',\n  uppercase: 'UpperCase',\n}\n\n/**\n *\n * @param {Expr} expression A FQL expression\n * @returns {Boolean} Returns true for valid expressions\n * @private\n */\nfunction isExpr(expression) {\n  return (\n    expression instanceof Expr ||\n    util.checkInstanceHasProperty(expression, '_isFaunaExpr')\n  )\n}\n\n/**\n *\n * @param {Object} obj An object to print\n * @returns {String} String representation of object\n * @private\n */\nfunction printObject(obj) {\n  return (\n    '{' +\n    Object.keys(obj)\n      .map(function(k) {\n        return '\"' + k + '\"' + ': ' + exprToString(obj[k])\n      })\n      .join(', ') +\n    '}'\n  )\n}\n\n/**\n *\n * @param {Array} arr An array to print\n * @param {Function} toStr Function used for stringification\n * @returns {String} String representation of array\n * @private\n */\nfunction printArray(arr, toStr) {\n  return arr\n    .map(function(item) {\n      return toStr(item)\n    })\n    .join(', ')\n}\n\n/**\n *\n * @param {String} fn A snake-case FQL function name\n * @returns {String} The correpsonding camel-cased FQL function name\n * @private\n */\nfunction convertToCamelCase(fn) {\n  // For FQL functions with special formatting concerns, we\n  // use the specialCases object above to define their casing.\n  if (fn in specialCases) fn = specialCases[fn]\n\n  return fn\n    .split('_')\n    .map(function(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1)\n    })\n    .join('')\n}\n\nvar exprToString = function(expr, caller) {\n  // If expr is a Expr, we want to parse expr.raw instead\n  if (isExpr(expr)) {\n    if ('value' in expr) return expr.toString()\n    expr = expr.raw\n  }\n\n  // Return early to avoid extra work if null\n  if (expr === null) {\n    return 'null'\n  }\n\n  // Return stringified value if expression is not an Object or Array\n  switch (typeof expr) {\n    case 'string':\n      return JSON.stringify(expr)\n    case 'symbol':\n    case 'number':\n    case 'boolean':\n      return expr.toString()\n    case 'undefined':\n      return 'undefined'\n  }\n\n  // Handle expression Arrays\n  if (Array.isArray(expr)) {\n    var array = printArray(expr, exprToString)\n    return varArgsFunctions.indexOf(caller) != -1 ? array : '[' + array + ']'\n  }\n\n  // Parse expression Objects\n  if ('match' in expr) {\n    var matchStr = exprToString(expr['match'])\n    var terms = expr['terms'] || []\n\n    if (isExpr(terms)) terms = terms.raw\n\n    if (Array.isArray(terms) && terms.length == 0)\n      return 'Match(' + matchStr + ')'\n\n    if (Array.isArray(terms)) {\n      return (\n        'Match(' + matchStr + ', [' + printArray(terms, exprToString) + '])'\n      )\n    }\n\n    return 'Match(' + matchStr + ', ' + exprToString(terms) + ')'\n  }\n\n  if ('paginate' in expr) {\n    var exprKeys = Object.keys(expr)\n    if (exprKeys.length === 1) {\n      return 'Paginate(' + exprToString(expr['paginate']) + ')'\n    }\n\n    var expr2 = Object.assign({}, expr)\n    delete expr2['paginate']\n\n    return (\n      'Paginate(' +\n      exprToString(expr['paginate']) +\n      ', ' +\n      printObject(expr2) +\n      ')'\n    )\n  }\n\n  if ('let' in expr && 'in' in expr) {\n    var letExpr = ''\n\n    if (Array.isArray(expr['let']))\n      letExpr = '[' + printArray(expr['let'], printObject) + ']'\n    else letExpr = printObject(expr['let'])\n\n    return 'Let(' + letExpr + ', ' + exprToString(expr['in']) + ')'\n  }\n\n  if ('object' in expr) return printObject(expr['object'])\n\n  if ('merge' in expr) {\n    if (expr.lambda) {\n      return (\n        'Merge(' +\n        exprToString(expr.merge) +\n        ', ' +\n        exprToString(expr.with) +\n        ', ' +\n        exprToString(expr.lambda) +\n        ')'\n      )\n    }\n\n    return (\n      'Merge(' + exprToString(expr.merge) + ', ' + exprToString(expr.with) + ')'\n    )\n  }\n\n  if ('lambda' in expr) {\n    return (\n      'Lambda(' +\n      exprToString(expr['lambda']) +\n      ', ' +\n      exprToString(expr['expr']) +\n      ')'\n    )\n  }\n\n  if ('filter' in expr) {\n    return (\n      'Filter(' +\n      exprToString(expr['collection']) +\n      ', ' +\n      exprToString(expr['filter']) +\n      ')'\n    )\n  }\n\n  if ('call' in expr) {\n    return (\n      'Call(' +\n      exprToString(expr['call']) +\n      ', ' +\n      exprToString(expr['arguments']) +\n      ')'\n    )\n  }\n\n  if ('map' in expr) {\n    return (\n      'Map(' +\n      exprToString(expr['collection']) +\n      ', ' +\n      exprToString(expr['map']) +\n      ')'\n    )\n  }\n\n  if ('foreach' in expr) {\n    return (\n      'Foreach(' +\n      exprToString(expr['collection']) +\n      ', ' +\n      exprToString(expr['foreach']) +\n      ')'\n    )\n  }\n\n  var keys = Object.keys(expr)\n  var fn = keys[0]\n  fn = convertToCamelCase(fn)\n\n  // The filter prevents zero arity functions from having a null argument\n  // This only works under the assumptions\n  // that there are no functions where a single 'null' argument makes sense.\n  var args = keys\n    .filter(k => expr[k] !== null || keys.length > 1)\n    .map(k => exprToString(expr[k], fn))\n    .join(', ')\n\n  return fn + '(' + args + ')'\n}\n\nExpr.toString = exprToString\n\nmodule.exports = Expr\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/Expr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/PageHelper.js":
/*!************************************************!*\
  !*** ./node_modules/faunadb/src/PageHelper.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar query = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/faunadb/src/query.js\")\nvar objectAssign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\")\n\n/**\n * A FaunaDB Lambda expression to be passed into one of the collection\n * functions: Map or Filter.\n *\n * @callback PageHelper~collectionFunction\n * @param {any} var\n *   The variable passed in by FaunaDB when this Lambda\n *   function is executed.\n * @return {Expr}\n *   The FaunaDB query expression to be returned by this Lambda.\n */\n\n/**\n * @callback PageHelper~eachFunction\n * @param {Object} page\n *   A page returned by FaunaDB's Paginate function.\n */\n\n/**\n * A wrapper that provides a helpful API for consuming FaunaDB pages.\n *\n * Generally this is constructed through the {@link Client#paginate} method.\n *\n * The {@link PageHelper#map} and {@link PageHelper#filter} methods will wrap the underlying query with a Map\n * and Filter query function, respectively. These will be executed on the server when a promise-returning function\n * is called.\n *\n * The {@link PageHelper#each} and {@link PageHelper#eachReverse} functions dispatch queries to FaunaDB, and return Promises\n * representing the completion of those queries. The callbacks provided to these functions are executed locally when the\n * queries return.\n *\n * The {@link PageHelper#nextPage} and {@link PageHelper#previousPage} functions also dispatch queries to FaunaDB,\n * but return their responses in a wrapped Promise.\n *\n * @param {Client} client\n *   The FaunaDB client used to paginate.\n * @param {Object} set\n *   The set to paginate.\n * @param {?Object} params\n *   Parameters to be passed to the FaunaDB Paginate function.\n * @param {?Object} options\n *   Object that configures the current pagination, overriding FaunaDB client options.\n * @param {?string} options.secret FaunaDB secret (see [Reference Documentation](https://app.fauna.com/documentation/intro/security))\n * @constructor\n */\nfunction PageHelper(client, set, params, options) {\n  if (params === undefined) {\n    params = {}\n  }\n\n  if (options === undefined) {\n    options = {}\n  }\n\n  this.reverse = false\n  this.params = {}\n\n  this.before = undefined\n  this.after = undefined\n\n  objectAssign(this.params, params)\n\n  var cursorParams = this.params.cursor || this.params\n\n  if ('before' in cursorParams) {\n    this.before = cursorParams.before\n    delete cursorParams.before\n  } else if ('after' in cursorParams) {\n    this.after = cursorParams.after\n    delete cursorParams.after\n  }\n\n  this.options = {}\n  objectAssign(this.options, options)\n\n  this.client = client\n  this.set = set\n\n  /**\n   * @member {Array.<Function>}\n   * @type {Array.<Function>}\n   * @private\n   */\n  this._faunaFunctions = []\n}\n\n/**\n * Wraps the set to be paginated with a FaunaDB Map function.\n * As this function is executed on the server, the `lambda` param must\n * return a valid query expression.\n *\n * @param {PageHelper~collectionFunction} lambda\n *   The Lambda expression to be passed into the Map function.\n * @return {PageHelper}\n *\n */\nPageHelper.prototype.map = function(lambda) {\n  var rv = this._clone()\n  rv._faunaFunctions.push(function(q) {\n    return query.Map(q, lambda)\n  })\n  return rv\n}\n\n/**\n * Wraps the set to be paginated with a FaunaDB Filter funciton.\n * As this function is executed on the server, the `lambda` param must\n * return a valid query expression.\n *\n * @param {PageHelper~collectionFunction} lambda\n *   The lambda expression to be passed into the Filter function.\n * @return {PageHelper}\n */\nPageHelper.prototype.filter = function(lambda) {\n  var rv = this._clone()\n  rv._faunaFunctions.push(function(q) {\n    return query.Filter(q, lambda)\n  })\n  return rv\n}\n\n/**\n * Executes the provided function for each page.\n *\n * @param {PageHelper~eachFunction} lambda\n *   A function to be executed for each page.\n * @returns {external:Promise.<void>}\n */\nPageHelper.prototype.each = function(lambda) {\n  return this._retrieveNextPage(this.after, false).then(\n    this._consumePages(lambda, false)\n  )\n}\n\n/**\n * Executes the provided function for each page, in the reverse direction.\n * @param {PageHelper~eachFunction} lambda\n * @returns {external:Promise.<void>}\n */\nPageHelper.prototype.eachReverse = function(lambda) {\n  return this._retrieveNextPage(this.before, true).then(\n    this._consumePages(lambda, true)\n  )\n}\n\n/**\n * Queries for the previous page from the current cursor point; this mutates\n * the state of the PageHelper when the query completes, updating the internal\n * cursor state to that of the returned page.\n *\n * @returns {external:Promise.<object>}\n */\nPageHelper.prototype.previousPage = function() {\n  var self = this\n  return this._retrieveNextPage(this.before, true).then(\n    this._adjustCursors.bind(self)\n  )\n}\n\n/**\n * Queries for the next page from the current cursor point; this mutates\n * the state of the PageHelper when the query completes, updating the internal\n * cursor state to that of the returned page.\n *\n * @returns {external:Promise.<object>}\n */\nPageHelper.prototype.nextPage = function() {\n  var self = this\n  return this._retrieveNextPage(this.after, false).then(\n    this._adjustCursors.bind(self)\n  )\n}\n\nPageHelper.prototype._adjustCursors = function(page) {\n  if (page.after !== undefined) {\n    this.after = page.after\n  }\n\n  if (page.before !== undefined) {\n    this.before = page.before\n  }\n\n  return page.data\n}\n\nPageHelper.prototype._consumePages = function(lambda, reverse) {\n  var self = this\n  return function(page) {\n    lambda(page.data)\n\n    var nextCursor\n    if (reverse) {\n      nextCursor = page.before\n    } else {\n      nextCursor = page.after\n    }\n\n    if (nextCursor !== undefined) {\n      return self\n        ._retrieveNextPage(nextCursor, reverse)\n        .then(self._consumePages(lambda, reverse))\n    } else {\n      return Promise.resolve()\n    }\n  }\n}\n\n/**\n *\n * @returns {external:Promise.<Object>}\n * @private\n */\nPageHelper.prototype._retrieveNextPage = function(cursor, reverse) {\n  var opts = {}\n  objectAssign(opts, this.params)\n  var cursorOpts = opts.cursor || opts\n\n  if (cursor !== undefined) {\n    if (reverse) {\n      cursorOpts.before = cursor\n    } else {\n      cursorOpts.after = cursor\n    }\n  } else {\n    if (reverse) {\n      cursorOpts.before = null\n    }\n  }\n\n  var q = query.Paginate(this.set, opts)\n\n  if (this._faunaFunctions.length > 0) {\n    this._faunaFunctions.forEach(function(lambda) {\n      q = lambda(q)\n    })\n  }\n\n  return this.client.query(q, this.options)\n}\n\n/**\n * @private\n * @returns {PageHelper}\n */\nPageHelper.prototype._clone = function() {\n  return Object.create(PageHelper.prototype, {\n    client: { value: this.client },\n    set: { value: this.set },\n    _faunaFunctions: { value: this._faunaFunctions },\n    before: { value: this.before },\n    after: { value: this.after },\n    params: { value: this.params },\n  })\n}\n\nmodule.exports = PageHelper\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/PageHelper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/RequestResult.js":
/*!***************************************************!*\
  !*** ./node_modules/faunadb/src/RequestResult.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * A structure containing the request and response context for a given FaunaDB request.\n * Provided to an observer function optionally defined in the {@link Client} constructor.\n *\n * @param {'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'} method\n *   The HTTP method used in the request.\n * @param {string} path\n *   The path that was queried. Relative to the client's domain.\n * @param {string} query\n *   URL query parameters. Only set if `method` is \"GET\".\n * @param {Object} requestRaw\n *   The JSON request string.\n * @param {Object} requestContent\n *   The request data.\n * @param {string} responseRaw\n *   The unparsed response data, as a string.\n * @param {object | FaunaHttpErrorResponseContent} responseContent\n *   The response data parsed as JSON.\n * @param {number} statusCode\n *   The HTTP response status code.\n * @param {object} responseHeaders\n *   The HTTP headers returned in the response.\n * @param {number} startTime\n *   The time the request was issued by the client.\n * @param {number} endTime\n *   The time the response was received by the client.\n * @constructor\n */\nfunction RequestResult(\n  method,\n  path,\n  query,\n  requestRaw,\n  requestContent,\n  responseRaw,\n  responseContent,\n  statusCode,\n  responseHeaders,\n  startTime,\n  endTime\n) {\n  /** @type {'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'} */\n  this.method = method\n\n  /** @type {string} */\n  this.path = path\n\n  /**\n   * URL query. Null unless `method == 'get'`.\n   * *Not* related to {@link Client.query}.\n   * @type {object}\n   */\n  this.query = query\n\n  /** @type {string} */\n  this.requestRaw = requestRaw\n\n  /** @type {object} */\n  this.requestContent = requestContent\n\n  /** @type {string} */\n  this.responseRaw = responseRaw\n\n  /**\n   * Parsed value returned by the server.\n   * Includes \"resource\" wrapper dict, or may be an FaunaHttpErrorResponseContent instead\n   * @type {object | FaunaHttpErrorResponseContent}\n   */\n  this.responseContent = responseContent\n\n  /** @type {number} */\n  this.statusCode = statusCode\n\n  /** @type {object} */\n  this.responseHeaders = responseHeaders\n\n  /** @type {number} */\n  this.startTime = startTime\n\n  /** @type {number} */\n  this.endTime = endTime\n}\n\n/**\n * `this.endTime - this.startTime`: Time taken in milliseconds.\n * @type {number}\n */\nObject.defineProperty(RequestResult.prototype, 'timeTaken', {\n  get: function() {\n    return this.endTime - this.startTime\n  },\n})\n\nmodule.exports = RequestResult\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmF1bmFkYi9zcmMvUmVxdWVzdFJlc3VsdC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0EsK0RBQStELGNBQWM7QUFDN0U7QUFDQSxXQUFXLDZDQUE2QztBQUN4RDtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFdBQVcsd0NBQXdDO0FBQ25EO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw2Q0FBNkM7QUFDMUQ7O0FBRUEsYUFBYSxRQUFRO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDLFlBQVk7QUFDWjtBQUNBOztBQUVBLGFBQWEsUUFBUTtBQUNyQjs7QUFFQSxhQUFhLFFBQVE7QUFDckI7O0FBRUEsYUFBYSxRQUFRO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBLGFBQWEsUUFBUTtBQUNyQjs7QUFFQSxhQUFhLFFBQVE7QUFDckI7O0FBRUEsYUFBYSxRQUFRO0FBQ3JCOztBQUVBLGFBQWEsUUFBUTtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL29rYm9va3Nob3BuZy8uL25vZGVfbW9kdWxlcy9mYXVuYWRiL3NyYy9SZXF1ZXN0UmVzdWx0LmpzPzA4OTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogQSBzdHJ1Y3R1cmUgY29udGFpbmluZyB0aGUgcmVxdWVzdCBhbmQgcmVzcG9uc2UgY29udGV4dCBmb3IgYSBnaXZlbiBGYXVuYURCIHJlcXVlc3QuXG4gKiBQcm92aWRlZCB0byBhbiBvYnNlcnZlciBmdW5jdGlvbiBvcHRpb25hbGx5IGRlZmluZWQgaW4gdGhlIHtAbGluayBDbGllbnR9IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7J0dFVCcgfCAnUE9TVCcgfCAnUFVUJyB8ICdQQVRDSCcgfCAnREVMRVRFJ30gbWV0aG9kXG4gKiAgIFRoZSBIVFRQIG1ldGhvZCB1c2VkIGluIHRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqICAgVGhlIHBhdGggdGhhdCB3YXMgcXVlcmllZC4gUmVsYXRpdmUgdG8gdGhlIGNsaWVudCdzIGRvbWFpbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVxuICogICBVUkwgcXVlcnkgcGFyYW1ldGVycy4gT25seSBzZXQgaWYgYG1ldGhvZGAgaXMgXCJHRVRcIi5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZXF1ZXN0UmF3XG4gKiAgIFRoZSBKU09OIHJlcXVlc3Qgc3RyaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3RDb250ZW50XG4gKiAgIFRoZSByZXF1ZXN0IGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzcG9uc2VSYXdcbiAqICAgVGhlIHVucGFyc2VkIHJlc3BvbnNlIGRhdGEsIGFzIGEgc3RyaW5nLlxuICogQHBhcmFtIHtvYmplY3QgfCBGYXVuYUh0dHBFcnJvclJlc3BvbnNlQ29udGVudH0gcmVzcG9uc2VDb250ZW50XG4gKiAgIFRoZSByZXNwb25zZSBkYXRhIHBhcnNlZCBhcyBKU09OLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c0NvZGVcbiAqICAgVGhlIEhUVFAgcmVzcG9uc2Ugc3RhdHVzIGNvZGUuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2VIZWFkZXJzXG4gKiAgIFRoZSBIVFRQIGhlYWRlcnMgcmV0dXJuZWQgaW4gdGhlIHJlc3BvbnNlLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0VGltZVxuICogICBUaGUgdGltZSB0aGUgcmVxdWVzdCB3YXMgaXNzdWVkIGJ5IHRoZSBjbGllbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kVGltZVxuICogICBUaGUgdGltZSB0aGUgcmVzcG9uc2Ugd2FzIHJlY2VpdmVkIGJ5IHRoZSBjbGllbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUmVxdWVzdFJlc3VsdChcbiAgbWV0aG9kLFxuICBwYXRoLFxuICBxdWVyeSxcbiAgcmVxdWVzdFJhdyxcbiAgcmVxdWVzdENvbnRlbnQsXG4gIHJlc3BvbnNlUmF3LFxuICByZXNwb25zZUNvbnRlbnQsXG4gIHN0YXR1c0NvZGUsXG4gIHJlc3BvbnNlSGVhZGVycyxcbiAgc3RhcnRUaW1lLFxuICBlbmRUaW1lXG4pIHtcbiAgLyoqIEB0eXBlIHsnR0VUJyB8ICdQT1NUJyB8ICdQVVQnIHwgJ1BBVENIJyB8ICdERUxFVEUnfSAqL1xuICB0aGlzLm1ldGhvZCA9IG1ldGhvZFxuXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICB0aGlzLnBhdGggPSBwYXRoXG5cbiAgLyoqXG4gICAqIFVSTCBxdWVyeS4gTnVsbCB1bmxlc3MgYG1ldGhvZCA9PSAnZ2V0J2AuXG4gICAqICpOb3QqIHJlbGF0ZWQgdG8ge0BsaW5rIENsaWVudC5xdWVyeX0uXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqL1xuICB0aGlzLnF1ZXJ5ID0gcXVlcnlcblxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgdGhpcy5yZXF1ZXN0UmF3ID0gcmVxdWVzdFJhd1xuXG4gIC8qKiBAdHlwZSB7b2JqZWN0fSAqL1xuICB0aGlzLnJlcXVlc3RDb250ZW50ID0gcmVxdWVzdENvbnRlbnRcblxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgdGhpcy5yZXNwb25zZVJhdyA9IHJlc3BvbnNlUmF3XG5cbiAgLyoqXG4gICAqIFBhcnNlZCB2YWx1ZSByZXR1cm5lZCBieSB0aGUgc2VydmVyLlxuICAgKiBJbmNsdWRlcyBcInJlc291cmNlXCIgd3JhcHBlciBkaWN0LCBvciBtYXkgYmUgYW4gRmF1bmFIdHRwRXJyb3JSZXNwb25zZUNvbnRlbnQgaW5zdGVhZFxuICAgKiBAdHlwZSB7b2JqZWN0IHwgRmF1bmFIdHRwRXJyb3JSZXNwb25zZUNvbnRlbnR9XG4gICAqL1xuICB0aGlzLnJlc3BvbnNlQ29udGVudCA9IHJlc3BvbnNlQ29udGVudFxuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlXG5cbiAgLyoqIEB0eXBlIHtvYmplY3R9ICovXG4gIHRoaXMucmVzcG9uc2VIZWFkZXJzID0gcmVzcG9uc2VIZWFkZXJzXG5cbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIHRoaXMuc3RhcnRUaW1lID0gc3RhcnRUaW1lXG5cbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIHRoaXMuZW5kVGltZSA9IGVuZFRpbWVcbn1cblxuLyoqXG4gKiBgdGhpcy5lbmRUaW1lIC0gdGhpcy5zdGFydFRpbWVgOiBUaW1lIHRha2VuIGluIG1pbGxpc2Vjb25kcy5cbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXF1ZXN0UmVzdWx0LnByb3RvdHlwZSwgJ3RpbWVUYWtlbicsIHtcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5lbmRUaW1lIC0gdGhpcy5zdGFydFRpbWVcbiAgfSxcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gUmVxdWVzdFJlc3VsdFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/RequestResult.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/_http/errors.js":
/*!**************************************************!*\
  !*** ./node_modules/faunadb/src/_http/errors.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar util = __webpack_require__(/*! ../_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\n\n/**\n * Thrown by HttpClient when request hits specified timeout.\n *\n * @param {?string} message\n * @extends Error\n * @constructor\n */\nfunction TimeoutError(message) {\n  Error.call(this)\n\n  this.message = message || 'Request aborted due to timeout'\n  this.isTimeoutError = true\n}\n\nutil.inherits(TimeoutError, Error)\n\n/**\n * Thrown by HttpClient when request is aborted via Signal interface.\n *\n * @param {?string} message\n * @extends Error\n * @constructor\n */\nfunction AbortError(message) {\n  Error.call(this)\n\n  this.message = message || 'Request aborted'\n  this.isAbortError = true\n}\n\nutil.inherits(AbortError, Error)\n\nmodule.exports = {\n  TimeoutError: TimeoutError,\n  AbortError: AbortError,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmF1bmFkYi9zcmMvX2h0dHAvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1osV0FBVyxtQkFBTyxDQUFDLDJEQUFVOztBQUU3QjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2tib29rc2hvcG5nLy4vbm9kZV9tb2R1bGVzL2ZhdW5hZGIvc3JjL19odHRwL2Vycm9ycy5qcz8wNGQxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIHV0aWwgPSByZXF1aXJlKCcuLi9fdXRpbCcpXG5cbi8qKlxuICogVGhyb3duIGJ5IEh0dHBDbGllbnQgd2hlbiByZXF1ZXN0IGhpdHMgc3BlY2lmaWVkIHRpbWVvdXQuXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBtZXNzYWdlXG4gKiBAZXh0ZW5kcyBFcnJvclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFRpbWVvdXRFcnJvcihtZXNzYWdlKSB7XG4gIEVycm9yLmNhbGwodGhpcylcblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdSZXF1ZXN0IGFib3J0ZWQgZHVlIHRvIHRpbWVvdXQnXG4gIHRoaXMuaXNUaW1lb3V0RXJyb3IgPSB0cnVlXG59XG5cbnV0aWwuaW5oZXJpdHMoVGltZW91dEVycm9yLCBFcnJvcilcblxuLyoqXG4gKiBUaHJvd24gYnkgSHR0cENsaWVudCB3aGVuIHJlcXVlc3QgaXMgYWJvcnRlZCB2aWEgU2lnbmFsIGludGVyZmFjZS5cbiAqXG4gKiBAcGFyYW0gez9zdHJpbmd9IG1lc3NhZ2VcbiAqIEBleHRlbmRzIEVycm9yXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQWJvcnRFcnJvcihtZXNzYWdlKSB7XG4gIEVycm9yLmNhbGwodGhpcylcblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdSZXF1ZXN0IGFib3J0ZWQnXG4gIHRoaXMuaXNBYm9ydEVycm9yID0gdHJ1ZVxufVxuXG51dGlsLmluaGVyaXRzKEFib3J0RXJyb3IsIEVycm9yKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVGltZW91dEVycm9yOiBUaW1lb3V0RXJyb3IsXG4gIEFib3J0RXJyb3I6IEFib3J0RXJyb3IsXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/_http/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/_http/fetchAdapter.js":
/*!********************************************************!*\
  !*** ./node_modules/faunadb/src/_http/fetchAdapter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar { AbortController } = __webpack_require__(/*! node-abort-controller */ \"(ssr)/./node_modules/node-abort-controller/index.js\")\nvar util = __webpack_require__(/*! ../_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\nvar faunaErrors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/faunadb/src/errors.js\")\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/faunadb/src/_http/errors.js\")\n\n/**\n * Http client adapter built around fetch API.\n *\n * @constructor\n * @param {?object} options FetchAdapter options.\n * @param {?boolean} options.keepAlive Whether use keep-alive connection.\n * @param {?boolean} options.isHttps Whether use https connection.\n * @param {?function} options.fetch Fetch compatible API.\n * @private\n */\nfunction FetchAdapter(options) {\n  options = options || {}\n\n  /**\n   * Identifies a type of adapter.\n   *\n   * @type {string}\n   */\n  this.type = 'fetch'\n  /**\n   * Indicates whether the .close method has been called.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this._closed = false\n  this._fetch = util.resolveFetch(options.fetch)\n  /**\n   * A map that tracks ongoing requests to be able to cancel them when\n   * the .close method is called.\n   *\n   * @type {Map<Object, Object>}\n   * @private\n   */\n  this._pendingRequests = new Map()\n\n  if (util.isNodeEnv() && options.keepAlive) {\n    this._keepAliveEnabledAgent = new (options.isHttps\n      ? __webpack_require__(/*! https */ \"https\")\n      : __webpack_require__(/*! http */ \"http\")\n    ).Agent({ keepAlive: true, timeout: 3000 })\n  }\n}\n\n/**\n * Issues http requests using fetch API.\n *\n * @param {object} options Request options.\n * @param {string} options.origin Request origin.\n * @param {string} options.path Request path.\n * @param {?object} options.query Request query.\n * @param {string} options.method Request method.\n * @param {?object} options.headers Request headers.\n * @param {?string} options.body Request body utf8 string.\n * @params {?object} options.streamConsumer Stream consumer.\n * @param {?object} options.signal Abort signal object.\n * @param {?number} options.timeout Request timeout.\n * @returns {Promise} Request result.\n */\nFetchAdapter.prototype.execute = function(options) {\n  if (this._closed) {\n    return Promise.reject(\n      new faunaErrors.ClientClosed(\n        'The Client has already been closed',\n        'No subsequent requests can be issued after the .close method is called. ' +\n          'Consider creating a new Client instance'\n      )\n    )\n  }\n\n  var self = this\n  var timerId = null\n  var isStreaming = options.streamConsumer != null\n  // Use timeout only if no signal provided\n  var useTimeout = !options.signal && !!options.timeout\n  var ctrl = new AbortController()\n  var pendingRequest = {\n    isStreaming: isStreaming,\n    isAbortedByClose: false,\n    // This callback can be set during the .close method call to be notified\n    // on request ending to resolve .close's Promise only after all of the requests complete.\n    onComplete: null,\n  }\n\n  self._pendingRequests.set(ctrl, pendingRequest)\n\n  var onComplete = function() {\n    self._pendingRequests.delete(ctrl)\n\n    if (options.signal) {\n      options.signal.removeEventListener('abort', onAbort)\n    }\n\n    if (pendingRequest.onComplete) {\n      pendingRequest.onComplete()\n    }\n  }\n\n  var onSettle = function() {\n    if (timerId) {\n      clearTimeout(timerId)\n    }\n  }\n\n  var onResponse = function(response) {\n    onSettle()\n\n    var headers = responseHeadersAsObject(response.headers)\n    var processStream = isStreaming && response.ok\n\n    // Regular request - return text content immediately.\n    if (!processStream) {\n      onComplete()\n\n      return response.text().then(function(content) {\n        return {\n          body: content,\n          headers: headers,\n          status: response.status,\n        }\n      })\n    }\n\n    attachStreamConsumer(response, options.streamConsumer, onComplete)\n\n    return {\n      // Syntactic stream representation.\n      body: '[stream]',\n      headers: headers,\n      status: response.status,\n    }\n  }\n\n  var onError = function(error) {\n    onSettle()\n    onComplete()\n\n    return Promise.reject(\n      remapIfAbortError(error, function() {\n        if (!isStreaming && pendingRequest.isAbortedByClose) {\n          return new faunaErrors.ClientClosed(\n            'The request is aborted due to the Client#close ' +\n              'call with the force=true option'\n          )\n        }\n\n        return useTimeout ? new errors.TimeoutError() : new errors.AbortError()\n      })\n    )\n  }\n\n  var onAbort = function() {\n    ctrl.abort()\n  }\n\n  if (useTimeout) {\n    timerId = setTimeout(function() {\n      timerId = null\n      ctrl.abort()\n    }, options.timeout)\n  }\n\n  if (options.signal) {\n    options.signal.addEventListener('abort', onAbort)\n  }\n\n  return this._fetch(\n    util.formatUrl(options.origin, options.path, options.query),\n    {\n      method: options.method,\n      headers: options.headers,\n      body: options.body,\n      agent: this._keepAliveEnabledAgent,\n      signal: ctrl.signal,\n    }\n  )\n    .then(onResponse)\n    .catch(onError)\n}\n\n/**\n * Moves to the closed state, aborts streaming requests.\n * Aborts non-streaming requests if force is true,\n * waits until they complete otherwise.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Whether to force resources clean up.\n * @returns {Promise<void>}\n */\nFetchAdapter.prototype.close = function(opts) {\n  opts = opts || {}\n\n  this._closed = true\n\n  var promises = []\n\n  var abortOrWait = function(pendingRequest, ctrl) {\n    var shouldAbort = pendingRequest.isStreaming || opts.force\n\n    if (shouldAbort) {\n      pendingRequest.isAbortedByClose = true\n\n      return ctrl.abort()\n    }\n\n    promises.push(\n      new Promise(function(resolve) {\n        pendingRequest.onComplete = resolve\n      })\n    )\n  }\n\n  this._pendingRequests.forEach(abortOrWait)\n\n  var noop = function() {}\n\n  return Promise.all(promises).then(noop)\n}\n\n/**\n * Attaches streamConsumer specifically either for browser or NodeJS.\n * Minimum browser compatibility based on current code:\n * Chrome                52\n * Edge                  79\n * Firefox               65\n * IE                    NA\n * Opera                 39\n * Safari                10.1\n * Android Webview       52\n * Chrome for Android    52\n * Firefox for Android   65\n * Opera for Android     41\n * Safari on iOS         10.3\n * Samsung Internet      6.0\n *\n * @param {object} response Fetch response.\n * @param {object} consumer StreamConsumer.\n * @param {function} onComplete Callback fired when the stream ends or errors.\n * @private\n */\nfunction attachStreamConsumer(response, consumer, onComplete) {\n  var onError = function(error) {\n    onComplete()\n    consumer.onError(remapIfAbortError(error))\n  }\n\n  if (util.isNodeEnv()) {\n    response.body\n      .on('error', onError)\n      .on('data', consumer.onData)\n      .on('end', function() {\n        onComplete()\n        // To simulate how browsers behave in case of \"end\" event.\n        consumer.onError(new TypeError('network error'))\n      })\n\n    return\n  }\n\n  // ATTENTION: The following code is meant to run in browsers and is not\n  // covered by current test automation. Manual testing on major browsers\n  // is required after making changes to it.\n  try {\n    var reader = response.body.getReader()\n    var decoder = new TextDecoder('utf-8')\n\n    function pump() {\n      return reader.read().then(function(msg) {\n        if (!msg.done) {\n          var chunk = decoder.decode(msg.value, { stream: true })\n\n          consumer.onData(chunk)\n\n          return pump()\n        }\n\n        onComplete()\n        // In case a browser hasn't thrown the \"network error\" on stream's end\n        // we need to force it in order to provide a way to handle stream's\n        // ending.\n        consumer.onError(new TypeError('network error'))\n      })\n    }\n\n    pump().catch(onError)\n  } catch (err) {\n    throw new faunaErrors.StreamsNotSupported(\n      'Please, consider providing a Fetch API-compatible function ' +\n        'with streamable response bodies. ' +\n        err\n    )\n  }\n}\n\n/**\n * Remaps an AbortError thrown by fetch to HttpClient's one\n * for timeout and abort use-cases.\n *\n * @param {Error} error Error object.\n * @param {?function} errorFactory A factory called to construct an abort error.\n * @returns {Error} Remapped or original error.\n * @private\n */\nfunction remapIfAbortError(error, errorFactory) {\n  var isAbortError = error && error.name === 'AbortError'\n\n  if (!isAbortError) {\n    return error\n  }\n\n  if (errorFactory) {\n    return errorFactory()\n  }\n\n  return new errors.AbortError()\n}\n\n/**\n * Converts fetch Headers object into POJO.\n *\n * @param {object} headers Fetch Headers object.\n * @returns {object} Response headers as a plain object.\n * @private\n */\nfunction responseHeadersAsObject(headers) {\n  var result = {}\n\n  for (var header of headers.entries()) {\n    var key = header[0]\n    var value = header[1]\n\n    result[key] = value\n  }\n\n  return result\n}\n\nmodule.exports = FetchAdapter\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/_http/fetchAdapter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/_http/http2Adapter.js":
/*!********************************************************!*\
  !*** ./node_modules/faunadb/src/_http/http2Adapter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar http2 = __webpack_require__(/*! http2 */ \"http2\")\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/faunadb/src/_http/errors.js\")\nvar faunaErrors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/faunadb/src/errors.js\")\nvar util = __webpack_require__(/*! ../_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\n\nvar STREAM_PREFIX = 'stream::'\n\n/**\n * Http client adapter built around NodeJS http2 module.\n *\n * @constructor\n * @param {object} options Http2Adapter options.\n * @param {number} options.http2SessionIdleTime The time (in milliseconds) that\n * an HTTP2 session may live when there's no activity.\n * @private\n */\nfunction Http2Adapter(options) {\n  /**\n   * Identifies a type of adapter.\n   *\n   * @type {string}\n   */\n  this.type = 'http2'\n  /**\n   * Serves for reusing http2 sessions between multiple calls.\n   *\n   * @type {object}\n   * @private\n   */\n  this._sessionMap = {}\n  /**\n   * The time (in ms) that an HTTP2 session may live when there's no activity.\n   *\n   * @type {number}\n   * @private\n   */\n  this._http2SessionIdleTime = options.http2SessionIdleTime\n  /**\n   * Indicates whether the .close method has been called.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this._closed = false\n}\n\n/**\n * Resolves ClientHttp2Session to be reused across multiple requests.\n *\n * @param {string} origin Request origin to connect to.\n * @param {?boolean} isStreaming Whether it's a streaming request. A separate session\n * is created for streaming requests to avoid shared resources with regular\n * ones for the purpose of reliability.\n * @returns {object} An interface to operate with HTTP2 session.\n */\nHttp2Adapter.prototype._resolveSessionFor = function(origin, isStreaming) {\n  var sessionKey = isStreaming ? STREAM_PREFIX + origin : origin\n\n  if (this._sessionMap[sessionKey]) {\n    return this._sessionMap[sessionKey]\n  }\n\n  var self = this\n  var timerId = null\n  var ongoingRequests = 0\n\n  var cleanup = function() {\n    self._cleanupSessionFor(origin, isStreaming)\n  }\n\n  var clearInactivityTimeout = function() {\n    if (timerId) {\n      clearTimeout(timerId)\n      timerId = null\n    }\n  }\n\n  var setInactivityTimeout = function() {\n    clearInactivityTimeout()\n\n    if (self._http2SessionIdleTime === Infinity) {\n      return\n    }\n\n    var onTimeout = function() {\n      timerId = null\n\n      if (ongoingRequests === 0) {\n        cleanup()\n      }\n    }\n\n    timerId = setTimeout(onTimeout, self._http2SessionIdleTime)\n  }\n\n  var close = function(force) {\n    clearInactivityTimeout()\n\n    var shouldDestroy = force || isStreaming\n\n    if (shouldDestroy) {\n      session.destroy()\n\n      return Promise.resolve()\n    }\n\n    return new Promise(function(resolve) {\n      session.close(resolve)\n    })\n  }\n\n  var onRequestStart = function() {\n    ++ongoingRequests\n    clearInactivityTimeout()\n  }\n\n  var onRequestEnd = function() {\n    --ongoingRequests\n\n    var noOngoingRequests = ongoingRequests === 0\n    var isSessionClosed = self._closed || session.closed || session.destroyed\n\n    if (noOngoingRequests && !isSessionClosed) {\n      setInactivityTimeout()\n    }\n  }\n\n  var session = http2\n    .connect(origin)\n    .once('error', cleanup)\n    .once('goaway', cleanup)\n  var sessionInterface = {\n    session: session,\n    close: close,\n    onRequestStart: onRequestStart,\n    onRequestEnd: onRequestEnd,\n  }\n\n  this._sessionMap[sessionKey] = sessionInterface\n\n  return sessionInterface\n}\n\n/**\n * Performs cleanup for broken session.\n *\n * @param {string} origin Request origin to connect to.\n * @param {?boolean} isStreaming Whether it's a streaming request.\n * @returns {void}\n */\nHttp2Adapter.prototype._cleanupSessionFor = function(origin, isStreaming) {\n  var sessionKey = isStreaming ? STREAM_PREFIX + origin : origin\n\n  if (this._sessionMap[sessionKey]) {\n    this._sessionMap[sessionKey].session.close()\n    delete this._sessionMap[sessionKey]\n  }\n}\n\n/**\n * Issues http requests using http2 module.\n *\n * @param {object} options Request options.\n * @param {string} options.origin Request origin.\n * @param {string} options.path Request path.\n * @param {?object} options.query Request query.\n * @param {string} options.method Request method.\n * @param {?object} options.headers Request headers.\n * @param {?string} options.body Request body utf8 string.\n * @params {?object} options.streamConsumer Stream consumer.\n * @param {?object} options.signal Abort signal object.\n * @param {?number} options.timeout Request timeout.\n * @returns {Promise} Request result.\n */\nHttp2Adapter.prototype.execute = function(options) {\n  if (this._closed) {\n    return Promise.reject(\n      new faunaErrors.ClientClosed(\n        'The Client has already been closed',\n        'No subsequent requests can be issued after the .close method is called. ' +\n          'Consider creating a new Client instance'\n      )\n    )\n  }\n\n  var self = this\n  var isStreaming = options.streamConsumer != null\n\n  return new Promise(function(resolvePromise, rejectPromise) {\n    var isPromiseSettled = false\n    var isCanceled = false\n\n    var resolve = function(value) {\n      isPromiseSettled = true\n      resolvePromise(value)\n    }\n\n    // If an error has occurred after the Promise is settled\n    // we need to call streamConsumer.onError instead of reject function.\n    // Possible scenario is aborting request when stream is already being consumed.\n    var rejectOrOnError = function(error) {\n      var remapped = remapHttp2Error({ error, isClosed: self._closed })\n\n      if (isPromiseSettled && isStreaming) {\n        return options.streamConsumer.onError(remapped)\n      }\n\n      isPromiseSettled = true\n      rejectPromise(remapped)\n    }\n\n    var onSettled = function() {\n      sessionInterface.onRequestEnd()\n\n      if (options.signal) {\n        options.signal.removeEventListener('abort', onAbort)\n      }\n    }\n\n    var onError = function(error) {\n      onSettled()\n      rejectOrOnError(error)\n    }\n\n    var onAbort = function() {\n      isCanceled = true\n      onSettled()\n      request.close(http2.constants.NGHTTP2_CANCEL)\n      rejectOrOnError(new errors.AbortError())\n    }\n\n    var onTimeout = function() {\n      isCanceled = true\n      onSettled()\n      request.close(http2.constants.NGHTTP2_CANCEL)\n      rejectOrOnError(new errors.TimeoutError())\n    }\n\n    var onResponse = function(responseHeaders) {\n      var status = responseHeaders[http2.constants.HTTP2_HEADER_STATUS]\n      var isOkStatus = status >= 200 && status < 400\n      var processStream = isOkStatus && isStreaming\n      var responseBody = ''\n\n      var onData = function(chunk) {\n        if (processStream) {\n          return options.streamConsumer.onData(chunk)\n        }\n\n        responseBody += chunk\n      }\n\n      var onEnd = function() {\n        if (!isCanceled) {\n          onSettled()\n        }\n\n        if (!processStream) {\n          return resolve({\n            body: responseBody,\n            headers: responseHeaders,\n            status: status,\n          })\n        }\n\n        // Call .onError with TypeError only if the request hasn't been canceled\n        // and the Client hasn't been closed in order to align on how\n        // FetchAdapter works - it throws the TypeError due to underlying fetch API mechanics.\n        if (!isCanceled && !self._closed) {\n          options.streamConsumer.onError(new TypeError('network error'))\n        }\n      }\n\n      if (processStream) {\n        resolve({\n          // Syntactic stream representation.\n          body: '[stream]',\n          headers: responseHeaders,\n          status: status,\n        })\n      }\n\n      request.on('data', onData).on('end', onEnd)\n    }\n\n    try {\n      var pathname =\n        (options.path[0] === '/' ? options.path : '/' + options.path) +\n        util.querystringify(options.query, '?')\n      var requestHeaders = Object.assign({}, options.headers, {\n        [http2.constants.HTTP2_HEADER_PATH]: pathname,\n        [http2.constants.HTTP2_HEADER_METHOD]: options.method,\n      })\n      var sessionInterface = self._resolveSessionFor(\n        options.origin,\n        isStreaming\n      )\n      var request = sessionInterface.session\n        .request(requestHeaders)\n        .setEncoding('utf8')\n        .on('error', onError)\n        .on('response', onResponse)\n\n      sessionInterface.onRequestStart()\n\n      // Set up timeout only if no signal provided.\n      if (!options.signal && options.timeout) {\n        request.setTimeout(options.timeout, onTimeout)\n      }\n\n      if (options.signal) {\n        options.signal.addEventListener('abort', onAbort)\n      }\n\n      if (options.body != null) {\n        request.write(options.body)\n      }\n\n      request.end()\n    } catch (error) {\n      self._cleanupSessionFor(options.origin, isStreaming)\n      rejectOrOnError(error)\n    }\n  })\n}\n\n/**\n * Moves to the closed state, cleans up ongoing HTTP2 sessions if any.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Whether to force resources clean up.\n * @returns {Promise<void>}\n */\nHttp2Adapter.prototype.close = function(opts) {\n  opts = opts || {}\n\n  this._closed = true\n\n  var noop = function() {}\n\n  return Promise.all(\n    Object.values(this._sessionMap).map(function(sessionInterface) {\n      return sessionInterface.close(opts.force)\n    })\n  ).then(noop)\n}\n\n/**\n * Remaps internal NodeJS error into ClientClosed one.\n *\n * @private\n * @param {Error} error Error object.\n * @returns {Error} Remapped error.\n */\nfunction remapHttp2Error({ error, isClosed }) {\n  var shouldRemap =\n    isClosed &&\n    (error.code === 'ERR_HTTP2_GOAWAY_SESSION' ||\n      error.code === 'ERR_HTTP2_STREAM_CANCEL')\n\n  if (shouldRemap) {\n    return new faunaErrors.ClientClosed(\n      'The request is aborted due to the Client#close call'\n    )\n  }\n\n  return error\n}\n\nmodule.exports = Http2Adapter\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/_http/http2Adapter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/_http/index.js":
/*!*************************************************!*\
  !*** ./node_modules/faunadb/src/_http/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar packageJson = __webpack_require__(/*! ../../package.json */ \"(ssr)/./node_modules/faunadb/package.json\")\nconst { getBrowserOsDetails } = __webpack_require__(/*! ../_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\nvar util = __webpack_require__(/*! ../_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/faunadb/src/_http/errors.js\")\n\n/**\n * The driver's internal HTTP client.\n *\n * @constructor\n * @param {Object} options Same as the {@link Client} options.\n * @private\n */\nfunction HttpClient(options) {\n  var isHttps = options.scheme === 'https'\n\n  // If the port is a falsy value - replace it with default one.\n  if (!options.port) {\n    options.port = isHttps ? 443 : 80\n  }\n\n  // HTTP2 adapter is applicable only if it's NodeJS env and\n  // no fetch API override provided (to preserve backward-compatibility).\n  var useHttp2Adapter = !options.fetch && util.isNodeEnv() && isHttp2Supported()\n\n  this._adapter = useHttp2Adapter\n    ? new (__webpack_require__(/*! ./http2Adapter */ \"(ssr)/./node_modules/faunadb/src/_http/http2Adapter.js\"))({\n        http2SessionIdleTime: options.http2SessionIdleTime,\n      })\n    : new (__webpack_require__(/*! ./fetchAdapter */ \"(ssr)/./node_modules/faunadb/src/_http/fetchAdapter.js\"))({\n        isHttps: isHttps,\n        fetch: options.fetch,\n        keepAlive: options.keepAlive,\n      })\n\n  if (options.endpoint === null) {\n    this._baseUrl = options.scheme + '://' + options.domain + ':' + options.port\n  } else {\n    this._baseUrl = options.endpoint\n  }\n\n  this._secret = options.secret\n  this._headers = Object.assign({}, options.headers, getDefaultHeaders())\n  this._queryTimeout = options.queryTimeout\n  this._lastSeen = null\n  this._timeout = Math.floor(options.timeout * 1000)\n}\n\n/**\n * Returns last seen transaction time.\n *\n * @returns {number} The last seen transaction time.\n */\nHttpClient.prototype.getLastTxnTime = function() {\n  return this._lastSeen\n}\n\n/**\n * Sets the last seen transaction if the given timestamp is greater than then\n * know last seen timestamp.\n *\n * @param {number} time transaction timestamp.\n */\nHttpClient.prototype.syncLastTxnTime = function(time) {\n  if (this._lastSeen == null || this._lastSeen < time) {\n    this._lastSeen = time\n  }\n}\n\n/**\n * Cleans up any held resources.\n *\n * @param {?object} opts Close options.\n * @param {?boolean} opts.force Whether to force resources clean up.\n * @returns {Promise<void>}\n */\nHttpClient.prototype.close = function(opts) {\n  return this._adapter.close(opts)\n}\n\n/**\n * Executes an HTTP request.\n *\n * @param {?object} options Request parameters.\n * @param {?string} options.method Request method.\n * @param {?string} options.path Request path.\n * @param {?string} options.body Request body.\n * @param {?object} options.query Request query.\n * @params {?object} options.streamConsumer Stream consumer, if presented\n * the request will be \"streamed\" into streamConsumer.onData function.\n * @params {function} options.streamConsumer.onData Function called with a chunk of data.\n * @params {function} options.streamConsumer.onError Function called\n * when an error occurred.\n * when the stream is ended.\n * @param {?object} options.signal Abort signal object.\n * @param {?object} options.fetch Fetch API compatible function.\n * @param {?object} options.secret FaunaDB secret.\n * @param {?object} options.queryTimeout FaunaDB query timeout.\n * @param {?string} options.traceparent Unique identifier for the query.\n * @param { {[key: string]: string|number } } options.tags Keyword-value pairs which can be associated with a query.\n * @returns {Promise} The response promise.\n */\nHttpClient.prototype.execute = function(options) {\n  options = options || {}\n\n  var invalidStreamConsumer =\n    options.streamConsumer &&\n    (typeof options.streamConsumer.onData !== 'function' ||\n      typeof options.streamConsumer.onError !== 'function')\n\n  if (invalidStreamConsumer) {\n    return Promise.reject(new TypeError('Invalid \"streamConsumer\" provided'))\n  }\n\n  var secret = options.secret || this._secret\n  var queryTimeout = options.queryTimeout || this._queryTimeout\n  var headers = this._headers\n  // We perform basic validation on the traceparent format and pass along as-is.\n  // In the event the traceparent is invalid, we silently drop it here, generate\n  // a new one server-side, and return it via the traceresponse header.\n  // See https://w3c.github.io/trace-context/#a-traceparent-is-received\n  var traceparent = isValidTraceparentHeader(options.traceparent)\n    ? options.traceparent\n    : null\n\n  headers['Authorization'] = secret && secretHeader(secret)\n  headers['X-Last-Seen-Txn'] = this._lastSeen\n  headers['X-Query-Timeout'] = queryTimeout\n  headers['traceparent'] = traceparent\n  headers['x-fauna-tags'] = parseTags(options.tags)\n\n  return this._adapter.execute({\n    origin: this._baseUrl,\n    path: options.path || '/',\n    query: options.query,\n    method: options.method || 'GET',\n    headers: util.removeNullAndUndefinedValues(headers),\n    body: options.body,\n    signal: options.signal,\n    timeout: this._timeout,\n    streamConsumer: options.streamConsumer,\n  })\n}\n\nfunction isValidTraceparentHeader(traceparentHeader) {\n  // Shamelessly copied from shorturl.at/osvwz\n  return /^[\\da-f]{2}-[\\da-f]{32}-[\\da-f]{16}-[\\da-f]{2}$/.test(\n    traceparentHeader\n  )\n}\n\nfunction parseTags(tags) {\n  if (tags === undefined || tags == null || tags == '') return null\n  validateTags(tags)\n  return Object.entries(tags)\n    .map(e => e.join('='))\n    .join(',')\n}\n\nfunction validateTags(tags) {\n  if (typeof tags != 'object') {\n    throw new Error('Tags must be provided as an object!')\n  }\n}\n\nfunction secretHeader(secret) {\n  return 'Bearer ' + secret\n}\n\n/** @ignore */\nfunction getDefaultHeaders() {\n  var driverEnv = {\n    driver: ['javascript', packageJson.version].join('-'),\n  }\n\n  var isServiceWorker\n\n  try {\n    isServiceWorker = global instanceof ServiceWorkerGlobalScope\n  } catch (error) {\n    isServiceWorker = false\n  }\n\n  try {\n    if (util.isNodeEnv()) {\n      driverEnv.runtime = ['nodejs', process.version].join('-')\n      driverEnv.env = util.getNodeRuntimeEnv()\n      var os = __webpack_require__(/*! os */ \"os\")\n      driverEnv.os = [os.platform(), os.release()].join('-')\n    } else if (isServiceWorker) {\n      driverEnv.runtime = 'Service Worker'\n    } else {\n      driverEnv.runtime = util.getBrowserDetails()\n      driverEnv.env = 'browser'\n      driverEnv.os = getBrowserOsDetails()\n    }\n  } catch (_) {}\n\n  var headers = {\n    'X-FaunaDB-API-Version': packageJson.apiVersion,\n  }\n\n  // TODO: api cors must be enabled to accept header X-Driver-Env\n  if (util.isNodeEnv()) {\n    headers['X-Driver-Env'] = Object.keys(driverEnv)\n      .map(key => [key, driverEnv[key].toLowerCase()].join('='))\n      .join('; ')\n  }\n  return headers\n}\n\nfunction isHttp2Supported() {\n  try {\n    __webpack_require__(/*! http2 */ \"http2\")\n\n    return true\n  } catch (_) {\n    return false\n  }\n}\n\nmodule.exports = {\n  HttpClient: HttpClient,\n  TimeoutError: errors.TimeoutError,\n  AbortError: errors.AbortError,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/_http/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/_json.js":
/*!*******************************************!*\
  !*** ./node_modules/faunadb/src/_json.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar values = __webpack_require__(/*! ./values */ \"(ssr)/./node_modules/faunadb/src/values.js\")\n\nfunction toJSON(object, pretty) {\n  pretty = typeof pretty !== 'undefined' ? pretty : false\n\n  if (pretty) {\n    return JSON.stringify(object, null, '  ')\n  } else {\n    return JSON.stringify(object)\n  }\n}\n\nfunction parseJSON(json) {\n  return JSON.parse(json, json_parse)\n}\n\n/*\n * Parses a line-separated JSON stream. For backwards compatibility with\n * concatenated JSON objects, it attempts to parse the received content as a\n * JSON object. Failures should occur when partial or multiple line-separated\n * JSON objects are received. Upon a parsing failure, attempt paring the\n * received content as line-separated JSON objects.\n *\n * See https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON\n * See https://en.wikipedia.org/wiki/JSON_streaming#Concatenated_JSON\n *\n * @private\n */\nfunction parseJSONStreaming(content) {\n  var values = []\n\n  try {\n    values.push(parseJSON(content))\n    content = '' // whole content parsed\n  } catch (err) {\n    while (true) {\n      var pos = content.indexOf('\\n') + 1 // include \\n\n      if (pos <= 0) {\n        break\n      }\n      var slice = content.slice(0, pos).trim()\n      if (slice.length > 0) {\n        // discards empty slices due to leading \\n\n        values.push(parseJSON(slice))\n      }\n      content = content.slice(pos)\n    }\n  }\n\n  return {\n    values: values,\n    buffer: content,\n  }\n}\n\nfunction json_parse(_, val) {\n  if (typeof val !== 'object' || val === null) {\n    return val\n  } else if ('@ref' in val) {\n    var ref = val['@ref']\n\n    if (!('collection' in ref) && !('database' in ref)) {\n      return values.Native.fromName(ref['id'])\n    }\n\n    var col = json_parse('collection', ref['collection'])\n    var db = json_parse('database', ref['database'])\n\n    return new values.Ref(ref['id'], col, db)\n  } else if ('@obj' in val) {\n    return val['@obj']\n  } else if ('@set' in val) {\n    return new values.SetRef(val['@set'])\n  } else if ('@ts' in val) {\n    return new values.FaunaTime(val['@ts'])\n  } else if ('@date' in val) {\n    return new values.FaunaDate(val['@date'])\n  } else if ('@bytes' in val) {\n    return new values.Bytes(val['@bytes'])\n  } else if ('@query' in val) {\n    return new values.Query(val['@query'])\n  } else {\n    return val\n  }\n}\n\nmodule.exports = {\n  toJSON: toJSON,\n  parseJSON: parseJSON,\n  parseJSONStreaming: parseJSONStreaming,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmF1bmFkYi9zcmMvX2pzb24uanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosYUFBYSxtQkFBTyxDQUFDLDREQUFVOztBQUUvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29rYm9va3Nob3BuZy8uL25vZGVfbW9kdWxlcy9mYXVuYWRiL3NyYy9fanNvbi5qcz9mOGJkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgdmFsdWVzID0gcmVxdWlyZSgnLi92YWx1ZXMnKVxuXG5mdW5jdGlvbiB0b0pTT04ob2JqZWN0LCBwcmV0dHkpIHtcbiAgcHJldHR5ID0gdHlwZW9mIHByZXR0eSAhPT0gJ3VuZGVmaW5lZCcgPyBwcmV0dHkgOiBmYWxzZVxuXG4gIGlmIChwcmV0dHkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqZWN0LCBudWxsLCAnICAnKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmplY3QpXG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VKU09OKGpzb24pIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoanNvbiwganNvbl9wYXJzZSlcbn1cblxuLypcbiAqIFBhcnNlcyBhIGxpbmUtc2VwYXJhdGVkIEpTT04gc3RyZWFtLiBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aFxuICogY29uY2F0ZW5hdGVkIEpTT04gb2JqZWN0cywgaXQgYXR0ZW1wdHMgdG8gcGFyc2UgdGhlIHJlY2VpdmVkIGNvbnRlbnQgYXMgYVxuICogSlNPTiBvYmplY3QuIEZhaWx1cmVzIHNob3VsZCBvY2N1ciB3aGVuIHBhcnRpYWwgb3IgbXVsdGlwbGUgbGluZS1zZXBhcmF0ZWRcbiAqIEpTT04gb2JqZWN0cyBhcmUgcmVjZWl2ZWQuIFVwb24gYSBwYXJzaW5nIGZhaWx1cmUsIGF0dGVtcHQgcGFyaW5nIHRoZVxuICogcmVjZWl2ZWQgY29udGVudCBhcyBsaW5lLXNlcGFyYXRlZCBKU09OIG9iamVjdHMuXG4gKlxuICogU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0pTT05fc3RyZWFtaW5nI0xpbmUtZGVsaW1pdGVkX0pTT05cbiAqIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OX3N0cmVhbWluZyNDb25jYXRlbmF0ZWRfSlNPTlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlSlNPTlN0cmVhbWluZyhjb250ZW50KSB7XG4gIHZhciB2YWx1ZXMgPSBbXVxuXG4gIHRyeSB7XG4gICAgdmFsdWVzLnB1c2gocGFyc2VKU09OKGNvbnRlbnQpKVxuICAgIGNvbnRlbnQgPSAnJyAvLyB3aG9sZSBjb250ZW50IHBhcnNlZFxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgdmFyIHBvcyA9IGNvbnRlbnQuaW5kZXhPZignXFxuJykgKyAxIC8vIGluY2x1ZGUgXFxuXG4gICAgICBpZiAocG9zIDw9IDApIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHZhciBzbGljZSA9IGNvbnRlbnQuc2xpY2UoMCwgcG9zKS50cmltKClcbiAgICAgIGlmIChzbGljZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGRpc2NhcmRzIGVtcHR5IHNsaWNlcyBkdWUgdG8gbGVhZGluZyBcXG5cbiAgICAgICAgdmFsdWVzLnB1c2gocGFyc2VKU09OKHNsaWNlKSlcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKHBvcylcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZhbHVlczogdmFsdWVzLFxuICAgIGJ1ZmZlcjogY29udGVudCxcbiAgfVxufVxuXG5mdW5jdGlvbiBqc29uX3BhcnNlKF8sIHZhbCkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ29iamVjdCcgfHwgdmFsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbFxuICB9IGVsc2UgaWYgKCdAcmVmJyBpbiB2YWwpIHtcbiAgICB2YXIgcmVmID0gdmFsWydAcmVmJ11cblxuICAgIGlmICghKCdjb2xsZWN0aW9uJyBpbiByZWYpICYmICEoJ2RhdGFiYXNlJyBpbiByZWYpKSB7XG4gICAgICByZXR1cm4gdmFsdWVzLk5hdGl2ZS5mcm9tTmFtZShyZWZbJ2lkJ10pXG4gICAgfVxuXG4gICAgdmFyIGNvbCA9IGpzb25fcGFyc2UoJ2NvbGxlY3Rpb24nLCByZWZbJ2NvbGxlY3Rpb24nXSlcbiAgICB2YXIgZGIgPSBqc29uX3BhcnNlKCdkYXRhYmFzZScsIHJlZlsnZGF0YWJhc2UnXSlcblxuICAgIHJldHVybiBuZXcgdmFsdWVzLlJlZihyZWZbJ2lkJ10sIGNvbCwgZGIpXG4gIH0gZWxzZSBpZiAoJ0BvYmonIGluIHZhbCkge1xuICAgIHJldHVybiB2YWxbJ0BvYmonXVxuICB9IGVsc2UgaWYgKCdAc2V0JyBpbiB2YWwpIHtcbiAgICByZXR1cm4gbmV3IHZhbHVlcy5TZXRSZWYodmFsWydAc2V0J10pXG4gIH0gZWxzZSBpZiAoJ0B0cycgaW4gdmFsKSB7XG4gICAgcmV0dXJuIG5ldyB2YWx1ZXMuRmF1bmFUaW1lKHZhbFsnQHRzJ10pXG4gIH0gZWxzZSBpZiAoJ0BkYXRlJyBpbiB2YWwpIHtcbiAgICByZXR1cm4gbmV3IHZhbHVlcy5GYXVuYURhdGUodmFsWydAZGF0ZSddKVxuICB9IGVsc2UgaWYgKCdAYnl0ZXMnIGluIHZhbCkge1xuICAgIHJldHVybiBuZXcgdmFsdWVzLkJ5dGVzKHZhbFsnQGJ5dGVzJ10pXG4gIH0gZWxzZSBpZiAoJ0BxdWVyeScgaW4gdmFsKSB7XG4gICAgcmV0dXJuIG5ldyB2YWx1ZXMuUXVlcnkodmFsWydAcXVlcnknXSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRvSlNPTjogdG9KU09OLFxuICBwYXJzZUpTT046IHBhcnNlSlNPTixcbiAgcGFyc2VKU09OU3RyZWFtaW5nOiBwYXJzZUpTT05TdHJlYW1pbmcsXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/_json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/_util.js":
/*!*******************************************!*\
  !*** ./node_modules/faunadb/src/_util.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar packageJson = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/faunadb/package.json\")\nvar chalk = __webpack_require__(/*! chalk */ \"(ssr)/./node_modules/chalk/source/index.js\")\nvar boxen = __webpack_require__(/*! boxen */ \"(ssr)/./node_modules/boxen/index.js\")\n\nvar crossGlobal =\n  typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof global !== 'undefined'\n    ? global\n    : self\n\n/**\n * Inherit the prototype methods from one constructor into another.\n * Source: https://github.com/kaelzhang/node-util-inherits\n * @param {function} ctor Constructor function which needs to inherit the prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n * @private\n */\nfunction inherits(ctor, superCtor) {\n  if (ctor === undefined || ctor === null) {\n    throw new TypeError(\n      'The constructor to \"inherits\" must not be null or undefined'\n    )\n  }\n\n  if (superCtor === undefined || superCtor === null) {\n    throw new TypeError(\n      'The super constructor to \"inherits\" must not be null or undefined'\n    )\n  }\n\n  if (superCtor.prototype === undefined) {\n    throw new TypeError(\n      'The super constructor to \"inherits\" must have a prototype'\n    )\n  }\n\n  ctor.super_ = superCtor\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true,\n    },\n  })\n}\n\n/**\n * Determines if the current environment is a NodeJS environment.\n * @private\n */\nfunction isNodeEnv() {\n  return (\n    typeof window === 'undefined' &&\n    typeof process !== 'undefined' &&\n    process.versions != null &&\n    process.versions.node != null\n  )\n}\n\n/**\n * Resolves environment variable if available.\n *\n * @param {string} envKey A name of env variable.\n * @return {void|string} Returns requested env variable or void.\n * @private\n */\nfunction getEnvVariable(envKey) {\n  var areEnvVarsAvailable = !!(\n    typeof process !== 'undefined' &&\n    process &&\n    process.env\n  )\n\n  if (areEnvVarsAvailable && process.env[envKey] != null) {\n    return process.env[envKey]\n  }\n}\n\n/**\n * JavaScript Client Detection\n * @private\n */\nfunction getBrowserDetails() {\n  var browser = navigator.appName\n  var browserVersion = '' + parseFloat(navigator.appVersion)\n  var nameOffset, verOffset, ix\n\n  // Opera\n  if ((verOffset = navigator.userAgent.indexOf('Opera')) != -1) {\n    browser = 'Opera'\n    browserVersion = navigator.userAgent.substring(verOffset + 6)\n    if ((verOffset = navigator.userAgent.indexOf('Version')) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8)\n    }\n  }\n  // MSIE\n  else if ((verOffset = navigator.userAgent.indexOf('MSIE')) != -1) {\n    browser = 'Microsoft Internet Explorer'\n    browserVersion = navigator.userAgent.substring(verOffset + 5)\n  }\n\n  //IE 11 no longer identifies itself as MS IE, so trap it\n  //http://stackoverflow.com/questions/17907445/how-to-detect-ie11\n  else if (\n    browser == 'Netscape' &&\n    navigator.userAgent.indexOf('Trident/') != -1\n  ) {\n    browser = 'Microsoft Internet Explorer'\n    browserVersion = navigator.userAgent.substring(verOffset + 5)\n    if ((verOffset = navigator.userAgent.indexOf('rv:')) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 3)\n    }\n  }\n\n  // Chrome\n  else if ((verOffset = navigator.userAgent.indexOf('Chrome')) != -1) {\n    browser = 'Chrome'\n    browserVersion = navigator.userAgent.substring(verOffset + 7)\n  }\n  // Safari\n  else if ((verOffset = navigator.userAgent.indexOf('Safari')) != -1) {\n    browser = 'Safari'\n    browserVersion = navigator.userAgent.substring(verOffset + 7)\n    if ((verOffset = navigator.userAgent.indexOf('Version')) != -1) {\n      browserVersion = navigator.userAgent.substring(verOffset + 8)\n    }\n\n    // Chrome on iPad identifies itself as Safari. Actual results do not match what Google claims\n    //  at: https://developers.google.com/chrome/mobile/docs/user-agent?hl=ja\n    //  No mention of chrome in the user agent string. However it does mention CriOS, which presumably\n    //  can be keyed on to detect it.\n    if (navigator.userAgent.indexOf('CriOS') != -1) {\n      //Chrome on iPad spoofing Safari...correct it.\n      browser = 'Chrome'\n      //Don't believe there is a way to grab the accurate version number, so leaving that for now.\n    }\n  }\n  // Firefox\n  else if ((verOffset = navigator.userAgent.indexOf('Firefox')) != -1) {\n    browser = 'Firefox'\n    browserVersion = navigator.userAgent.substring(verOffset + 8)\n  }\n  // Other browsers\n  else if (\n    (nameOffset = navigator.userAgent.lastIndexOf(' ') + 1) <\n    (verOffset = navigator.userAgent.lastIndexOf('/'))\n  ) {\n    browser = navigator.userAgent.substring(nameOffset, verOffset)\n    browserVersion = navigator.userAgent.substring(verOffset + 1)\n    if (browser.toLowerCase() == browser.toUpperCase()) {\n      browser = navigator.appName\n    }\n  }\n  // trim the browser version string\n  if ((ix = browserVersion.indexOf(';')) != -1)\n    browserVersion = browserVersion.substring(0, ix)\n  if ((ix = browserVersion.indexOf(' ')) != -1)\n    browserVersion = browserVersion.substring(0, ix)\n  if ((ix = browserVersion.indexOf(')')) != -1)\n    browserVersion = browserVersion.substring(0, ix)\n\n  return [browser, browserVersion].join('-')\n}\n\nfunction getBrowserOsDetails() {\n  var os = 'unknown'\n  var clientStrings = [\n    { s: 'Windows 10', r: /(Windows 10.0|Windows NT 10.0)/ },\n    { s: 'Windows 8.1', r: /(Windows 8.1|Windows NT 6.3)/ },\n    { s: 'Windows 8', r: /(Windows 8|Windows NT 6.2)/ },\n    { s: 'Windows 7', r: /(Windows 7|Windows NT 6.1)/ },\n    { s: 'Windows Vista', r: /Windows NT 6.0/ },\n    { s: 'Windows Server 2003', r: /Windows NT 5.2/ },\n    { s: 'Windows XP', r: /(Windows NT 5.1|Windows XP)/ },\n    { s: 'Windows 2000', r: /(Windows NT 5.0|Windows 2000)/ },\n    { s: 'Windows ME', r: /(Win 9x 4.90|Windows ME)/ },\n    { s: 'Windows 98', r: /(Windows 98|Win98)/ },\n    { s: 'Windows 95', r: /(Windows 95|Win95|Windows_95)/ },\n    { s: 'Windows NT 4.0', r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/ },\n    { s: 'Windows CE', r: /Windows CE/ },\n    { s: 'Windows 3.11', r: /Win16/ },\n    { s: 'Android', r: /Android/ },\n    { s: 'Open BSD', r: /OpenBSD/ },\n    { s: 'Sun OS', r: /SunOS/ },\n    { s: 'Chrome OS', r: /CrOS/ },\n    { s: 'Linux', r: /(Linux|X11(?!.*CrOS))/ },\n    { s: 'iOS', r: /(iPhone|iPad|iPod)/ },\n    { s: 'Mac OS X', r: /Mac OS X/ },\n    { s: 'Mac OS', r: /(Mac OS|MacPPC|MacIntel|Mac_PowerPC|Macintosh)/ },\n    { s: 'QNX', r: /QNX/ },\n    { s: 'UNIX', r: /UNIX/ },\n    { s: 'BeOS', r: /BeOS/ },\n    { s: 'OS/2', r: /OS\\/2/ },\n    {\n      s: 'Search Bot',\n      r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/,\n    },\n  ]\n  for (var id in clientStrings) {\n    var cs = clientStrings[id]\n    if (cs.r.test(navigator.userAgent)) {\n      os = cs.s\n      break\n    }\n  }\n\n  var osVersion = 'unknown'\n\n  if (/Windows/.test(os)) {\n    osVersion = /Windows (.*)/.exec(os)[1]\n    os = 'Windows'\n  }\n\n  switch (os) {\n    case 'Mac OS':\n    case 'Mac OS X':\n    case 'Android':\n      osVersion = /(?:Android|Mac OS|Mac OS X|MacPPC|MacIntel|Mac_PowerPC|Macintosh) ([\\.\\_\\d]+)/.exec(\n        navigator.userAgent\n      )[1]\n      break\n\n    case 'iOS':\n      osVersion = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(navigator.appVersion)\n      osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0)\n      break\n  }\n  return [os, osVersion].join('-')\n}\n\n/**\n * For checking process.env always use `hasOwnProperty`\n * Some providers could throw an error when trying to access env variables that does not exists\n * @private */\nfunction getNodeRuntimeEnv() {\n  var runtimeEnvs = [\n    {\n      name: 'Netlify',\n      check: function() {\n        return process.env.hasOwnProperty('NETLIFY_IMAGES_CDN_DOMAIN')\n      },\n    },\n    {\n      name: 'Vercel',\n      check: function() {\n        return process.env.hasOwnProperty('VERCEL')\n      },\n    },\n    {\n      name: 'Heroku',\n      check: function() {\n        return (\n          process.env.hasOwnProperty('PATH') &&\n          process.env.PATH.indexOf('.heroku') !== -1\n        )\n      },\n    },\n    {\n      name: 'AWS Lambda',\n      check: function() {\n        return process.env.hasOwnProperty('AWS_LAMBDA_FUNCTION_VERSION')\n      },\n    },\n    {\n      name: 'GCP Cloud Functions',\n      check: function() {\n        return (\n          process.env.hasOwnProperty('_') &&\n          process.env._.indexOf('google') !== -1\n        )\n      },\n    },\n    {\n      name: 'GCP Compute Instances',\n      check: function() {\n        return process.env.hasOwnProperty('GOOGLE_CLOUD_PROJECT')\n      },\n    },\n    {\n      name: 'Azure Cloud Functions',\n      check: function() {\n        return process.env.hasOwnProperty(\n          'WEBSITE_FUNCTIONS_AZUREMONITOR_CATEGORIES'\n        )\n      },\n    },\n    {\n      name: 'Azure Compute',\n      check: function() {\n        return (\n          process.env.hasOwnProperty('ORYX_ENV_TYPE') &&\n          process.env.hasOwnProperty('WEBSITE_INSTANCE_ID') &&\n          process.env.ORYX_ENV_TYPE === 'AppService'\n        )\n      },\n    },\n    {\n      name: 'Mongo Stitch',\n      check: function() {\n        return typeof crossGlobal.StitchError === 'function'\n      },\n    },\n    {\n      name: 'Render',\n      check: function() {\n        return process.env.hasOwnProperty('RENDER_SERVICE_ID')\n      },\n    },\n    {\n      name: 'Begin',\n      check: function() {\n        return process.env.hasOwnProperty('BEGIN_DATA_SCOPE_ID')\n      },\n    },\n  ]\n  var detectedEnv = runtimeEnvs.find(env => env.check())\n\n  return detectedEnv ? detectedEnv.name : 'unknown'\n}\n\n/**\n * If defined, returns the given value. Otherwise, returns the default value.\n * @param {any} obj The given value.\n * @param {any} def The default value.\n * @private\n */\nfunction defaults(obj, def) {\n  if (obj === undefined) {\n    return def\n  } else {\n    return obj\n  }\n}\n\n/**\n * Used for functions that take an options objects.\n * Fills in defaults for options not provided.\n * Throws errors for provided options that aren't recognized.\n * A default value of `undefined` is used to indicate that the option must be provided.\n * @private\n */\nfunction applyDefaults(provided, defaults) {\n  var out = {}\n\n  for (var providedKey in provided) {\n    if (!(providedKey in defaults)) {\n      throw new Error('No such option ' + providedKey)\n    }\n    out[providedKey] = provided[providedKey]\n  }\n\n  for (var defaultsKey in defaults) {\n    if (!(defaultsKey in out)) {\n      out[defaultsKey] = defaults[defaultsKey]\n    }\n  }\n\n  return out\n}\n\n/**\n * Returns a new object without any keys where the value would be null or undefined.\n * @private\n * */\nfunction removeNullAndUndefinedValues(object) {\n  var res = {}\n  for (var key in object) {\n    var val = object[key]\n    if (val !== null && val !== undefined) {\n      res[key] = val\n    }\n  }\n  return res\n}\n\n/**\n * Returns a new object without any keys where the value would be undefined.\n * @private\n * */\nfunction removeUndefinedValues(object) {\n  var res = {}\n  for (var key in object) {\n    var val = object[key]\n    if (val !== undefined) {\n      res[key] = val\n    }\n  }\n  return res\n}\n\n/**\n * Returns a boolean stating if the given object has a given property\n * @private\n * */\nfunction checkInstanceHasProperty(obj, prop) {\n  return typeof obj === 'object' && obj !== null && Boolean(obj[prop])\n}\n\nfunction formatUrl(base, path, query) {\n  query = typeof query === 'object' ? querystringify(query) : query\n  return [\n    base,\n    path ? (path.charAt(0) === '/' ? '' : '/' + path) : '',\n    query ? (query.charAt(0) === '?' ? '' : '?' + query) : '',\n  ].join('')\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || ''\n\n  var pairs = [],\n    value,\n    key\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?'\n\n  for (key in obj) {\n    if (checkInstanceHasProperty(obj, key)) {\n      value = obj[key]\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undefined || isNaN(value))) {\n        value = ''\n      }\n\n      key = encode(key)\n      value = encode(value)\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue\n      pairs.push(key + '=' + value)\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : ''\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input)\n  } catch (e) {\n    return null\n  }\n}\n\n/**\n * Merge two objects into one\n * @param obj1\n * @param obj2\n * @returns obj3 a new object based on obj1 and obj2\n */\nfunction mergeObjects(obj1, obj2) {\n  var obj3 = {}\n  for (var attrname in obj1) {\n    obj3[attrname] = obj1[attrname]\n  }\n  for (var attrname in obj2) {\n    obj3[attrname] = obj2[attrname]\n  }\n  return obj3\n}\n\n/**\n * Resolves which Fetch API compatible function to use. If an override is\n * provided, returns the override. If no override and the global (window) has\n * \"fetch\" property, return the native fetch. Otherwise returns the cross-fetch polyfill.\n *\n * @param {?function} fetchOverride An Fetch API compatible function to use.\n * @returns {function} A Fetch API compatible function.\n * @private\n */\nfunction resolveFetch(fetchOverride) {\n  if (typeof fetchOverride === 'function') {\n    return fetchOverride\n  }\n\n  if (typeof crossGlobal.fetch === 'function') {\n    // NB. Rebinding to global is needed for Safari\n    return crossGlobal.fetch.bind(crossGlobal)\n  }\n\n  return __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\")\n}\n\nmodule.exports = {\n  crossGlobal: crossGlobal,\n  mergeObjects: mergeObjects,\n  formatUrl: formatUrl,\n  querystringify: querystringify,\n  inherits: inherits,\n  isNodeEnv: isNodeEnv,\n  getEnvVariable: getEnvVariable,\n  defaults: defaults,\n  applyDefaults: applyDefaults,\n  removeNullAndUndefinedValues: removeNullAndUndefinedValues,\n  removeUndefinedValues: removeUndefinedValues,\n  checkInstanceHasProperty: checkInstanceHasProperty,\n  getBrowserDetails: getBrowserDetails,\n  getBrowserOsDetails: getBrowserOsDetails,\n  getNodeRuntimeEnv: getNodeRuntimeEnv,\n  resolveFetch: resolveFetch,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmF1bmFkYi9zcmMvX3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosa0JBQWtCLG1CQUFPLENBQUMsa0VBQWlCO0FBQzNDLFlBQVksbUJBQU8sQ0FBQyx5REFBTztBQUMzQixZQUFZLG1CQUFPLENBQUMsa0RBQU87O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHNEQUFzRDtBQUM1RCxNQUFNLHFEQUFxRDtBQUMzRCxNQUFNLGlEQUFpRDtBQUN2RCxNQUFNLGlEQUFpRDtBQUN2RCxNQUFNLHlDQUF5QztBQUMvQyxNQUFNLCtDQUErQztBQUNyRCxNQUFNLG1EQUFtRDtBQUN6RCxNQUFNLHVEQUF1RDtBQUM3RCxNQUFNLGdEQUFnRDtBQUN0RCxNQUFNLDBDQUEwQztBQUNoRCxNQUFNLHFEQUFxRDtBQUMzRCxNQUFNLHNFQUFzRTtBQUM1RSxNQUFNLGtDQUFrQztBQUN4QyxNQUFNLCtCQUErQjtBQUNyQyxNQUFNLDRCQUE0QjtBQUNsQyxNQUFNLDZCQUE2QjtBQUNuQyxNQUFNLHlCQUF5QjtBQUMvQixNQUFNLDJCQUEyQjtBQUNqQyxNQUFNLHdDQUF3QztBQUM5QyxNQUFNLG1DQUFtQztBQUN6QyxNQUFNLDhCQUE4QjtBQUNwQyxNQUFNLGtFQUFrRTtBQUN4RSxNQUFNLG9CQUFvQjtBQUMxQixNQUFNLHNCQUFzQjtBQUM1QixNQUFNLHNCQUFzQjtBQUM1QixNQUFNLHVCQUF1QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsYUFBYTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxtQkFBTyxDQUFDLDJFQUFhO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL29rYm9va3Nob3BuZy8uL25vZGVfbW9kdWxlcy9mYXVuYWRiL3NyYy9fdXRpbC5qcz8zMjM3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgcGFja2FnZUpzb24gPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKVxudmFyIGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxudmFyIGJveGVuID0gcmVxdWlyZSgnYm94ZW4nKVxuXG52YXIgY3Jvc3NHbG9iYWwgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFRoaXNcbiAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxcbiAgICA6IHNlbGZcblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKiBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYWVsemhhbmcvbm9kZS11dGlsLWluaGVyaXRzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gIGlmIChjdG9yID09PSB1bmRlZmluZWQgfHwgY3RvciA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGNvbnN0cnVjdG9yIHRvIFwiaW5oZXJpdHNcIiBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZCdcbiAgICApXG4gIH1cblxuICBpZiAoc3VwZXJDdG9yID09PSB1bmRlZmluZWQgfHwgc3VwZXJDdG9yID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgc3VwZXIgY29uc3RydWN0b3IgdG8gXCJpbmhlcml0c1wiIG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJ1xuICAgIClcbiAgfVxuXG4gIGlmIChzdXBlckN0b3IucHJvdG90eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBzdXBlciBjb25zdHJ1Y3RvciB0byBcImluaGVyaXRzXCIgbXVzdCBoYXZlIGEgcHJvdG90eXBlJ1xuICAgIClcbiAgfVxuXG4gIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9LFxuICB9KVxufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgaXMgYSBOb2RlSlMgZW52aXJvbm1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBpc05vZGVFbnYoKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zICE9IG51bGwgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT0gbnVsbFxuICApXG59XG5cbi8qKlxuICogUmVzb2x2ZXMgZW52aXJvbm1lbnQgdmFyaWFibGUgaWYgYXZhaWxhYmxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbnZLZXkgQSBuYW1lIG9mIGVudiB2YXJpYWJsZS5cbiAqIEByZXR1cm4ge3ZvaWR8c3RyaW5nfSBSZXR1cm5zIHJlcXVlc3RlZCBlbnYgdmFyaWFibGUgb3Igdm9pZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldEVudlZhcmlhYmxlKGVudktleSkge1xuICB2YXIgYXJlRW52VmFyc0F2YWlsYWJsZSA9ICEhKFxuICAgIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHByb2Nlc3MgJiZcbiAgICBwcm9jZXNzLmVudlxuICApXG5cbiAgaWYgKGFyZUVudlZhcnNBdmFpbGFibGUgJiYgcHJvY2Vzcy5lbnZbZW52S2V5XSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52W2VudktleV1cbiAgfVxufVxuXG4vKipcbiAqIEphdmFTY3JpcHQgQ2xpZW50IERldGVjdGlvblxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0QnJvd3NlckRldGFpbHMoKSB7XG4gIHZhciBicm93c2VyID0gbmF2aWdhdG9yLmFwcE5hbWVcbiAgdmFyIGJyb3dzZXJWZXJzaW9uID0gJycgKyBwYXJzZUZsb2F0KG5hdmlnYXRvci5hcHBWZXJzaW9uKVxuICB2YXIgbmFtZU9mZnNldCwgdmVyT2Zmc2V0LCBpeFxuXG4gIC8vIE9wZXJhXG4gIGlmICgodmVyT2Zmc2V0ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdPcGVyYScpKSAhPSAtMSkge1xuICAgIGJyb3dzZXIgPSAnT3BlcmEnXG4gICAgYnJvd3NlclZlcnNpb24gPSBuYXZpZ2F0b3IudXNlckFnZW50LnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA2KVxuICAgIGlmICgodmVyT2Zmc2V0ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdWZXJzaW9uJykpICE9IC0xKSB7XG4gICAgICBicm93c2VyVmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQuc3Vic3RyaW5nKHZlck9mZnNldCArIDgpXG4gICAgfVxuICB9XG4gIC8vIE1TSUVcbiAgZWxzZSBpZiAoKHZlck9mZnNldCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRScpKSAhPSAtMSkge1xuICAgIGJyb3dzZXIgPSAnTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyJ1xuICAgIGJyb3dzZXJWZXJzaW9uID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgNSlcbiAgfVxuXG4gIC8vSUUgMTEgbm8gbG9uZ2VyIGlkZW50aWZpZXMgaXRzZWxmIGFzIE1TIElFLCBzbyB0cmFwIGl0XG4gIC8vaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNzkwNzQ0NS9ob3ctdG8tZGV0ZWN0LWllMTFcbiAgZWxzZSBpZiAoXG4gICAgYnJvd3NlciA9PSAnTmV0c2NhcGUnICYmXG4gICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50LycpICE9IC0xXG4gICkge1xuICAgIGJyb3dzZXIgPSAnTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyJ1xuICAgIGJyb3dzZXJWZXJzaW9uID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgNSlcbiAgICBpZiAoKHZlck9mZnNldCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigncnY6JykpICE9IC0xKSB7XG4gICAgICBicm93c2VyVmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQuc3Vic3RyaW5nKHZlck9mZnNldCArIDMpXG4gICAgfVxuICB9XG5cbiAgLy8gQ2hyb21lXG4gIGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpKSAhPSAtMSkge1xuICAgIGJyb3dzZXIgPSAnQ2hyb21lJ1xuICAgIGJyb3dzZXJWZXJzaW9uID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgNylcbiAgfVxuICAvLyBTYWZhcmlcbiAgZWxzZSBpZiAoKHZlck9mZnNldCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignU2FmYXJpJykpICE9IC0xKSB7XG4gICAgYnJvd3NlciA9ICdTYWZhcmknXG4gICAgYnJvd3NlclZlcnNpb24gPSBuYXZpZ2F0b3IudXNlckFnZW50LnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA3KVxuICAgIGlmICgodmVyT2Zmc2V0ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdWZXJzaW9uJykpICE9IC0xKSB7XG4gICAgICBicm93c2VyVmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQuc3Vic3RyaW5nKHZlck9mZnNldCArIDgpXG4gICAgfVxuXG4gICAgLy8gQ2hyb21lIG9uIGlQYWQgaWRlbnRpZmllcyBpdHNlbGYgYXMgU2FmYXJpLiBBY3R1YWwgcmVzdWx0cyBkbyBub3QgbWF0Y2ggd2hhdCBHb29nbGUgY2xhaW1zXG4gICAgLy8gIGF0OiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9jaHJvbWUvbW9iaWxlL2RvY3MvdXNlci1hZ2VudD9obD1qYVxuICAgIC8vICBObyBtZW50aW9uIG9mIGNocm9tZSBpbiB0aGUgdXNlciBhZ2VudCBzdHJpbmcuIEhvd2V2ZXIgaXQgZG9lcyBtZW50aW9uIENyaU9TLCB3aGljaCBwcmVzdW1hYmx5XG4gICAgLy8gIGNhbiBiZSBrZXllZCBvbiB0byBkZXRlY3QgaXQuXG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSAhPSAtMSkge1xuICAgICAgLy9DaHJvbWUgb24gaVBhZCBzcG9vZmluZyBTYWZhcmkuLi5jb3JyZWN0IGl0LlxuICAgICAgYnJvd3NlciA9ICdDaHJvbWUnXG4gICAgICAvL0Rvbid0IGJlbGlldmUgdGhlcmUgaXMgYSB3YXkgdG8gZ3JhYiB0aGUgYWNjdXJhdGUgdmVyc2lvbiBudW1iZXIsIHNvIGxlYXZpbmcgdGhhdCBmb3Igbm93LlxuICAgIH1cbiAgfVxuICAvLyBGaXJlZm94XG4gIGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSkgIT0gLTEpIHtcbiAgICBicm93c2VyID0gJ0ZpcmVmb3gnXG4gICAgYnJvd3NlclZlcnNpb24gPSBuYXZpZ2F0b3IudXNlckFnZW50LnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA4KVxuICB9XG4gIC8vIE90aGVyIGJyb3dzZXJzXG4gIGVsc2UgaWYgKFxuICAgIChuYW1lT2Zmc2V0ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5sYXN0SW5kZXhPZignICcpICsgMSkgPFxuICAgICh2ZXJPZmZzZXQgPSBuYXZpZ2F0b3IudXNlckFnZW50Lmxhc3RJbmRleE9mKCcvJykpXG4gICkge1xuICAgIGJyb3dzZXIgPSBuYXZpZ2F0b3IudXNlckFnZW50LnN1YnN0cmluZyhuYW1lT2Zmc2V0LCB2ZXJPZmZzZXQpXG4gICAgYnJvd3NlclZlcnNpb24gPSBuYXZpZ2F0b3IudXNlckFnZW50LnN1YnN0cmluZyh2ZXJPZmZzZXQgKyAxKVxuICAgIGlmIChicm93c2VyLnRvTG93ZXJDYXNlKCkgPT0gYnJvd3Nlci50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBicm93c2VyID0gbmF2aWdhdG9yLmFwcE5hbWVcbiAgICB9XG4gIH1cbiAgLy8gdHJpbSB0aGUgYnJvd3NlciB2ZXJzaW9uIHN0cmluZ1xuICBpZiAoKGl4ID0gYnJvd3NlclZlcnNpb24uaW5kZXhPZignOycpKSAhPSAtMSlcbiAgICBicm93c2VyVmVyc2lvbiA9IGJyb3dzZXJWZXJzaW9uLnN1YnN0cmluZygwLCBpeClcbiAgaWYgKChpeCA9IGJyb3dzZXJWZXJzaW9uLmluZGV4T2YoJyAnKSkgIT0gLTEpXG4gICAgYnJvd3NlclZlcnNpb24gPSBicm93c2VyVmVyc2lvbi5zdWJzdHJpbmcoMCwgaXgpXG4gIGlmICgoaXggPSBicm93c2VyVmVyc2lvbi5pbmRleE9mKCcpJykpICE9IC0xKVxuICAgIGJyb3dzZXJWZXJzaW9uID0gYnJvd3NlclZlcnNpb24uc3Vic3RyaW5nKDAsIGl4KVxuXG4gIHJldHVybiBbYnJvd3NlciwgYnJvd3NlclZlcnNpb25dLmpvaW4oJy0nKVxufVxuXG5mdW5jdGlvbiBnZXRCcm93c2VyT3NEZXRhaWxzKCkge1xuICB2YXIgb3MgPSAndW5rbm93bidcbiAgdmFyIGNsaWVudFN0cmluZ3MgPSBbXG4gICAgeyBzOiAnV2luZG93cyAxMCcsIHI6IC8oV2luZG93cyAxMC4wfFdpbmRvd3MgTlQgMTAuMCkvIH0sXG4gICAgeyBzOiAnV2luZG93cyA4LjEnLCByOiAvKFdpbmRvd3MgOC4xfFdpbmRvd3MgTlQgNi4zKS8gfSxcbiAgICB7IHM6ICdXaW5kb3dzIDgnLCByOiAvKFdpbmRvd3MgOHxXaW5kb3dzIE5UIDYuMikvIH0sXG4gICAgeyBzOiAnV2luZG93cyA3JywgcjogLyhXaW5kb3dzIDd8V2luZG93cyBOVCA2LjEpLyB9LFxuICAgIHsgczogJ1dpbmRvd3MgVmlzdGEnLCByOiAvV2luZG93cyBOVCA2LjAvIH0sXG4gICAgeyBzOiAnV2luZG93cyBTZXJ2ZXIgMjAwMycsIHI6IC9XaW5kb3dzIE5UIDUuMi8gfSxcbiAgICB7IHM6ICdXaW5kb3dzIFhQJywgcjogLyhXaW5kb3dzIE5UIDUuMXxXaW5kb3dzIFhQKS8gfSxcbiAgICB7IHM6ICdXaW5kb3dzIDIwMDAnLCByOiAvKFdpbmRvd3MgTlQgNS4wfFdpbmRvd3MgMjAwMCkvIH0sXG4gICAgeyBzOiAnV2luZG93cyBNRScsIHI6IC8oV2luIDl4IDQuOTB8V2luZG93cyBNRSkvIH0sXG4gICAgeyBzOiAnV2luZG93cyA5OCcsIHI6IC8oV2luZG93cyA5OHxXaW45OCkvIH0sXG4gICAgeyBzOiAnV2luZG93cyA5NScsIHI6IC8oV2luZG93cyA5NXxXaW45NXxXaW5kb3dzXzk1KS8gfSxcbiAgICB7IHM6ICdXaW5kb3dzIE5UIDQuMCcsIHI6IC8oV2luZG93cyBOVCA0LjB8V2luTlQ0LjB8V2luTlR8V2luZG93cyBOVCkvIH0sXG4gICAgeyBzOiAnV2luZG93cyBDRScsIHI6IC9XaW5kb3dzIENFLyB9LFxuICAgIHsgczogJ1dpbmRvd3MgMy4xMScsIHI6IC9XaW4xNi8gfSxcbiAgICB7IHM6ICdBbmRyb2lkJywgcjogL0FuZHJvaWQvIH0sXG4gICAgeyBzOiAnT3BlbiBCU0QnLCByOiAvT3BlbkJTRC8gfSxcbiAgICB7IHM6ICdTdW4gT1MnLCByOiAvU3VuT1MvIH0sXG4gICAgeyBzOiAnQ2hyb21lIE9TJywgcjogL0NyT1MvIH0sXG4gICAgeyBzOiAnTGludXgnLCByOiAvKExpbnV4fFgxMSg/IS4qQ3JPUykpLyB9LFxuICAgIHsgczogJ2lPUycsIHI6IC8oaVBob25lfGlQYWR8aVBvZCkvIH0sXG4gICAgeyBzOiAnTWFjIE9TIFgnLCByOiAvTWFjIE9TIFgvIH0sXG4gICAgeyBzOiAnTWFjIE9TJywgcjogLyhNYWMgT1N8TWFjUFBDfE1hY0ludGVsfE1hY19Qb3dlclBDfE1hY2ludG9zaCkvIH0sXG4gICAgeyBzOiAnUU5YJywgcjogL1FOWC8gfSxcbiAgICB7IHM6ICdVTklYJywgcjogL1VOSVgvIH0sXG4gICAgeyBzOiAnQmVPUycsIHI6IC9CZU9TLyB9LFxuICAgIHsgczogJ09TLzInLCByOiAvT1NcXC8yLyB9LFxuICAgIHtcbiAgICAgIHM6ICdTZWFyY2ggQm90JyxcbiAgICAgIHI6IC8obnVoa3xHb29nbGVib3R8WWFtbXlib3R8T3BlbmJvdHxTbHVycHxNU05Cb3R8QXNrIEplZXZlc1xcL1Rlb21hfGlhX2FyY2hpdmVyKS8sXG4gICAgfSxcbiAgXVxuICBmb3IgKHZhciBpZCBpbiBjbGllbnRTdHJpbmdzKSB7XG4gICAgdmFyIGNzID0gY2xpZW50U3RyaW5nc1tpZF1cbiAgICBpZiAoY3Muci50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICBvcyA9IGNzLnNcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgdmFyIG9zVmVyc2lvbiA9ICd1bmtub3duJ1xuXG4gIGlmICgvV2luZG93cy8udGVzdChvcykpIHtcbiAgICBvc1ZlcnNpb24gPSAvV2luZG93cyAoLiopLy5leGVjKG9zKVsxXVxuICAgIG9zID0gJ1dpbmRvd3MnXG4gIH1cblxuICBzd2l0Y2ggKG9zKSB7XG4gICAgY2FzZSAnTWFjIE9TJzpcbiAgICBjYXNlICdNYWMgT1MgWCc6XG4gICAgY2FzZSAnQW5kcm9pZCc6XG4gICAgICBvc1ZlcnNpb24gPSAvKD86QW5kcm9pZHxNYWMgT1N8TWFjIE9TIFh8TWFjUFBDfE1hY0ludGVsfE1hY19Qb3dlclBDfE1hY2ludG9zaCkgKFtcXC5cXF9cXGRdKykvLmV4ZWMoXG4gICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnRcbiAgICAgIClbMV1cbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlICdpT1MnOlxuICAgICAgb3NWZXJzaW9uID0gL09TIChcXGQrKV8oXFxkKylfPyhcXGQrKT8vLmV4ZWMobmF2aWdhdG9yLmFwcFZlcnNpb24pXG4gICAgICBvc1ZlcnNpb24gPSBvc1ZlcnNpb25bMV0gKyAnLicgKyBvc1ZlcnNpb25bMl0gKyAnLicgKyAob3NWZXJzaW9uWzNdIHwgMClcbiAgICAgIGJyZWFrXG4gIH1cbiAgcmV0dXJuIFtvcywgb3NWZXJzaW9uXS5qb2luKCctJylcbn1cblxuLyoqXG4gKiBGb3IgY2hlY2tpbmcgcHJvY2Vzcy5lbnYgYWx3YXlzIHVzZSBgaGFzT3duUHJvcGVydHlgXG4gKiBTb21lIHByb3ZpZGVycyBjb3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIHRyeWluZyB0byBhY2Nlc3MgZW52IHZhcmlhYmxlcyB0aGF0IGRvZXMgbm90IGV4aXN0c1xuICogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIGdldE5vZGVSdW50aW1lRW52KCkge1xuICB2YXIgcnVudGltZUVudnMgPSBbXG4gICAge1xuICAgICAgbmFtZTogJ05ldGxpZnknLFxuICAgICAgY2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuaGFzT3duUHJvcGVydHkoJ05FVExJRllfSU1BR0VTX0NETl9ET01BSU4nKVxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdWZXJjZWwnLFxuICAgICAgY2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuaGFzT3duUHJvcGVydHkoJ1ZFUkNFTCcpXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0hlcm9rdScsXG4gICAgICBjaGVjazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcHJvY2Vzcy5lbnYuaGFzT3duUHJvcGVydHkoJ1BBVEgnKSAmJlxuICAgICAgICAgIHByb2Nlc3MuZW52LlBBVEguaW5kZXhPZignLmhlcm9rdScpICE9PSAtMVxuICAgICAgICApXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0FXUyBMYW1iZGEnLFxuICAgICAgY2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuaGFzT3duUHJvcGVydHkoJ0FXU19MQU1CREFfRlVOQ1RJT05fVkVSU0lPTicpXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0dDUCBDbG91ZCBGdW5jdGlvbnMnLFxuICAgICAgY2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHByb2Nlc3MuZW52Lmhhc093blByb3BlcnR5KCdfJykgJiZcbiAgICAgICAgICBwcm9jZXNzLmVudi5fLmluZGV4T2YoJ2dvb2dsZScpICE9PSAtMVxuICAgICAgICApXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0dDUCBDb21wdXRlIEluc3RhbmNlcycsXG4gICAgICBjaGVjazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzLmVudi5oYXNPd25Qcm9wZXJ0eSgnR09PR0xFX0NMT1VEX1BST0pFQ1QnKVxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdBenVyZSBDbG91ZCBGdW5jdGlvbnMnLFxuICAgICAgY2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuaGFzT3duUHJvcGVydHkoXG4gICAgICAgICAgJ1dFQlNJVEVfRlVOQ1RJT05TX0FaVVJFTU9OSVRPUl9DQVRFR09SSUVTJ1xuICAgICAgICApXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ0F6dXJlIENvbXB1dGUnLFxuICAgICAgY2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHByb2Nlc3MuZW52Lmhhc093blByb3BlcnR5KCdPUllYX0VOVl9UWVBFJykgJiZcbiAgICAgICAgICBwcm9jZXNzLmVudi5oYXNPd25Qcm9wZXJ0eSgnV0VCU0lURV9JTlNUQU5DRV9JRCcpICYmXG4gICAgICAgICAgcHJvY2Vzcy5lbnYuT1JZWF9FTlZfVFlQRSA9PT0gJ0FwcFNlcnZpY2UnXG4gICAgICAgIClcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnTW9uZ28gU3RpdGNoJyxcbiAgICAgIGNoZWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBjcm9zc0dsb2JhbC5TdGl0Y2hFcnJvciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdSZW5kZXInLFxuICAgICAgY2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuaGFzT3duUHJvcGVydHkoJ1JFTkRFUl9TRVJWSUNFX0lEJylcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnQmVnaW4nLFxuICAgICAgY2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuaGFzT3duUHJvcGVydHkoJ0JFR0lOX0RBVEFfU0NPUEVfSUQnKVxuICAgICAgfSxcbiAgICB9LFxuICBdXG4gIHZhciBkZXRlY3RlZEVudiA9IHJ1bnRpbWVFbnZzLmZpbmQoZW52ID0+IGVudi5jaGVjaygpKVxuXG4gIHJldHVybiBkZXRlY3RlZEVudiA/IGRldGVjdGVkRW52Lm5hbWUgOiAndW5rbm93bidcbn1cblxuLyoqXG4gKiBJZiBkZWZpbmVkLCByZXR1cm5zIHRoZSBnaXZlbiB2YWx1ZS4gT3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBkZWZhdWx0IHZhbHVlLlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgZ2l2ZW4gdmFsdWUuXG4gKiBAcGFyYW0ge2FueX0gZGVmIFRoZSBkZWZhdWx0IHZhbHVlLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdHMob2JqLCBkZWYpIHtcbiAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGRlZlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKipcbiAqIFVzZWQgZm9yIGZ1bmN0aW9ucyB0aGF0IHRha2UgYW4gb3B0aW9ucyBvYmplY3RzLlxuICogRmlsbHMgaW4gZGVmYXVsdHMgZm9yIG9wdGlvbnMgbm90IHByb3ZpZGVkLlxuICogVGhyb3dzIGVycm9ycyBmb3IgcHJvdmlkZWQgb3B0aW9ucyB0aGF0IGFyZW4ndCByZWNvZ25pemVkLlxuICogQSBkZWZhdWx0IHZhbHVlIG9mIGB1bmRlZmluZWRgIGlzIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCB0aGUgb3B0aW9uIG11c3QgYmUgcHJvdmlkZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhcHBseURlZmF1bHRzKHByb3ZpZGVkLCBkZWZhdWx0cykge1xuICB2YXIgb3V0ID0ge31cblxuICBmb3IgKHZhciBwcm92aWRlZEtleSBpbiBwcm92aWRlZCkge1xuICAgIGlmICghKHByb3ZpZGVkS2V5IGluIGRlZmF1bHRzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzdWNoIG9wdGlvbiAnICsgcHJvdmlkZWRLZXkpXG4gICAgfVxuICAgIG91dFtwcm92aWRlZEtleV0gPSBwcm92aWRlZFtwcm92aWRlZEtleV1cbiAgfVxuXG4gIGZvciAodmFyIGRlZmF1bHRzS2V5IGluIGRlZmF1bHRzKSB7XG4gICAgaWYgKCEoZGVmYXVsdHNLZXkgaW4gb3V0KSkge1xuICAgICAgb3V0W2RlZmF1bHRzS2V5XSA9IGRlZmF1bHRzW2RlZmF1bHRzS2V5XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IG9iamVjdCB3aXRob3V0IGFueSBrZXlzIHdoZXJlIHRoZSB2YWx1ZSB3b3VsZCBiZSBudWxsIG9yIHVuZGVmaW5lZC5cbiAqIEBwcml2YXRlXG4gKiAqL1xuZnVuY3Rpb24gcmVtb3ZlTnVsbEFuZFVuZGVmaW5lZFZhbHVlcyhvYmplY3QpIHtcbiAgdmFyIHJlcyA9IHt9XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICB2YXIgdmFsID0gb2JqZWN0W2tleV1cbiAgICBpZiAodmFsICE9PSBudWxsICYmIHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNba2V5XSA9IHZhbFxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBvYmplY3Qgd2l0aG91dCBhbnkga2V5cyB3aGVyZSB0aGUgdmFsdWUgd291bGQgYmUgdW5kZWZpbmVkLlxuICogQHByaXZhdGVcbiAqICovXG5mdW5jdGlvbiByZW1vdmVVbmRlZmluZWRWYWx1ZXMob2JqZWN0KSB7XG4gIHZhciByZXMgPSB7fVxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgdmFyIHZhbCA9IG9iamVjdFtrZXldXG4gICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXNba2V5XSA9IHZhbFxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUmV0dXJucyBhIGJvb2xlYW4gc3RhdGluZyBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGhhcyBhIGdpdmVuIHByb3BlcnR5XG4gKiBAcHJpdmF0ZVxuICogKi9cbmZ1bmN0aW9uIGNoZWNrSW5zdGFuY2VIYXNQcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCAmJiBCb29sZWFuKG9ialtwcm9wXSlcbn1cblxuZnVuY3Rpb24gZm9ybWF0VXJsKGJhc2UsIHBhdGgsIHF1ZXJ5KSB7XG4gIHF1ZXJ5ID0gdHlwZW9mIHF1ZXJ5ID09PSAnb2JqZWN0JyA/IHF1ZXJ5c3RyaW5naWZ5KHF1ZXJ5KSA6IHF1ZXJ5XG4gIHJldHVybiBbXG4gICAgYmFzZSxcbiAgICBwYXRoID8gKHBhdGguY2hhckF0KDApID09PSAnLycgPyAnJyA6ICcvJyArIHBhdGgpIDogJycsXG4gICAgcXVlcnkgPyAocXVlcnkuY2hhckF0KDApID09PSAnPycgPyAnJyA6ICc/JyArIHF1ZXJ5KSA6ICcnLFxuICBdLmpvaW4oJycpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgcXVlcnkgc3RyaW5nIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB0aGF0IHNob3VsZCBiZSB0cmFuc2Zvcm1lZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVmaXggT3B0aW9uYWwgcHJlZml4LlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5naWZ5KG9iaiwgcHJlZml4KSB7XG4gIHByZWZpeCA9IHByZWZpeCB8fCAnJ1xuXG4gIHZhciBwYWlycyA9IFtdLFxuICAgIHZhbHVlLFxuICAgIGtleVxuXG4gIC8vXG4gIC8vIE9wdGlvbmFsbHkgcHJlZml4IHdpdGggYSAnPycgaWYgbmVlZGVkXG4gIC8vXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHByZWZpeCkgcHJlZml4ID0gJz8nXG5cbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGNoZWNrSW5zdGFuY2VIYXNQcm9wZXJ0eShvYmosIGtleSkpIHtcbiAgICAgIHZhbHVlID0gb2JqW2tleV1cblxuICAgICAgLy9cbiAgICAgIC8vIEVkZ2UgY2FzZXMgd2hlcmUgd2UgYWN0dWFsbHkgd2FudCB0byBlbmNvZGUgdGhlIHZhbHVlIHRvIGFuIGVtcHR5XG4gICAgICAvLyBzdHJpbmcgaW5zdGVhZCBvZiB0aGUgc3RyaW5naWZpZWQgdmFsdWUuXG4gICAgICAvL1xuICAgICAgaWYgKCF2YWx1ZSAmJiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCBpc05hTih2YWx1ZSkpKSB7XG4gICAgICAgIHZhbHVlID0gJydcbiAgICAgIH1cblxuICAgICAga2V5ID0gZW5jb2RlKGtleSlcbiAgICAgIHZhbHVlID0gZW5jb2RlKHZhbHVlKVxuXG4gICAgICAvL1xuICAgICAgLy8gSWYgd2UgZmFpbGVkIHRvIGVuY29kZSB0aGUgc3RyaW5ncywgd2Ugc2hvdWxkIGJhaWwgb3V0IGFzIHdlIGRvbid0XG4gICAgICAvLyB3YW50IHRvIGFkZCBpbnZhbGlkIHN0cmluZ3MgdG8gdGhlIHF1ZXJ5LlxuICAgICAgLy9cbiAgICAgIGlmIChrZXkgPT09IG51bGwgfHwgdmFsdWUgPT09IG51bGwpIGNvbnRpbnVlXG4gICAgICBwYWlycy5wdXNoKGtleSArICc9JyArIHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYWlycy5sZW5ndGggPyBwcmVmaXggKyBwYWlycy5qb2luKCcmJykgOiAnJ1xufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGVuY29kZSBhIGdpdmVuIGlucHV0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgZW5jb2RlZC5cbiAqIEByZXR1cm5zIHtTdHJpbmd8TnVsbH0gVGhlIGVuY29kZWQgc3RyaW5nLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuICB0cnkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9iamVjdHMgaW50byBvbmVcbiAqIEBwYXJhbSBvYmoxXG4gKiBAcGFyYW0gb2JqMlxuICogQHJldHVybnMgb2JqMyBhIG5ldyBvYmplY3QgYmFzZWQgb24gb2JqMSBhbmQgb2JqMlxuICovXG5mdW5jdGlvbiBtZXJnZU9iamVjdHMob2JqMSwgb2JqMikge1xuICB2YXIgb2JqMyA9IHt9XG4gIGZvciAodmFyIGF0dHJuYW1lIGluIG9iajEpIHtcbiAgICBvYmozW2F0dHJuYW1lXSA9IG9iajFbYXR0cm5hbWVdXG4gIH1cbiAgZm9yICh2YXIgYXR0cm5hbWUgaW4gb2JqMikge1xuICAgIG9iajNbYXR0cm5hbWVdID0gb2JqMlthdHRybmFtZV1cbiAgfVxuICByZXR1cm4gb2JqM1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHdoaWNoIEZldGNoIEFQSSBjb21wYXRpYmxlIGZ1bmN0aW9uIHRvIHVzZS4gSWYgYW4gb3ZlcnJpZGUgaXNcbiAqIHByb3ZpZGVkLCByZXR1cm5zIHRoZSBvdmVycmlkZS4gSWYgbm8gb3ZlcnJpZGUgYW5kIHRoZSBnbG9iYWwgKHdpbmRvdykgaGFzXG4gKiBcImZldGNoXCIgcHJvcGVydHksIHJldHVybiB0aGUgbmF0aXZlIGZldGNoLiBPdGhlcndpc2UgcmV0dXJucyB0aGUgY3Jvc3MtZmV0Y2ggcG9seWZpbGwuXG4gKlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGZldGNoT3ZlcnJpZGUgQW4gRmV0Y2ggQVBJIGNvbXBhdGlibGUgZnVuY3Rpb24gdG8gdXNlLlxuICogQHJldHVybnMge2Z1bmN0aW9ufSBBIEZldGNoIEFQSSBjb21wYXRpYmxlIGZ1bmN0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZldGNoKGZldGNoT3ZlcnJpZGUpIHtcbiAgaWYgKHR5cGVvZiBmZXRjaE92ZXJyaWRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZldGNoT3ZlcnJpZGVcbiAgfVxuXG4gIGlmICh0eXBlb2YgY3Jvc3NHbG9iYWwuZmV0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBOQi4gUmViaW5kaW5nIHRvIGdsb2JhbCBpcyBuZWVkZWQgZm9yIFNhZmFyaVxuICAgIHJldHVybiBjcm9zc0dsb2JhbC5mZXRjaC5iaW5kKGNyb3NzR2xvYmFsKVxuICB9XG5cbiAgcmV0dXJuIHJlcXVpcmUoJ2Nyb3NzLWZldGNoJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyb3NzR2xvYmFsOiBjcm9zc0dsb2JhbCxcbiAgbWVyZ2VPYmplY3RzOiBtZXJnZU9iamVjdHMsXG4gIGZvcm1hdFVybDogZm9ybWF0VXJsLFxuICBxdWVyeXN0cmluZ2lmeTogcXVlcnlzdHJpbmdpZnksXG4gIGluaGVyaXRzOiBpbmhlcml0cyxcbiAgaXNOb2RlRW52OiBpc05vZGVFbnYsXG4gIGdldEVudlZhcmlhYmxlOiBnZXRFbnZWYXJpYWJsZSxcbiAgZGVmYXVsdHM6IGRlZmF1bHRzLFxuICBhcHBseURlZmF1bHRzOiBhcHBseURlZmF1bHRzLFxuICByZW1vdmVOdWxsQW5kVW5kZWZpbmVkVmFsdWVzOiByZW1vdmVOdWxsQW5kVW5kZWZpbmVkVmFsdWVzLFxuICByZW1vdmVVbmRlZmluZWRWYWx1ZXM6IHJlbW92ZVVuZGVmaW5lZFZhbHVlcyxcbiAgY2hlY2tJbnN0YW5jZUhhc1Byb3BlcnR5OiBjaGVja0luc3RhbmNlSGFzUHJvcGVydHksXG4gIGdldEJyb3dzZXJEZXRhaWxzOiBnZXRCcm93c2VyRGV0YWlscyxcbiAgZ2V0QnJvd3Nlck9zRGV0YWlsczogZ2V0QnJvd3Nlck9zRGV0YWlscyxcbiAgZ2V0Tm9kZVJ1bnRpbWVFbnY6IGdldE5vZGVSdW50aW1lRW52LFxuICByZXNvbHZlRmV0Y2g6IHJlc29sdmVGZXRjaCxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/_util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/clientLogger.js":
/*!**************************************************!*\
  !*** ./node_modules/faunadb/src/clientLogger.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar json = __webpack_require__(/*! ./_json */ \"(ssr)/./node_modules/faunadb/src/_json.js\")\n\n/**\n * Functions to assist with debug logging.\n * @module clientLogger\n */\n\n/**\n * A user provided log line handler.\n *\n * @callback loggerCallback\n * @param {string} logged\n */\n\n/**\n * Function that can be the `observer` for a {@link Client}.\n * Will call `loggerFunction` with a string representation of each {@link RequestResult}.\n *\n * An example logging string:\n * ```plain\n * Fauna POST /\n * Request JSON: {\n *   \"data\": ...\n * }\n * Response headers: {\n *    \"x-faunadb-host\": ...,\n *    \"x-faunadb-build\": ...,\n *    \"connection\": \"close\",\n *    \"content-length\": ...,\n *    \"content-type\": \"application/json;charset=utf-8\"\n *  }\n * Response JSON: {\n *    \"resource\": {\n *      \"ref\": { ... },\n *      \"class\": { ... },\n *      \"ts\": ...\n *    }\n *  }\n * Response (201): Network latency 13ms\n * ```\n *\n * @param {loggerCallback} loggerFunction\n * @return {Client~observerCallback}\n * @example\n * var client = new Client({\n *   ... other options ...\n *   observer: logger(console.log)\n * })\n * client.ping() // Logs the request and response.\n */\nfunction logger(loggerFunction) {\n  return function(requestResult, client) {\n    return loggerFunction(showRequestResult(requestResult), client)\n  }\n}\n\n/**\n * Convenience function used by {@link logger} to transform a {@link RequestResult}\n * to a string for logging.\n * @param {RequestResult} requestResult\n * @returns {string} string to be logged.\n */\nfunction showRequestResult(requestResult) {\n  var query = requestResult.query,\n    method = requestResult.method,\n    path = requestResult.path,\n    requestContent = requestResult.requestContent,\n    responseHeaders = requestResult.responseHeaders,\n    responseContent = requestResult.responseContent,\n    statusCode = requestResult.statusCode,\n    timeTaken = requestResult.timeTaken\n\n  var out = ''\n\n  function log(str) {\n    out = out + str\n  }\n\n  log('Fauna ' + method + ' /' + path + _queryString(query) + '\\n')\n  if (requestContent != null) {\n    log('  Request JSON: ' + _showJSON(requestContent) + '\\n')\n  }\n  log('  Response headers: ' + _showJSON(responseHeaders) + '\\n')\n  log('  Response JSON: ' + _showJSON(responseContent) + '\\n')\n  log('  Response (' + statusCode + '): Network latency ' + timeTaken + 'ms\\n')\n\n  return out\n}\n\nfunction _indent(str) {\n  var indentStr = '  '\n  return str.split('\\n').join('\\n' + indentStr)\n}\n\nfunction _showJSON(object) {\n  return _indent(json.toJSON(object, true))\n}\n\nfunction _queryString(query) {\n  if (query == null) {\n    return ''\n  }\n\n  var keys = Object.keys(query)\n  if (keys.length === 0) {\n    return ''\n  }\n\n  var pairs = keys.map(function(key) {\n    return key + '=' + query[key]\n  })\n  return '?' + pairs.join('&')\n}\n\nmodule.exports = {\n  logger: logger,\n  showRequestResult: showRequestResult,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmF1bmFkYi9zcmMvY2xpZW50TG9nZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLFdBQVcsbUJBQU8sQ0FBQywwREFBUzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7O0FBRUE7QUFDQSw4Q0FBOEMsYUFBYTtBQUMzRCxvRUFBb0Usb0JBQW9CO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsS0FBSztBQUN0QixtQkFBbUIsS0FBSztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsY0FBYyxnQkFBZ0I7QUFDL0Q7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9va2Jvb2tzaG9wbmcvLi9ub2RlX21vZHVsZXMvZmF1bmFkYi9zcmMvY2xpZW50TG9nZ2VyLmpzPzZlZDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciBqc29uID0gcmVxdWlyZSgnLi9fanNvbicpXG5cbi8qKlxuICogRnVuY3Rpb25zIHRvIGFzc2lzdCB3aXRoIGRlYnVnIGxvZ2dpbmcuXG4gKiBAbW9kdWxlIGNsaWVudExvZ2dlclxuICovXG5cbi8qKlxuICogQSB1c2VyIHByb3ZpZGVkIGxvZyBsaW5lIGhhbmRsZXIuXG4gKlxuICogQGNhbGxiYWNrIGxvZ2dlckNhbGxiYWNrXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9nZ2VkXG4gKi9cblxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IGNhbiBiZSB0aGUgYG9ic2VydmVyYCBmb3IgYSB7QGxpbmsgQ2xpZW50fS5cbiAqIFdpbGwgY2FsbCBgbG9nZ2VyRnVuY3Rpb25gIHdpdGggYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgZWFjaCB7QGxpbmsgUmVxdWVzdFJlc3VsdH0uXG4gKlxuICogQW4gZXhhbXBsZSBsb2dnaW5nIHN0cmluZzpcbiAqIGBgYHBsYWluXG4gKiBGYXVuYSBQT1NUIC9cbiAqIFJlcXVlc3QgSlNPTjoge1xuICogICBcImRhdGFcIjogLi4uXG4gKiB9XG4gKiBSZXNwb25zZSBoZWFkZXJzOiB7XG4gKiAgICBcIngtZmF1bmFkYi1ob3N0XCI6IC4uLixcbiAqICAgIFwieC1mYXVuYWRiLWJ1aWxkXCI6IC4uLixcbiAqICAgIFwiY29ubmVjdGlvblwiOiBcImNsb3NlXCIsXG4gKiAgICBcImNvbnRlbnQtbGVuZ3RoXCI6IC4uLixcbiAqICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04XCJcbiAqICB9XG4gKiBSZXNwb25zZSBKU09OOiB7XG4gKiAgICBcInJlc291cmNlXCI6IHtcbiAqICAgICAgXCJyZWZcIjogeyAuLi4gfSxcbiAqICAgICAgXCJjbGFzc1wiOiB7IC4uLiB9LFxuICogICAgICBcInRzXCI6IC4uLlxuICogICAgfVxuICogIH1cbiAqIFJlc3BvbnNlICgyMDEpOiBOZXR3b3JrIGxhdGVuY3kgMTNtc1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtsb2dnZXJDYWxsYmFja30gbG9nZ2VyRnVuY3Rpb25cbiAqIEByZXR1cm4ge0NsaWVudH5vYnNlcnZlckNhbGxiYWNrfVxuICogQGV4YW1wbGVcbiAqIHZhciBjbGllbnQgPSBuZXcgQ2xpZW50KHtcbiAqICAgLi4uIG90aGVyIG9wdGlvbnMgLi4uXG4gKiAgIG9ic2VydmVyOiBsb2dnZXIoY29uc29sZS5sb2cpXG4gKiB9KVxuICogY2xpZW50LnBpbmcoKSAvLyBMb2dzIHRoZSByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqL1xuZnVuY3Rpb24gbG9nZ2VyKGxvZ2dlckZ1bmN0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0UmVzdWx0LCBjbGllbnQpIHtcbiAgICByZXR1cm4gbG9nZ2VyRnVuY3Rpb24oc2hvd1JlcXVlc3RSZXN1bHQocmVxdWVzdFJlc3VsdCksIGNsaWVudClcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlbmllbmNlIGZ1bmN0aW9uIHVzZWQgYnkge0BsaW5rIGxvZ2dlcn0gdG8gdHJhbnNmb3JtIGEge0BsaW5rIFJlcXVlc3RSZXN1bHR9XG4gKiB0byBhIHN0cmluZyBmb3IgbG9nZ2luZy5cbiAqIEBwYXJhbSB7UmVxdWVzdFJlc3VsdH0gcmVxdWVzdFJlc3VsdFxuICogQHJldHVybnMge3N0cmluZ30gc3RyaW5nIHRvIGJlIGxvZ2dlZC5cbiAqL1xuZnVuY3Rpb24gc2hvd1JlcXVlc3RSZXN1bHQocmVxdWVzdFJlc3VsdCkge1xuICB2YXIgcXVlcnkgPSByZXF1ZXN0UmVzdWx0LnF1ZXJ5LFxuICAgIG1ldGhvZCA9IHJlcXVlc3RSZXN1bHQubWV0aG9kLFxuICAgIHBhdGggPSByZXF1ZXN0UmVzdWx0LnBhdGgsXG4gICAgcmVxdWVzdENvbnRlbnQgPSByZXF1ZXN0UmVzdWx0LnJlcXVlc3RDb250ZW50LFxuICAgIHJlc3BvbnNlSGVhZGVycyA9IHJlcXVlc3RSZXN1bHQucmVzcG9uc2VIZWFkZXJzLFxuICAgIHJlc3BvbnNlQ29udGVudCA9IHJlcXVlc3RSZXN1bHQucmVzcG9uc2VDb250ZW50LFxuICAgIHN0YXR1c0NvZGUgPSByZXF1ZXN0UmVzdWx0LnN0YXR1c0NvZGUsXG4gICAgdGltZVRha2VuID0gcmVxdWVzdFJlc3VsdC50aW1lVGFrZW5cblxuICB2YXIgb3V0ID0gJydcblxuICBmdW5jdGlvbiBsb2coc3RyKSB7XG4gICAgb3V0ID0gb3V0ICsgc3RyXG4gIH1cblxuICBsb2coJ0ZhdW5hICcgKyBtZXRob2QgKyAnIC8nICsgcGF0aCArIF9xdWVyeVN0cmluZyhxdWVyeSkgKyAnXFxuJylcbiAgaWYgKHJlcXVlc3RDb250ZW50ICE9IG51bGwpIHtcbiAgICBsb2coJyAgUmVxdWVzdCBKU09OOiAnICsgX3Nob3dKU09OKHJlcXVlc3RDb250ZW50KSArICdcXG4nKVxuICB9XG4gIGxvZygnICBSZXNwb25zZSBoZWFkZXJzOiAnICsgX3Nob3dKU09OKHJlc3BvbnNlSGVhZGVycykgKyAnXFxuJylcbiAgbG9nKCcgIFJlc3BvbnNlIEpTT046ICcgKyBfc2hvd0pTT04ocmVzcG9uc2VDb250ZW50KSArICdcXG4nKVxuICBsb2coJyAgUmVzcG9uc2UgKCcgKyBzdGF0dXNDb2RlICsgJyk6IE5ldHdvcmsgbGF0ZW5jeSAnICsgdGltZVRha2VuICsgJ21zXFxuJylcblxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIF9pbmRlbnQoc3RyKSB7XG4gIHZhciBpbmRlbnRTdHIgPSAnICAnXG4gIHJldHVybiBzdHIuc3BsaXQoJ1xcbicpLmpvaW4oJ1xcbicgKyBpbmRlbnRTdHIpXG59XG5cbmZ1bmN0aW9uIF9zaG93SlNPTihvYmplY3QpIHtcbiAgcmV0dXJuIF9pbmRlbnQoanNvbi50b0pTT04ob2JqZWN0LCB0cnVlKSlcbn1cblxuZnVuY3Rpb24gX3F1ZXJ5U3RyaW5nKHF1ZXJ5KSB7XG4gIGlmIChxdWVyeSA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHF1ZXJ5KVxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIHZhciBwYWlycyA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBrZXkgKyAnPScgKyBxdWVyeVtrZXldXG4gIH0pXG4gIHJldHVybiAnPycgKyBwYWlycy5qb2luKCcmJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxvZ2dlcjogbG9nZ2VyLFxuICBzaG93UmVxdWVzdFJlc3VsdDogc2hvd1JlcXVlc3RSZXN1bHQsXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/clientLogger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/errors.js":
/*!********************************************!*\
  !*** ./node_modules/faunadb/src/errors.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar util = __webpack_require__(/*! ./_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\n\n/**\n * FaunaDB error types. Request errors can originate from the client (e.g. bad\n * method parameters) or from the FaunaDB Server (e.g. invalid queries,\n * timeouts.) Server errors will subclass {@link module:errors~FaunaHTTPError}.\n * Stream errors will subclass {@link module:errors~StreamError}.\n *\n * @module errors\n */\n\n/**\n * The base exception type for all FaunaDB errors.\n *\n * @param {string} message\n * @extends Error\n * @constructor\n */\nfunction FaunaError(name, message, description) {\n  Error.call(this)\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor)\n  } else this.stack = new Error().stack\n\n  /**\n   * Name of this exception.\n   * @type {string}\n   */\n  this.name = name\n\n  /**\n   * Message for this exception.\n   * @type {string}\n   */\n  this.message = message\n\n  /**\n   * Description for this exception.\n   * @type {string}\n   */\n  this.description = description\n}\n\nutil.inherits(FaunaError, Error)\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidValue(message) {\n  FaunaError.call(this, 'InvalidValue', message)\n}\n\nutil.inherits(InvalidValue, FaunaError)\n\n/**\n * Exception thrown by this client library when an invalid\n * value is provided as a function argument.\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction InvalidArity(min, max, actual, callerFunc) {\n  var arityInfo = `${callerFunc} function requires ${messageForArity(\n    min,\n    max\n  )} argument(s) but ${actual} were given`\n  var documentationLink = logDocumentationLink(callerFunc)\n\n  FaunaError.call(this, 'InvalidArity', `${arityInfo}\\n${documentationLink}`)\n\n  /**\n   * Minimum number of arguments.\n   * @type {number}\n   */\n  this.min = min\n\n  /**\n   * Maximum number of arguments.\n   * @type {number}\n   */\n  this.max = max\n\n  /**\n   * Actual number of arguments called with.\n   * @type {number}\n   */\n  this.actual = actual\n\n  function messageForArity(min, max) {\n    if (max === null) return 'at least ' + min\n    if (min === null) return 'up to ' + max\n    if (min === max) return min\n    return 'from ' + min + ' to ' + max\n  }\n\n  function logDocumentationLink(functionName) {\n    var docsURL = 'https://docs.fauna.com/fauna/current/api/fql/functions/'\n    return `For more info, see the docs: ${docsURL}${functionName.toLowerCase()}`\n  }\n}\n\nutil.inherits(InvalidArity, FaunaError)\n\n/**\n * Base exception type for errors returned by the FaunaDB server.\n *\n * @param {RequestResult} requestResult\n *\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction FaunaHTTPError(name, requestResult) {\n  var response = requestResult.responseContent\n  var errors = response.errors\n  var message = errors.length === 0 ? '(empty \"errors\")' : errors[0].code\n  var description =\n    errors.length === 0 ? '(empty \"errors\")' : errors[0].description\n  FaunaError.call(this, name, message, description)\n\n  /**\n   * A wrapped {@link RequestResult} object, containing the request and response\n   * context of the failed request.\n   *\n   * @type {RequestResult}\n   */\n  this.requestResult = requestResult\n}\n\nutil.inherits(FaunaHTTPError, FaunaError)\n\n/**\n * Convenience method to return the errors from the response object.\n *\n * @returns {Object}\n */\nFaunaHTTPError.prototype.errors = function() {\n  return this.requestResult.responseContent.errors\n}\n\n/**\n * Takes a {@link RequestResult} and throws an appropriate exception if\n * it contains a failed request.\n *\n * @param requestResult {RequestResult}\n */\nFaunaHTTPError.raiseForStatusCode = function(requestResult) {\n  var code = requestResult.statusCode\n  if (code < 200 || code >= 300) {\n    switch (code) {\n      case 400:\n        throw new BadRequest(requestResult)\n      case 401:\n        throw new Unauthorized(requestResult)\n      case 403:\n        throw new PermissionDenied(requestResult)\n      case 404:\n        throw new NotFound(requestResult)\n      case 405:\n        throw new MethodNotAllowed(requestResult)\n      case 429:\n        throw new TooManyRequests(requestResult)\n      case 500:\n        throw new InternalError(requestResult)\n      case 503:\n        throw new UnavailableError(requestResult)\n      default:\n        throw new FaunaHTTPError('UnknownError', requestResult)\n    }\n  }\n}\n\n/**\n * A HTTP 400 error.\n *\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction BadRequest(requestResult) {\n  FaunaHTTPError.call(this, 'BadRequest', requestResult)\n}\n\nutil.inherits(BadRequest, FaunaHTTPError)\n\n/**\n * A HTTP 401 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction Unauthorized(requestResult) {\n  FaunaHTTPError.call(this, 'Unauthorized', requestResult)\n  this.message = this.message +=\n    '. Check that endpoint, schema, port and secret are correct during client’s instantiation'\n}\n\nutil.inherits(Unauthorized, FaunaHTTPError)\n\n/**\n * A HTTP 403 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction PermissionDenied(requestResult) {\n  FaunaHTTPError.call(this, 'PermissionDenied', requestResult)\n}\n\nutil.inherits(PermissionDenied, FaunaHTTPError)\n\n/**\n * A HTTP 404 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction NotFound(requestResult) {\n  FaunaHTTPError.call(this, 'NotFound', requestResult)\n}\n\nutil.inherits(NotFound, FaunaHTTPError)\n\n/**\n * A HTTP 405 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction MethodNotAllowed(requestResult) {\n  FaunaHTTPError.call(this, 'MethodNotAllowed', requestResult)\n}\n\nutil.inherits(MethodNotAllowed, FaunaHTTPError)\n\n/**\n * A HTTP 429 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction TooManyRequests(requestResult) {\n  FaunaHTTPError.call(this, 'TooManyRequests', requestResult)\n}\n\nutil.inherits(TooManyRequests, FaunaHTTPError)\n\n/**\n * A HTTP 500 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction InternalError(requestResult) {\n  FaunaHTTPError.call(this, 'InternalError', requestResult)\n}\n\nutil.inherits(InternalError, FaunaHTTPError)\n\n/**\n * A HTTP 503 error.\n * @param {RequestResult} requestResult\n * @extends module:errors~FaunaHTTPError\n * @constructor\n */\nfunction UnavailableError(requestResult) {\n  FaunaHTTPError.call(this, 'UnavailableError', requestResult)\n}\n\nutil.inherits(UnavailableError, FaunaHTTPError)\n\n/**\n * The base exception type for all stream related errors.\n *\n * @constructor\n * @param {string} name The error class name.\n * @param {string} message The error message.\n * @param {string} description The error detailed description.\n * @extends module:errors~FaunaError\n */\nfunction StreamError(name, message, description) {\n  FaunaError.call(this, name, message, description)\n}\n\nutil.inherits(StreamError, FaunaError)\n\n/**\n * An error thrown by the client when streams are not supported by the current\n * platform.\n *\n * @constructor\n * @param {string} description The error description.\n * @extends module:errors~StreamError\n */\nfunction StreamsNotSupported(description) {\n  FaunaError.call(\n    this,\n    'StreamsNotSupported',\n    'streams not supported',\n    description\n  )\n}\n\nutil.inherits(StreamsNotSupported, StreamError)\n\n/**\n * An Error thrown by the server when something wrong happened with the\n * subscribed stream.\n * @constructor\n * @param {Object} event The error event.\n * @property {Object} event The error event.\n * @extends module:errors~StreamError\n */\nfunction StreamErrorEvent(event) {\n  var error = event.data || {}\n  FaunaError.call(this, 'StreamErrorEvent', error.code, error.description)\n  this.event = event\n}\n\nutil.inherits(StreamErrorEvent, StreamError)\n\n/**\n * An error thrown when attempting to operate on a closed Client instance.\n *\n * @param {string} message The error message.\n * @param {?string} description The error description.\n * @extends module:errors~FaunaError\n * @constructor\n */\nfunction ClientClosed(message, description) {\n  FaunaError.call(this, 'ClientClosed', message, description)\n}\n\nutil.inherits(ClientClosed, FaunaError)\n\nmodule.exports = {\n  FaunaError: FaunaError,\n  ClientClosed: ClientClosed,\n  FaunaHTTPError: FaunaHTTPError,\n  InvalidValue: InvalidValue,\n  InvalidArity: InvalidArity,\n  BadRequest: BadRequest,\n  Unauthorized: Unauthorized,\n  PermissionDenied: PermissionDenied,\n  NotFound: NotFound,\n  MethodNotAllowed: MethodNotAllowed,\n  TooManyRequests: TooManyRequests,\n  InternalError: InternalError,\n  UnavailableError: UnavailableError,\n  StreamError: StreamError,\n  StreamsNotSupported: StreamsNotSupported,\n  StreamErrorEvent: StreamErrorEvent,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/query.js":
/*!*******************************************!*\
  !*** ./node_modules/faunadb/src/query.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar annotate = __webpack_require__(/*! fn-annotate */ \"(ssr)/./node_modules/fn-annotate/index.js\")\nvar deprecate = __webpack_require__(/*! util-deprecate */ \"(ssr)/./node_modules/util-deprecate/node.js\")\nvar Expr = __webpack_require__(/*! ./Expr */ \"(ssr)/./node_modules/faunadb/src/Expr.js\")\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/faunadb/src/errors.js\")\nvar values = __webpack_require__(/*! ./values */ \"(ssr)/./node_modules/faunadb/src/values.js\")\nvar objectAssign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\")\nvar util = __webpack_require__(/*! ./_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\n\n/**\n * This module contains functions used to construct FaunaDB Queries.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi)\n * for per-function documentation.\n *\n * @module query\n */\n\n/**\n * @typedef {(Expr|string|number|boolean|Object)} module:query~ExprTerm\n */\n\n/**\n * @typedef {(module:query~ExprTerm|Array<module:query~ExprTerm>)} module:query~ExprArg\n */\n\n// Type helpers\n\n/**\n * If one parameter is provided, constructs a literal Ref value.\n * The string `collections/widget/123` will be equivalent to `new values.Ref('123', new values.Ref('widget', values.Native.COLLECTIONS))`\n *\n * If two are provided, constructs a Ref() function that, when evaluated, returns a Ref value.\n *\n * @param {string|module:query~ExprArg} ref|cls\n *   Alone, the ref in path form. Combined with `id`, must be a collection ref.\n * @param {module:query~ExprArg} [id]\n *   A numeric id of the given collection.\n * @return {Expr}\n */\nfunction Ref() {\n  arity.between(1, 2, arguments, Ref.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ '@ref': wrap(arguments[0]) })\n    case 2:\n      return new Expr({ ref: wrap(arguments[0]), id: wrap(arguments[1]) })\n  }\n}\n\n/**\n * @param {Uint8Array|ArrayBuffer|module:query~ExprArg} bytes\n *   A base64 encoded string or a byte array\n * @return {Expr}\n */\nfunction Bytes(bytes) {\n  arity.exact(1, arguments, Bytes.name)\n  return new values.Bytes(bytes)\n}\n\n// Basic forms\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} msg\n *   The message to send back to the client.\n * @return {Expr}\n * */\nfunction Abort(msg) {\n  arity.exact(1, arguments, Abort.name)\n  return new Expr({ abort: wrap(msg) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} timestamp\n *   An Expr that will evaluate to a Time.\n * @param {module:query~ExprArg} expr\n *   The Expr to run at the given snapshot time.\n * @return {Expr}\n * */\nfunction At(timestamp, expr) {\n  arity.exact(2, arguments, At.name)\n  return new Expr({ at: wrap(timestamp), expr: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} bindings\n *   A set of bindings to use within the given expression.\n * @param {module:query~ExprArg} in\n *   The expression to run with the given bindings.\n * @return {Expr}\n * */\nfunction Let(vars, expr) {\n  arity.exact(2, arguments, Let.name)\n  var bindings = []\n\n  if (Array.isArray(vars)) {\n    bindings = vars.map(function(item) {\n      return wrapValues(item)\n    })\n  } else {\n    bindings = Object.keys(vars)\n      .filter(function(k) {\n        return vars[k] !== undefined\n      })\n      .map(function(k) {\n        var b = {}\n        b[k] = wrap(vars[k])\n        return b\n      })\n  }\n\n  if (typeof expr === 'function') {\n    if (Array.isArray(vars)) {\n      var expr_vars = []\n\n      vars.forEach(function(item) {\n        Object.keys(item).forEach(function(name) {\n          expr_vars.push(Var(name))\n        })\n      })\n\n      expr = expr.apply(null, expr_vars)\n    } else {\n      expr = expr.apply(\n        null,\n        Object.keys(vars).map(function(name) {\n          return Var(name)\n        })\n      )\n    }\n  }\n\n  return new Expr({ let: bindings, in: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} varName\n *   The name of the bound var.\n * @return {Expr}\n * */\nfunction Var(varName) {\n  arity.exact(1, arguments, Var.name)\n  return new Expr({ var: wrap(varName) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {module:query~ExprArg} condition\n *   An expression that returns a boolean.\n * @param {module:query~ExprArg} then\n *   The expression to run if condition is true.\n * @param {module:query~ExprArg} else\n *   The expression to run if the condition is false.\n * @return {Expr}\n * */\nfunction If(condition, then, _else) {\n  arity.exact(3, arguments, If.name)\n  return new Expr({ if: wrap(condition), then: wrap(then), else: wrap(_else) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} args\n *   A series of expressions to run.\n * @return {Expr}\n * */\nfunction Do() {\n  arity.min(1, arguments, Do.name)\n  var args = argsToArray(arguments)\n  return new Expr({ do: wrap(args) })\n}\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * @param {...module:query~ExprArg} fields\n *   The object to be escaped.\n * @return {Expr}\n * */\nvar objectFunction = function(fields) {\n  arity.exact(1, arguments, objectFunction.name)\n  return new Expr({ object: wrapValues(fields) })\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Directly produces a FaunaDB Lambda expression as described in the FaunaDB reference\n * documentation.\n *\n * @param {module:query~ExprArg} var\n *   The names of the variables to be bound in this lambda expression.\n * @param {module:query~ExprArg} expr\n *   The lambda expression.\n * @return {Expr}\n */\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Takes a Javascript function, and will transform it\n * into the appropriate FaunaDB query. For example:\n *\n * ```\n * Lambda(function(a) { return Add(a, a); });\n * // Returns { lambda: 'a', expr: { add: [{ var: a }, { var: a }] } }\n * ```\n * Note that the driver will handle wrapping all usages of the lambda's bound\n * variables with the {@link modules:query~Var} function.\n *\n * @param {function} func\n *   Takes the provided function and produces the appropriate FaunaDB query expression.\n * @return {Expr}\n *\n */ function Lambda() {\n  arity.between(1, 2, arguments, Lambda.name)\n  switch (arguments.length) {\n    case 1:\n      var value = arguments[0]\n      if (typeof value === 'function') {\n        return _lambdaFunc(value)\n      } else if (\n        value instanceof Expr ||\n        util.checkInstanceHasProperty(value, '_isFaunaExpr')\n      ) {\n        return value\n      } else {\n        throw new errors.InvalidValue(\n          'Lambda function takes either a Function or an Expr.'\n        )\n      }\n    case 2:\n      var var_name = arguments[0]\n      var expr = arguments[1]\n\n      return _lambdaExpr(var_name, expr)\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaFunc(func) {\n  var vars = annotate(func)\n  switch (vars.length) {\n    case 0:\n      throw new errors.InvalidValue(\n        'Provided Function must take at least 1 argument.'\n      )\n    case 1:\n      return _lambdaExpr(vars[0], func(Var(vars[0])))\n    default:\n      return _lambdaExpr(\n        vars,\n        func.apply(\n          null,\n          vars.map(function(name) {\n            return Var(name)\n          })\n        )\n      )\n  }\n}\n\n/**\n * @private\n */\nfunction _lambdaExpr(var_name, expr) {\n  return new Expr({ lambda: wrap(var_name), expr: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Invokes a given function passing in the provided arguments\n *\n * ```\n * Call(Ref(\"functions/a_function\"), 1, 2)\n * ```\n *\n * @param {module:query~ExprArg} ref\n *   The ref of the UserDefinedFunction to call\n * @param {...module:query~ExprArg} args\n *   A series of values to pass as arguments to the UDF.\n * @return {Expr}\n * */\nfunction Call(ref) {\n  arity.min(1, arguments, Call.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ call: wrap(ref), arguments: wrap(varargs(args)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#basic-forms).\n *\n * Constructs a `@query` type using the Lambda() or a function.\n *\n * ```\n * Query(Lambda(['a', 'b'], Add(Var('a'), Var('b'))))\n * Query(function (a, b) { return Add(a, b) })\n * ```\n *\n * @param {module:query~ExprArg|function} lambda\n *   A function to escape as a query.\n * @return {Expr}\n * */\nfunction Query(lambda) {\n  arity.exact(1, arguments, Query.name)\n  return new Expr({ query: wrap(lambda) })\n}\n\n// Collection functions\n\n/** See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be mapped over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Map(collection, lambda_expr) {\n  arity.exact(2, arguments, Map.name)\n  return new Expr({ map: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be iterated over.\n * @param {module:query~ExprArg|function} lambda\n *   A function to be called for each element of the collection.\n * @return {Expr}\n * */\nfunction Foreach(collection, lambda_expr) {\n  arity.exact(2, arguments, Foreach.name)\n  return new Expr({ foreach: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection to be filtered.\n * @param {module:query~ExprArg|function} lambda\n *   A function that returns a boolean used to filter unwanted values.\n * @return {Expr}\n * */\nfunction Filter(collection, lambda_expr) {\n  arity.exact(2, arguments, Filter.name)\n  return new Expr({ filter: wrap(lambda_expr), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to take from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Take(number, collection) {\n  arity.exact(2, arguments, Take.name)\n  return new Expr({ take: wrap(number), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} number\n *   An expression resulting in the number of elements to drop from the collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n * */\nfunction Drop(number, collection) {\n  arity.exact(2, arguments, Drop.name)\n  return new Expr({ drop: wrap(number), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to prepend to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Prepend(elements, collection) {\n  arity.exact(2, arguments, Prepend.name)\n  return new Expr({ prepend: wrap(elements), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} elements\n *   An expression resulting in a collection of elements to append to the given collection.\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction Append(elements, collection) {\n  arity.exact(2, arguments, Append.name)\n  return new Expr({ append: wrap(elements), collection: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsEmpty(collection) {\n  arity.exact(1, arguments, IsEmpty.name)\n  return new Expr({ is_empty: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#collections).\n *\n * @param {module:query~ExprArg} collection\n *   An expression resulting in a collection.\n * @return {Expr}\n */\nfunction IsNonEmpty(collection) {\n  arity.exact(1, arguments, IsNonEmpty.name)\n  return new Expr({ is_nonempty: wrap(collection) })\n}\n\n// Type check functions\n\n/**\n * Check if the expression is a number.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnumber\">IsNumber</a>\n */\nfunction IsNumber(expr) {\n  arity.exact(1, arguments, IsNumber.name)\n  return new Expr({ is_number: wrap(expr) })\n}\n\n/**\n * Check if the expression is a double.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdouble\">IsDouble</a>\n */\nfunction IsDouble(expr) {\n  arity.exact(1, arguments, IsDouble.name)\n  return new Expr({ is_double: wrap(expr) })\n}\n\n/**\n * Check if the expression is an integer.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isinteger\">IsInteger</a>\n */\nfunction IsInteger(expr) {\n  arity.exact(1, arguments, IsInteger.name)\n  return new Expr({ is_integer: wrap(expr) })\n}\n\n/**\n * Check if the expression is a boolean.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isboolean\">IsBoolean</a>\n */\nfunction IsBoolean(expr) {\n  arity.exact(1, arguments, IsBoolean.name)\n  return new Expr({ is_boolean: wrap(expr) })\n}\n\n/**\n * Check if the expression is null.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isnull\">IsNull</a>\n */\nfunction IsNull(expr) {\n  arity.exact(1, arguments, IsNull.name)\n  return new Expr({ is_null: wrap(expr) })\n}\n\n/**\n * Check if the expression is a byte array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isbytes\">IsBytes</a>\n */\nfunction IsBytes(expr) {\n  arity.exact(1, arguments, IsBytes.name)\n  return new Expr({ is_bytes: wrap(expr) })\n}\n\n/**\n * Check if the expression is a timestamp.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istimestamp\">IsTimestamp</a>\n */\nfunction IsTimestamp(expr) {\n  arity.exact(1, arguments, IsTimestamp.name)\n  return new Expr({ is_timestamp: wrap(expr) })\n}\n\n/**\n * Check if the expression is a date.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdate\">IsDate</a>\n */\nfunction IsDate(expr) {\n  arity.exact(1, arguments, IsDate.name)\n  return new Expr({ is_date: wrap(expr) })\n}\n\n/**\n * Check if the expression is a string.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isstring\">IsString</a>\n */\nfunction IsString(expr) {\n  arity.exact(1, arguments, IsString.name)\n  return new Expr({ is_string: wrap(expr) })\n}\n\n/**\n * Check if the expression is an array.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isarray\">IsArray</a>\n */\nfunction IsArray(expr) {\n  arity.exact(1, arguments, IsArray.name)\n  return new Expr({ is_array: wrap(expr) })\n}\n\n/**\n * Check if the expression is an object.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isobject\">IsObject</a>\n */\nfunction IsObject(expr) {\n  arity.exact(1, arguments, IsObject.name)\n  return new Expr({ is_object: wrap(expr) })\n}\n\n/**\n * Check if the expression is a reference.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isref\">IsRef</a>\n */\nfunction IsRef(expr) {\n  arity.exact(1, arguments, IsRef.name)\n  return new Expr({ is_ref: wrap(expr) })\n}\n\n/**\n * Check if the expression is a set.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isset\">IsSet</a>\n */\nfunction IsSet(expr) {\n  arity.exact(1, arguments, IsSet.name)\n  return new Expr({ is_set: wrap(expr) })\n}\n\n/**\n * Check if the expression is a document (either a reference or an instance).\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdoc\">IsDoc</a>\n */\nfunction IsDoc(expr) {\n  arity.exact(1, arguments, IsDoc.name)\n  return new Expr({ is_doc: wrap(expr) })\n}\n\n/**\n * Check if the expression is a lambda.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/islambda\">IsLambda</a>\n */\nfunction IsLambda(expr) {\n  arity.exact(1, arguments, IsLambda.name)\n  return new Expr({ is_lambda: wrap(expr) })\n}\n\n/**\n * Check if the expression is a collection.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscollection\">IsCollection</a>\n */\nfunction IsCollection(expr) {\n  arity.exact(1, arguments, IsCollection.name)\n  return new Expr({ is_collection: wrap(expr) })\n}\n\n/**\n * Check if the expression is a database.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isdatabase\">IsDatabase</a>\n */\nfunction IsDatabase(expr) {\n  arity.exact(1, arguments, IsDatabase.name)\n  return new Expr({ is_database: wrap(expr) })\n}\n\n/**\n * Check if the expression is an index.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isindex\">IsIndex</a>\n */\nfunction IsIndex(expr) {\n  arity.exact(1, arguments, IsIndex.name)\n  return new Expr({ is_index: wrap(expr) })\n}\n\n/**\n * Check if the expression is a function.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isfunction\">IsFunction</a>\n */\nfunction IsFunction(expr) {\n  arity.exact(1, arguments, IsFunction.name)\n  return new Expr({ is_function: wrap(expr) })\n}\n\n/**\n * Check if the expression is a key.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iskey\">IsKey</a>\n */\nfunction IsKey(expr) {\n  arity.exact(1, arguments, IsKey.name)\n  return new Expr({ is_key: wrap(expr) })\n}\n\n/**\n * Check if the expression is a token.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/istoken\">IsToken</a>\n */\nfunction IsToken(expr) {\n  arity.exact(1, arguments, IsToken.name)\n  return new Expr({ is_token: wrap(expr) })\n}\n\n/**\n * Check if the expression is credentials.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/iscredentials\">IsCredentials</a>\n */\nfunction IsCredentials(expr) {\n  arity.exact(1, arguments, IsCredentials.name)\n  return new Expr({ is_credentials: wrap(expr) })\n}\n\n/**\n * Check if the expression is a role.\n *\n * @param {module:query~ExprArg} expr\n *   The expression to check\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/isrole\">IsRole</a>\n */\nfunction IsRole(expr) {\n  arity.exact(1, arguments, IsRole.name)\n  return new Expr({ is_role: wrap(expr) })\n}\n\n// Read functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in either a Ref or SetRef.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to get the document.\n * @return {Expr}\n */\nfunction Get(ref, ts) {\n  arity.between(1, 2, arguments, Get.name)\n  ts = util.defaults(ts, null)\n\n  return new Expr(params({ get: wrap(ref) }, { ts: wrap(ts) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} secret\n *   The key or token secret to lookup.\n * @return {Expr}\n */\nfunction KeyFromSecret(secret) {\n  arity.exact(1, arguments, KeyFromSecret.name)\n  return new Expr({ key_from_secret: wrap(secret) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/reduce).\n *\n * @param {module:query~ExprArg} lambda\n *   The accumulator function\n * @param {module:query~ExprArg} initial\n *   The initial value\n * @param {module:query~ExprArg} collection\n *   The colleciton to be reduced\n * @return {Expr}\n */\nfunction Reduce(lambda, initial, collection) {\n  arity.exact(3, arguments, Reduce.name)\n  return new Expr({\n    reduce: wrap(lambda),\n    initial: wrap(initial),\n    collection: wrap(collection),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n * You may want to utilize {@link Client#paginate} to obtain a {@link PageHelper},\n * rather than using this query function directly.\n *\n * @param {module:query~ExprArg} set\n *   An expression resulting in a SetRef to page over.\n * @param {?Object} opts\n *  An object representing options for pagination.\n *    - size: Maximum number of results to return.\n *    - after: Return the next page of results after this cursor (inclusive).\n *    - before: Return the previous page of results before this cursor (exclusive).\n *    - sources: If true, include the source sets along with each element.\n * @return {Expr}\n */\nfunction Paginate(set, opts) {\n  arity.between(1, 2, arguments, Paginate.name)\n  opts = util.defaults(opts, {})\n\n  return new Expr(objectAssign({ paginate: wrap(set) }, wrapValues(opts)))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#read-functions).\n *\n * @param {module:query~ExprArg} ref\n *   An expression resulting in a Ref.\n * @param {?module:query~ExprArg} ts\n *   The snapshot time at which to check for the document's existence.\n * @return {Expr}\n */\nfunction Exists(ref, ts) {\n  arity.between(1, 2, arguments, Exists.name)\n  ts = util.defaults(ts, null)\n\n  return new Expr(params({ exists: wrap(ref) }, { ts: wrap(ts) }))\n}\n\n// Write functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref (usually a CollectionRef) to create.\n * @param {?module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Create(collection_ref, params) {\n  arity.between(1, 2, arguments, Create.name)\n  return new Expr({ create: wrap(collection_ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to update.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Update(ref, params) {\n  arity.exact(2, arguments, Update.name)\n  return new Expr({ update: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to replace.\n * @param {module:query~ExprArg} params\n *   An object representing the parameters of the document.\n * @return {Expr}\n */\nfunction Replace(ref, params) {\n  arity.exact(2, arguments, Replace.name)\n  return new Expr({ replace: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to delete.\n * @return {Expr}\n */\nfunction Delete(ref) {\n  arity.exact(1, arguments, Delete.name)\n  return new Expr({ delete: wrap(ref) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to insert against\n * @param {module:query~ExprArg} ts\n *   The valid time of the inserted event\n * @param {module:query~ExprArg} action\n *   Whether the event should be a Create, Update, or Delete.\n * @param {module:query~ExprArg} params\n *   If this is a Create or Update, the parameters of the document.\n * @return {Expr}\n */\nfunction Insert(ref, ts, action, params) {\n  arity.exact(4, arguments, Insert.name)\n  return new Expr({\n    insert: wrap(ref),\n    ts: wrap(ts),\n    action: wrap(action),\n    params: wrap(params),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document whose event should be removed.\n * @param {module:query~ExprArg} ts\n *   The valid time of the event.\n * @param {module:query~ExprArg} action\n *   The event action (Create, Update, or Delete) that should be removed.\n * @return {Expr}\n */\nfunction Remove(ref, ts, action) {\n  arity.exact(3, arguments, Remove.name)\n  return new Expr({ remove: wrap(ref), ts: wrap(ts), action: wrap(action) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a class.\n *     - name (required): the name of the class to create\n * @return {Expr}\n *\n * @deprecated use CreateCollection instead\n */\nfunction CreateClass(params) {\n  arity.exact(1, arguments, CreateClass.name)\n  return new Expr({ create_class: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a collection.\n *     - name (required): the name of the collection to create\n * @return {Expr}\n */\nfunction CreateCollection(params) {\n  arity.exact(1, arguments, CreateCollection.name)\n  return new Expr({ create_collection: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a database.\n *     - name (required): the name of the database to create\n * @return {Expr}\n */\nfunction CreateDatabase(params) {\n  arity.exact(1, arguments, CreateDatabase.name)\n  return new Expr({ create_database: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create an index.\n *     - name (required): the name of the index to create\n *     - source: One or more source objects describing source collections and (optional) field bindings.\n *     - terms: An array of term objects describing the fields to be indexed. Optional\n *     - values: An array of value objects describing the fields to be covered. Optional\n *     - unique: If true, maintains a uniqueness constraint on combined terms and values. Optional\n *     - partitions: The number of sub-partitions within each term. Optional\n * @return {Expr}\n */\nfunction CreateIndex(params) {\n  arity.exact(1, arguments, CreateIndex.name)\n  return new Expr({ create_index: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new key\n *     - database: Ref of the database the key will be scoped to. Optional.\n *     - role: The role of the new key\n * @return {Expr}\n */\nfunction CreateKey(params) {\n  arity.exact(1, arguments, CreateKey.name)\n  return new Expr({ create_key: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new user defined function.\n *     - name: The name of the function\n *     - body: A lambda function (escaped with `query`).\n * @return {Expr}\n */\nfunction CreateFunction(params) {\n  arity.exact(1, arguments, CreateFunction.name)\n  return new Expr({ create_function: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new role.\n *     - name: The name of the role\n *     - privileges: An array of privileges\n *     - membership: An array of membership bindings\n * @return {Expr}\n */\nfunction CreateRole(params) {\n  arity.exact(1, arguments, CreateRole.name)\n  return new Expr({ create_role: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#write-functions).\n *\n * @param {module:query~ExprArg} params\n *   An object of parameters used to create a new access provider.\n *     - name: A valid schema name\n *     - issuer: A unique string\n *     - jwks_uri: A valid HTTPS URI\n *     - roles: An array of role/predicate pairs where the predicate returns a boolean.\n *                   The array can also contain Role references.\n * @return {Expr}\n */\nfunction CreateAccessProvider(params) {\n  arity.exact(1, arguments, CreateAccessProvider.name)\n  return new Expr({ create_access_provider: wrap(params) })\n}\n\n// Sets\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref of the document for which to retrieve the singleton set.\n * @return {Expr}\n */\nfunction Singleton(ref) {\n  arity.exact(1, arguments, Singleton.name)\n  return new Expr({ singleton: wrap(ref) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref or SetRef to retrieve an event set from.\n * @return {Expr}\n */\nfunction Events(ref_set) {\n  arity.exact(1, arguments, Events.name)\n  return new Expr({ events: wrap(ref_set) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} index\n *   The Ref of the index to match against.\n * @param {...module:query~ExprArg} terms\n *   A list of terms used in the match.\n * @return {Expr}\n */\nfunction Match(index) {\n  arity.min(1, arguments, Match.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ match: wrap(index), terms: wrap(varargs(args)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to union together.\n * @return {Expr}\n */\nfunction Union() {\n  arity.min(1, arguments, Union.name)\n  return new Expr({ union: wrap(varargs(arguments)) })\n}\n\n/**\n * Merge two or more objects..\n *\n * @param {...module:query~ExprArg} merge merge the first object.\n * @param {...module:query~ExprArg} _with the second object or a list of objects\n * @param {...module:query~ExprArg} lambda a lambda to resolve possible conflicts\n * @return {Expr}\n * */\nfunction Merge(merge, _with, lambda) {\n  arity.between(2, 3, arguments, Merge.name)\n  return new Expr(\n    params({ merge: wrap(merge), with: wrap(_with) }, { lambda: wrap(lambda) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to intersect.\n * @return {Expr}\n * */\nfunction Intersection() {\n  arity.min(1, arguments, Intersection.name)\n  return new Expr({ intersection: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {...module:query~ExprArg} sets\n *   A list of SetRefs to diff.\n * @return {Expr}\n * */\nfunction Difference() {\n  arity.min(1, arguments, Difference.name)\n  return new Expr({ difference: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef to remove duplicates from.\n * @return {Expr}\n * */\nfunction Distinct(set) {\n  arity.exact(1, arguments, Distinct.name)\n  return new Expr({ distinct: wrap(set) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#sets).\n *\n * @param {module:query~ExprArg} source\n *   A SetRef of the source set\n * @param {module:query~ExprArg|function} target\n *   A Lambda that will accept each element of the source Set and return a Set\n * @return {Expr}\n */\nfunction Join(source, target) {\n  arity.exact(2, arguments, Join.name)\n  return new Expr({ join: wrap(source), with: wrap(target) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/range).\n *\n * @param {module:query~ExprArg} set\n *   A SetRef of the source set\n * @param {module:query~ExprArg} from\n *   The lower bound\n * @param {module:query~ExprArg} to\n *   The upper bound\n * @return {Expr}\n */\nfunction Range(set, from, to) {\n  arity.exact(3, arguments, Range.name)\n  return new Expr({ range: wrap(set), from: wrap(from), to: wrap(to) })\n}\n\n// Authentication\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   A Ref with credentials to authenticate against\n * @param {module:query~ExprArg} params\n *   An object of parameters to pass to the login function\n *     - password: The password used to login\n * @return {Expr}\n * */\nfunction Login(ref, params) {\n  arity.exact(2, arguments, Login.name)\n  return new Expr({ login: wrap(ref), params: wrap(params) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} delete_tokens\n *   If true, log out all tokens associated with the current session.\n * @return {Expr}\n */\nfunction Logout(delete_tokens) {\n  arity.exact(1, arguments, Logout.name)\n  return new Expr({ logout: wrap(delete_tokens) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @param {module:query~ExprArg} ref\n *   The Ref to check the password against.\n * @param {module:query~ExprArg} password\n *   The credentials password to check.\n * @return {Expr}\n */\nfunction Identify(ref, password) {\n  arity.exact(2, arguments, Identify.name)\n  return new Expr({ identify: wrap(ref), password: wrap(password) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction Identity() {\n  arity.exact(0, arguments, Identity.name)\n  return new Expr({ identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentIdentity() {\n  arity.exact(0, arguments, CurrentIdentity.name)\n  return new Expr({ current_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasIdentity() {\n  arity.exact(0, arguments, HasIdentity.name)\n  return new Expr({ has_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\n\nfunction HasCurrentIdentity() {\n  arity.exact(0, arguments, HasCurrentIdentity.name)\n  return new Expr({ has_current_identity: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction CurrentToken() {\n  arity.exact(0, arguments, CurrentToken.name)\n  return new Expr({ current_token: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#authentication).\n *\n * @return {Expr}\n */\nfunction HasCurrentToken() {\n  arity.exact(0, arguments, HasCurrentToken.name)\n  return new Expr({ has_current_token: null })\n}\n\n// String functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} strings - A list of strings to concatenate.\n * @param {string} separator  - The separator to use between each string.\n * @return {string} a single combined string\n */\nfunction Concat(strings, separator) {\n  arity.min(1, arguments, Concat.name)\n  separator = util.defaults(separator, null)\n  return new Expr(\n    params({ concat: wrap(strings) }, { separator: wrap(separator) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} string - The string to casefold.\n * @param {string} normalizer - The algorithm to use. One of: NFKCCaseFold, NFC, NFD, NFKC, NFKD.\n * @return {string} a normalized string\n */\nfunction Casefold(string, normalizer) {\n  arity.min(1, arguments, Casefold.name)\n  return new Expr(\n    params({ casefold: wrap(string) }, { normalizer: wrap(normalizer) })\n  )\n}\n\n/**\n * Returns true if the string contains the given substring, or false if otherwise\n *\n * @param {string} value  - the string to evaluate\n * @param {string} search - the substring to search for\n * @return {boolean}      - was the search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstr\">FaunaDB ContainsStr Function</a>\n */\nfunction ContainsStr(value, search) {\n  arity.exact(2, arguments, ContainsStr.name)\n  return new Expr({ containsstr: wrap(value), search: wrap(search) })\n}\n\n/**\n * Returns true if the string contains the given pattern, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} pattern - the pattern to search for\n * @return {boolean}       - was the regex search result found\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/containsstrregex\">FaunaDB ContainsStrRegex Function</a>\n */\nfunction ContainsStrRegex(value, pattern) {\n  arity.exact(2, arguments, ContainsStrRegex.name)\n  return new Expr({ containsstrregex: wrap(value), pattern: wrap(pattern) })\n}\n\n/**\n * Returns true if the string starts with the given prefix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the prefix to search for\n * @return {boolean}       - does `value` start with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/startswith\">FaunaDB StartsWith Function</a>\n */\nfunction StartsWith(value, search) {\n  arity.exact(2, arguments, StartsWith.name)\n  return new Expr({ startswith: wrap(value), search: wrap(search) })\n}\n\n/**\n * Returns true if the string ends with the given suffix value, or false if otherwise\n *\n * @param {string} value   - the string to evaluate\n * @param {string} search  - the suffix to search for\n * @return {boolean}       - does `value` end with `search`\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/endswith\">FaunaDB EndsWith Function</a>\n */\nfunction EndsWith(value, search) {\n  arity.exact(2, arguments, EndsWith.name)\n  return new Expr({ endswith: wrap(value), search: wrap(search) })\n}\n\n/**\n * It takes a string and returns a regex which matches the input string verbatim.\n *\n * @param value      - the string to analyze\n * @return {string}  - a regex which matches the input string verbatim\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/regexescape\">FaunaDB RegexEscape Function</a>\n */\nfunction RegexEscape(value) {\n  arity.exact(1, arguments, RegexEscape.name)\n  return new Expr({ regexescape: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - Find the first position of this string in the search string\n * @param {int} start - An optional start offset into the search string\n * @return {int} location of the found string or -1 if not found\n */\nfunction FindStr(value, find, start) {\n  arity.between(2, 3, arguments, FindStr.name)\n  start = util.defaults(start, null)\n  return new Expr(\n    params({ findstr: wrap(value), find: wrap(find) }, { start: wrap(start) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - Find the first position of this pattern in the search string using a java regular expression syntax\n * @param {int} start - An optional start offset into the search string\n * @param {int} numResults - An optional number of results to return, max 1024\n * @return {Array} an array of object describing where the search pattern was located\n */\nfunction FindStrRegex(value, pattern, start, numResults) {\n  arity.between(2, 4, arguments, FindStrRegex.name)\n  start = util.defaults(start, null)\n  return new Expr(\n    params(\n      { findstrregex: wrap(value), pattern: wrap(pattern) },\n      { start: wrap(start), num_results: wrap(numResults) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to calculate the length in codepoints.\n * @return {int} the length of the string in codepoints\n */\nfunction Length(value) {\n  arity.exact(1, arguments, Length.name)\n  return new Expr({ length: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to LowerCase.\n * @return {string} the string converted to lowercase\n */\nfunction LowerCase(value) {\n  arity.exact(1, arguments, LowerCase.name)\n  return new Expr({ lowercase: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to trim leading white space.\n * @return {string} the string with leading white space removed\n */\nfunction LTrim(value) {\n  arity.exact(1, arguments, LTrim.name)\n  return new Expr({ ltrim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {module:query~ExprArg} terms\n *   A document from which to produce ngrams.\n * @param {?Object} opts\n *   An object of options\n *     - min: The minimum ngram size.\n *     - max: The maximum ngram size.\n * @return {Array|Value}\n */\nfunction NGram(terms, min, max) {\n  arity.between(1, 3, arguments, NGram.name)\n  min = util.defaults(min, null)\n  max = util.defaults(max, null)\n\n  return new Expr(\n    params({ ngram: wrap(terms) }, { min: wrap(min), max: wrap(max) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to repeat.\n * @param {int} number - The number of times to repeat the string\n * @return {string} a string which was repeated\n */\nfunction Repeat(value, number) {\n  arity.between(1, 2, arguments, Repeat.name)\n  number = util.defaults(number, null)\n  return new Expr(params({ repeat: wrap(value) }, { number: wrap(number) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} find - The string to find in the search string\n * @param {string} replace - The string to replace in the search string\n * @return {String} all the occurrences of find substituted with replace string\n */\nfunction ReplaceStr(value, find, replace) {\n  arity.exact(3, arguments, ReplaceStr.name)\n  return new Expr({\n    replacestr: wrap(value),\n    find: wrap(find),\n    replace: wrap(replace),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - A string to search.\n * @param {string} pattern - The pattern to find in the search string using a java regular expression syntax\n * @param {string} replace - The string to replace in the search string\n * @param {boolean} first - Replace all or just the first\n * @return {string} all the occurrences of find pattern substituted with replace string\n */\nfunction ReplaceStrRegex(value, pattern, replace, first) {\n  arity.between(3, 4, arguments, ReplaceStrRegex.name)\n  first = util.defaults(first, null)\n  return new Expr(\n    params(\n      {\n        replacestrregex: wrap(value),\n        pattern: wrap(pattern),\n        replace: wrap(replace),\n      },\n      { first: wrap(first) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to remove white space from the end.\n * @return {string} the string with trailing whitespaces removed\n */\nfunction RTrim(value) {\n  arity.exact(1, arguments, RTrim.name)\n  return new Expr({ rtrim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {int} num - The string of N Space(s).\n * @return {string} a string with spaces\n */\nfunction Space(num) {\n  arity.exact(1, arguments, Space.name)\n  return new Expr({ space: wrap(num) })\n}\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value  The string to SubString.\n * @param {int} start  The position the first character of the return string begins at\n * @param {int} length  An optional length, if omitted then returns to the end of string\n * @return {string}\n */\nfunction SubString(value, start, length) {\n  arity.between(1, 3, arguments, SubString.name)\n  start = util.defaults(start, null)\n  length = util.defaults(length, null)\n  return new Expr(\n    params(\n      { substring: wrap(value) },\n      { start: wrap(start), length: wrap(length) }\n    )\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to TitleCase.\n * @return {string}  A string converted to titlecase\n */\nfunction TitleCase(value) {\n  arity.exact(1, arguments, TitleCase.name)\n  return new Expr({ titlecase: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Trim.\n * @return {string} a string with leading and trailing whitespace removed\n */\nfunction Trim(value) {\n  arity.exact(1, arguments, Trim.name)\n  return new Expr({ trim: wrap(value) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#string-functions).\n *\n * @param {string} value - The string to Uppercase.\n * @return {string} An uppercase string\n */\nfunction UpperCase(value) {\n  arity.exact(1, arguments, UpperCase.name)\n  return new Expr({ uppercase: wrap(value) })\n}\n\n/**\n * Format values into a string.\n *\n * @param  {string}  string string with format specifiers\n * @param  {array}   values list of values to format\n * @return {string}         a string\n */\nfunction Format(string) {\n  arity.min(1, arguments, Format.name)\n  var args = argsToArray(arguments)\n  args.shift()\n  return new Expr({ format: wrap(string), values: wrap(varargs(args)) })\n}\n\n// Time and date functions\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to converted to a time object.\n * @return {Expr}\n */\nfunction Time(string) {\n  arity.exact(1, arguments, Time.name)\n  return new Expr({ time: wrap(string) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} number\n *   The number of `unit`s from Epoch\n * @param {module:query~ExprArg} unit\n *   The unit of `number`. One of second, millisecond, microsecond, nanosecond.\n * @return {Expr}\n */\nfunction Epoch(number, unit) {\n  arity.exact(2, arguments, Epoch.name)\n  return new Expr({ epoch: wrap(number), unit: wrap(unit) })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timeadd).\n *\n * Returns a new time or date with the offset in terms of the unit\n * added.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeAdd(base, offset, unit) {\n  arity.exact(3, arguments, TimeAdd.name)\n  return new Expr({\n    time_add: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timesubtract).\n *\n * Returns a new time or date with the offset in terms of the unit\n * subtracted.\n *\n * @param base the base time or data\n * @param offset the number of units\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeSubtract(base, offset, unit) {\n  arity.exact(3, arguments, TimeSubtract.name)\n  return new Expr({\n    time_subtract: wrap(base),\n    offset: wrap(offset),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://docs.fauna.com/fauna/current/api/fql/functions/timediff).\n *\n * Returns the number of intervals in terms of the unit between\n * two times or dates. Both start and finish must be of the same\n * type.\n *\n * @param start the starting time or date, inclusive\n * @param finish the ending time or date, exclusive\n * @param unit the unit type\n * @return {Expr}\n */\nfunction TimeDiff(start, finish, unit) {\n  arity.exact(3, arguments, TimeDiff.name)\n  return new Expr({\n    time_diff: wrap(start),\n    other: wrap(finish),\n    unit: wrap(unit),\n  })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#time-and-date).\n *\n * @param {module:query~ExprArg} string\n *   A string to convert to a Date object\n * @return {Expr}\n */\nfunction Date(string) {\n  arity.exact(1, arguments, Date.name)\n  return new Expr({ date: wrap(string) })\n}\n\n/**\n * Returns the current snapshot time.\n *\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/now\">Now function</a>\n */\nfunction Now() {\n  arity.exact(0, arguments, Now.name)\n  return new Expr({ now: wrap(null) })\n}\n\n// Miscellaneous functions\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @deprecated use NewId instead\n * @return {Expr}\n */\nfunction NextId() {\n  arity.exact(0, arguments, NextId.name)\n  return new Expr({ next_id: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @return {Expr}\n */\nfunction NewId() {\n  arity.exact(0, arguments, NewId.name)\n  return new Expr({ new_id: null })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the database.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database's scope.\n * @return {Expr}\n */\nfunction Database(name, scope) {\n  arity.between(1, 2, arguments, Database.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ database: wrap(name) })\n    case 2:\n      return new Expr({ database: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the index.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index's scope.\n * @return {Expr}\n */\nfunction Index(name, scope) {\n  arity.between(1, 2, arguments, Index.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ index: wrap(name) })\n    case 2:\n      return new Expr({ index: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the class.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class's scope.\n * @return {Expr}\n *\n * @deprecated Class is deprecated, use Collection instead\n */\nfunction Class(name, scope) {\n  arity.between(1, 2, arguments, Class.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ class: wrap(name) })\n    case 2:\n      return new Expr({ class: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the collection.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection's scope.\n * @return {Expr}\n */\nfunction Collection(name, scope) {\n  arity.between(1, 2, arguments, Collection.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ collection: wrap(name) })\n    case 2:\n      return new Expr({ collection: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the user defined function.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function's scope.\n * @return {Expr}\n */\nfunction FunctionFn(name, scope) {\n  arity.between(1, 2, arguments, FunctionFn.name)\n  switch (arguments.length) {\n    case 1:\n      return new Expr({ function: wrap(name) })\n    case 2:\n      return new Expr({ function: wrap(name), scope: wrap(scope) })\n  }\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} name\n *   The name of the role.\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role's scope.\n * @return {Expr}\n */\nfunction Role(name, scope) {\n  arity.between(1, 2, arguments, Role.name)\n  scope = util.defaults(scope, null)\n  return new Expr(params({ role: wrap(name) }, { scope: wrap(scope) }))\n}\n\n/**\n *\n * @param {module:query~ExprArg} scope\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction AccessProviders(scope) {\n  arity.max(1, arguments, AccessProviders.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ access_providers: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `classes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the class set's scope.\n * @return {Expr}\n */\nfunction Classes(scope) {\n  arity.max(1, arguments, Classes.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ classes: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `collections` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the collection set's scope.\n * @return {Expr}\n */\nfunction Collections(scope) {\n  arity.max(1, arguments, Collections.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ collections: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `databases` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the database set's scope.\n * @return {Expr}\n */\nfunction Databases(scope) {\n  arity.max(1, arguments, Databases.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ databases: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs an `indexes` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the index set's scope.\n * @return {Expr}\n */\nfunction Indexes(scope) {\n  arity.max(1, arguments, Indexes.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ indexes: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `functions` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the user defined function set's scope.\n * @return {Expr}\n */\nfunction Functions(scope) {\n  arity.max(1, arguments, Functions.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ functions: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `roles` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the role set's scope.\n * @return {Expr}\n */\nfunction Roles(scope) {\n  arity.max(1, arguments, Roles.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ roles: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `keys` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the key set's scope.\n * @return {Expr}\n */\nfunction Keys(scope) {\n  arity.max(1, arguments, Keys.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ keys: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `tokens` function that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the token set's scope.\n * @return {Expr}\n */\nfunction Tokens(scope) {\n  arity.max(1, arguments, Tokens.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ tokens: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * Constructs a `credentials` functions that, when evaluated, returns a Ref value.\n *\n * @param {module:query~ExprArg} [scope]\n *   The Ref of the credential set's scope.\n * @return {Expr}\n */\nfunction Credentials(scope) {\n  arity.max(1, arguments, Credentials.name)\n  scope = util.defaults(scope, null)\n  return new Expr({ credentials: wrap(scope) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of expressions to check for equivalence.\n * @return {Expr}\n */\nfunction Equals() {\n  arity.min(1, arguments, Equals.name)\n  return new Expr({ equals: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n *\n * @deprecated use ContainsPath instead\n */\nfunction Contains(path, _in) {\n  arity.exact(2, arguments, Contains.name)\n  return new Expr({ contains: wrap(path), in: wrap(_in) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} value\n *   Represent the value we want to search for.\n * @param {module:query~ExprArg} in\n *   An object we will search for the value passed in.\n * @return {Expr}\n */\nfunction ContainsValue(value, _in) {\n  arity.exact(2, arguments, ContainsValue.name)\n  return new Expr({ contains_value: wrap(value), in: wrap(_in) })\n}\n\n/**\n * @param {string} field\n *   A field name we want to confirm exists.\n * @param {module:query~ExprArg} obj\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsField(field, obj) {\n  arity.exact(2, arguments, ContainsField.name)\n  return new Expr({ contains_field: wrap(field), in: wrap(obj) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to check for the existence of.\n * @param {module:query~ExprArg} in\n *   An object to search against.\n * @return {Expr}\n */\nfunction ContainsPath(path, _in) {\n  arity.exact(2, arguments, ContainsPath.name)\n  return new Expr({ contains_path: wrap(path), in: wrap(_in) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @param {?module:query~ExprArg} default\n *   A default value if the path does not exist.\n * @return {Expr}\n */\nfunction Select(path, from, _default) {\n  arity.between(2, 3, arguments, Select.name)\n  var exprObj = { select: wrap(path), from: wrap(from) }\n  if (_default !== undefined) {\n    exprObj.default = wrap(_default)\n  }\n  return new Expr(exprObj)\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#miscellaneous-functions).\n *\n * @param {module:query~ExprArg} path\n *   An array representing a path to pull from an object.\n * @param {module:query~ExprArg} from\n *   The object to select from\n * @return {Expr}\n *\n * @deprecated avoid using\n */\nfunction SelectAll(path, from) {\n  arity.exact(2, arguments, SelectAll.name)\n  return new Expr({ select_all: wrap(path), from: wrap(from) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the absolute value.\n * @return {Expr}\n */\nfunction Abs(expr) {\n  arity.exact(1, arguments, Abs.name)\n  return new Expr({ abs: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to sum together.\n * @return {Expr}\n */\nfunction Add() {\n  arity.min(1, arguments, Add.name)\n  return new Expr({ add: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise and together.\n * @return {Expr}\n */\nfunction BitAnd() {\n  arity.min(1, arguments, BitAnd.name)\n  return new Expr({ bitand: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to provide the bitwise not.\n * @return {Expr}\n */\nfunction BitNot(expr) {\n  arity.exact(1, arguments, BitNot.name)\n  return new Expr({ bitnot: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Or'd together.\n * @return {Expr}\n */\nfunction BitOr() {\n  arity.min(1, arguments, BitOr.name)\n  return new Expr({ bitor: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to bitwise Xor'd together.\n * @return {Expr}\n */\nfunction BitXor() {\n  arity.min(1, arguments, BitXor.name)\n  return new Expr({ bitxor: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The least integer that is greater than or equal to the number\n * @return {Expr}\n */\nfunction Ceil(expr) {\n  arity.exact(1, arguments, Ceil.name)\n  return new Expr({ ceil: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of.\n * @return {Expr}\n */\nfunction Divide() {\n  arity.min(1, arguments, Divide.name)\n  return new Expr({ divide: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The greatest integer that is less than or equal to the number\n * @return {Expr}\n */\nfunction Floor(expr) {\n  arity.exact(1, arguments, Floor.name)\n  return new Expr({ floor: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Max() {\n  arity.min(1, arguments, Max.name)\n  return new Expr({ max: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Min() {\n  arity.min(1, arguments, Min.name)\n  return new Expr({ min: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the quotient of. The remainder will be returned.\n * @return {Expr}\n */\nfunction Modulo() {\n  arity.min(1, arguments, Modulo.name)\n  return new Expr({ modulo: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to multiply together.\n * @return {Expr}\n */\nfunction Multiply() {\n  arity.min(1, arguments, Multiply.name)\n  return new Expr({ multiply: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to round.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Round(value, precision) {\n  arity.min(1, arguments, Round.name)\n  precision = util.defaults(precision, null)\n  return new Expr(\n    params({ round: wrap(value) }, { precision: wrap(precision) })\n  )\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of numbers to compute the difference of.\n * @return {Expr}\n */\nfunction Subtract() {\n  arity.min(1, arguments, Subtract.name)\n  return new Expr({ subtract: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sign of the number is returned as positive 1, zero 0 , negative -1\n * @return {Expr}\n */\nfunction Sign(expr) {\n  arity.exact(1, arguments, Sign.name)\n  return new Expr({ sign: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The square root of the number\n * @return {Expr}\n */\nfunction Sqrt(expr) {\n  arity.exact(1, arguments, Sqrt.name)\n  return new Expr({ sqrt: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to truncate.\n * @param {...module:query~ExprArg} terms\n *   An optional precision\n * @return {Expr}\n */\nfunction Trunc(value, precision) {\n  arity.min(1, arguments, Trunc.name)\n  precision = util.defaults(precision, null)\n  return new Expr(\n    params({ trunc: wrap(value) }, { precision: wrap(precision) })\n  )\n}\n\n/**\n *\n * Count the number of elements in the collection.\n *\n * @param {array}    - array of items\n * @return {integer} - number of items in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/count\">Count function</a>\n */\nfunction Count(collection) {\n  arity.exact(1, arguments, Count.name)\n  return new Expr({ count: wrap(collection) })\n}\n\n/**\n *\n * Sum the elements in the collection.\n *\n * @param {array} - collection of numbers\n * @return {integer} - total of all numbers in collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/sum\">Sum function</a>\n */\nfunction Sum(collection) {\n  arity.exact(1, arguments, Sum.name)\n  return new Expr({ sum: wrap(collection) })\n}\n\n/**\n *\n * Returns the mean of all elements in the collection.\n *\n * @param {array} - collection the numbers\n * @return {float} - the mean of all numbers in the collection\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/mean\">Mean function</a>\n */\nfunction Mean(collection) {\n  arity.exact(1, arguments, Mean.name)\n  return new Expr({ mean: wrap(collection) })\n}\n\n/**\n *\n * Evaluates to true if any element of the collection is true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/any\">Any function</a>\n */\nfunction Any(collection) {\n  arity.exact(1, arguments, Any.name)\n  return new Expr({ any: wrap(collection) })\n}\n\n/**\n *\n * Evaluates to true if all elements of the collection are true.\n *\n * @param {array} - collection the collection\n * @return {Expr}\n * @see <a href=\"https://docs.fauna.com/fauna/current/api/fql/functions/all\">All function</a>\n */\nfunction All(collection) {\n  arity.exact(1, arguments, All.name)\n  return new Expr({ all: wrap(collection) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc cosine of the number\n * @return {Expr}\n */\nfunction Acos(expr) {\n  arity.exact(1, arguments, Acos.name)\n  return new Expr({ acos: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc sine of the number\n * @return {Expr}\n */\nfunction Asin(expr) {\n  arity.exact(1, arguments, Asin.name)\n  return new Expr({ asin: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The arc tangent of the number\n * @return {Expr}\n */\nfunction Atan(expr) {\n  arity.exact(1, arguments, Atan.name)\n  return new Expr({ atan: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The cosine of a number\n * @return {Expr}\n */\nfunction Cos(expr) {\n  arity.exact(1, arguments, Cos.name)\n  return new Expr({ cos: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic cosine of the number\n * @return {Expr}\n */\nfunction Cosh(expr) {\n  arity.exact(1, arguments, Cosh.name)\n  return new Expr({ cosh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take radians and convert it to degrees 360 degrees = 2 * pi radians\n * @return {Expr}\n */\nfunction Degrees(expr) {\n  arity.exact(1, arguments, Degrees.name)\n  return new Expr({ degrees: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The e raised to an exponent number\n * @return {Expr}\n */\nfunction Exp(expr) {\n  arity.exact(1, arguments, Exp.name)\n  return new Expr({ exp: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A side of the right triangle\n * @param {...module:query~ExprArg} terms\n *   The second side of a right triange, defaults to the first side\n * @return {Expr}\n */\nfunction Hypot(value, side) {\n  arity.min(1, arguments, Hypot.name)\n  side = util.defaults(side, null)\n  return new Expr(params({ hypot: wrap(value) }, { b: wrap(side) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The natural log of the number\n * @return {Expr}\n */\nfunction Ln(expr) {\n  arity.exact(1, arguments, Ln.name)\n  return new Expr({ ln: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The log base 10 of a number\n * @return {Expr}\n */\nfunction Log(expr) {\n  arity.exact(1, arguments, Log.name)\n  return new Expr({ log: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A numbers to raise to the power.\n * @param {...module:query~ExprArg} terms\n *   An optional exponent\n * @return {Expr}\n */\nfunction Pow(value, exponent) {\n  arity.min(1, arguments, Pow.name)\n  exponent = util.defaults(exponent, null)\n  return new Expr(params({ pow: wrap(value) }, { exp: wrap(exponent) }))\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   Take degrees and convert the number to radians 2 * pi = 360 degrees\n * @return {Expr}\n */\nfunction Radians(expr) {\n  arity.exact(1, arguments, Radians.name)\n  return new Expr({ radians: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The sine of a number\n * @return {Expr}\n */\nfunction Sin(expr) {\n  arity.exact(1, arguments, Sin.name)\n  return new Expr({ sin: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyperbolic sine of a number\n * @return {Expr}\n */\nfunction Sinh(expr) {\n  arity.exact(1, arguments, Sinh.name)\n  return new Expr({ sinh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The Tangent of a number\n * @return {Expr}\n */\nfunction Tan(expr) {\n  arity.exact(1, arguments, Tan.name)\n  return new Expr({ tan: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#mathematical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   The hyberbolic tangent of a number\n * @return {Expr}\n */\nfunction Tanh(expr) {\n  arity.exact(1, arguments, Tanh.name)\n  return new Expr({ tanh: wrap(expr) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LT() {\n  arity.min(1, arguments, LT.name)\n  return new Expr({ lt: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction LTE() {\n  arity.min(1, arguments, LTE.name)\n  return new Expr({ lte: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GT() {\n  arity.min(1, arguments, GT.name)\n  return new Expr({ gt: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection of terms to compare.\n * @return {Expr}\n */\nfunction GTE() {\n  arity.min(1, arguments, GTE.name)\n  return new Expr({ gte: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the conjunction of.\n * @return {Expr}\n */\nfunction And() {\n  arity.min(1, arguments, And.name)\n  return new Expr({ and: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {...module:query~ExprArg} terms\n *   A collection to compute the disjunction of.\n * @return {Expr}\n */\nfunction Or() {\n  arity.min(1, arguments, Or.name)\n  return new Expr({ or: wrap(varargs(arguments)) })\n}\n\n/**\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#logical-functions).\n *\n * @param {module:query~ExprArg} boolean\n *   A boolean to produce the negation of.\n * @return {Expr}\n */\nfunction Not(boolean) {\n  arity.exact(1, arguments, Not.name)\n  return new Expr({ not: wrap(boolean) })\n}\n\n/**\n * Converts an expression to a string literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a string.\n * @return {Expr}\n */\nfunction ToString(expr) {\n  arity.exact(1, arguments, ToString.name)\n  return new Expr({ to_string: wrap(expr) })\n}\n\n/**\n * Converts an expression to a number literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a number.\n * @return {Expr}\n */\nfunction ToNumber(expr) {\n  arity.exact(1, arguments, ToNumber.name)\n  return new Expr({ to_number: wrap(expr) })\n}\n\n/**\n * Converts an expression to an Object.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Object.\n * @return {Expr}\n */\nfunction ToObject(expr) {\n  arity.exact(1, arguments, ToObject.name)\n  return new Expr({ to_object: wrap(expr) })\n}\n\n/**\n * Converts an expression to an Array.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an Array.\n * @return {Expr}\n */\nfunction ToArray(expr) {\n  arity.exact(1, arguments, ToArray.name)\n  return new Expr({ to_array: wrap(expr) })\n}\n\n/**\n * Converts an expression to a double value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a double.\n * @return {Expr}\n */\nfunction ToDouble(expr) {\n  arity.exact(1, arguments, ToDouble.name)\n  return new Expr({ to_double: wrap(expr) })\n}\n\n/**\n * Converts an expression to an integer value, if possible.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to an integer.\n * @return {Expr}\n */\nfunction ToInteger(expr) {\n  arity.exact(1, arguments, ToInteger.name)\n  return new Expr({ to_integer: wrap(expr) })\n}\n\n/**\n * Converts an expression to a time literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a time.\n * @return {Expr}\n */\nfunction ToTime(expr) {\n  arity.exact(1, arguments, ToTime.name)\n  return new Expr({ to_time: wrap(expr) })\n}\n\n/**\n * Converts an expression evaluating to a time to seconds since epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to seconds numeric value.\n * @return {Expr}\n */\nfunction ToSeconds(expr) {\n  arity.exact(1, arguments, ToSeconds.name)\n  return new Expr({ to_seconds: wrap(expr) })\n}\n\n/**\n * Converts a time expression to milliseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to millisecond numeric value.\n * @return {Expr}\n */\nfunction ToMillis(expr) {\n  arity.exact(1, arguments, ToMillis.name)\n  return new Expr({ to_millis: wrap(expr) })\n}\n\n/**\n * Converts a time expression to microseconds since the UNIX epoch.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to microsecond numeric value.\n * @return {Expr}\n */\nfunction ToMicros(expr) {\n  arity.exact(1, arguments, ToMicros.name)\n  return new Expr({ to_micros: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the week following ISO-8601 convention, from 1 (Monday) to 7 (Sunday).\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of week.\n * @return {Expr}\n */\nfunction DayOfWeek(expr) {\n  arity.exact(1, arguments, DayOfWeek.name)\n  return new Expr({ day_of_week: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the year, from 1 to 365, or 366 in a leap year.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of year.\n * @return {Expr}\n */\nfunction DayOfYear(expr) {\n  arity.exact(1, arguments, DayOfYear.name)\n  return new Expr({ day_of_year: wrap(expr) })\n}\n\n/**\n * Returns a time expression's day of the month, from 1 to 31.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to day of month.\n * @return {Expr}\n */\nfunction DayOfMonth(expr) {\n  arity.exact(1, arguments, DayOfMonth.name)\n  return new Expr({ day_of_month: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a hour.\n * @return {Expr}\n */\nfunction Hour(expr) {\n  arity.exact(1, arguments, Hour.name)\n  return new Expr({ hour: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Minute(expr) {\n  arity.exact(1, arguments, Minute.name)\n  return new Expr({ minute: wrap(expr) })\n}\n\n/**\n * Returns a time expression's second of the minute, from 0 to 59.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Second(expr) {\n  arity.exact(1, arguments, Second.name)\n  return new Expr({ second: wrap(expr) })\n}\n\n/**\n * Returns a time expression's month of the year, from 1 to 12.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a month.\n * @return {Expr}\n */\nfunction Month(expr) {\n  arity.exact(1, arguments, Month.name)\n  return new Expr({ month: wrap(expr) })\n}\n\n/**\n * Returns the time expression's year, following the ISO-8601 standard.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a year.\n * @return {Expr}\n */\nfunction Year(expr) {\n  arity.exact(1, arguments, Year.name)\n  return new Expr({ year: wrap(expr) })\n}\n\n/**\n * Converts an expression to a date literal.\n *\n * @param {module:query~ExprArg} expression\n *   An expression to convert to a date.\n * @return {Expr}\n */\nfunction ToDate(expr) {\n  arity.exact(1, arguments, ToDate.name)\n  return new Expr({ to_date: wrap(expr) })\n}\n\n/**\n * Move database to a new hierarchy.\n *\n * @param {string}  from database reference to be moved.\n * @param {string}  to new parent database reference.\n * @return {Expr}   The expression wrapping the provided object.\n * @see <a href=\"https://app.fauna.com/documentation/reference/queryapi#write-functions\">FaunaDB Write Functions</a>\n */\nfunction MoveDatabase(from, to) {\n  arity.exact(2, arguments, MoveDatabase.name)\n  return new Expr({ move_database: wrap(from), to: wrap(to) })\n}\n\n/**\n * Returns a set of all documents in the given collection.\n * A set must be paginated in order to retrieve its values.\n *\n * @param collection a reference to the collection. Type: Ref\n * @return a new {@link Expr} instance\n * @see #Paginate(Expr)\n */\nfunction Documents(collection) {\n  arity.exact(1, arguments, Documents.name)\n  return new Expr({ documents: wrap(collection) })\n}\n\n/**\n *\n * @param {module:query~ExprArg} expr\n *  An expression (i.e. Set, Page, or Array) to reverse\n * @return {Expr}\n */\nfunction Reverse(expr) {\n  arity.exact(1, arguments, Reverse.name)\n  return new Expr({ reverse: wrap(expr) })\n}\n\n/**\n *\n * @param {module:query~ExprArg} name\n * A string representing an AccessProvider's name\n * @return {Expr}\n */\nfunction AccessProvider(name) {\n  arity.exact(1, arguments, AccessProvider.name)\n  return new Expr({ access_provider: wrap(name) })\n}\n\n// Helpers\n\n/**\n * @ignore\n */\nfunction arity(min, max, args, callerFunc) {\n  if (\n    (min !== null && args.length < min) ||\n    (max !== null && args.length > max)\n  ) {\n    throw new errors.InvalidArity(min, max, args.length, callerFunc)\n  }\n\n  if (min !== null) {\n    for (let i = 0; i < min; i++) {\n      if (args[i] === undefined) {\n        throw new errors.InvalidValue(\n          `Expected value, but found 'undefined'. Argument ${i} for ${callerFunc} is required.`\n        )\n      }\n    }\n  }\n}\n\narity.exact = function(n, args, callerFunc) {\n  arity(n, n, args, callerFunc)\n}\narity.max = function(n, args, callerFunc) {\n  arity(null, n, args, callerFunc)\n}\narity.min = function(n, args, callerFunc) {\n  arity(n, null, args, callerFunc)\n}\narity.between = function(min, max, args, callerFunc) {\n  arity(min, max, args, callerFunc)\n}\n\n/** Adds optional parameters to the query.\n *\n * @ignore\n * */\nfunction params(mainParams, optionalParams) {\n  for (var key in optionalParams) {\n    var val = optionalParams[key]\n    if (val !== null && val !== undefined) {\n      mainParams[key] = val\n    }\n  }\n  return mainParams\n}\n\n/**\n * Called on rest arguments.\n * This ensures that a single value passed is not put in an array, so\n * `query.add([1, 2])` will work as well as `query.add(1, 2)`.\n *\n * @ignore\n */\nfunction varargs(values) {\n  var valuesAsArr = Array.isArray(values)\n    ? values\n    : Array.prototype.slice.call(values)\n  return values.length === 1 ? values[0] : valuesAsArr\n}\n\n/**\n * @ignore\n */\nfunction argsToArray(args) {\n  var rv = []\n  rv.push.apply(rv, args)\n  return rv\n}\n\n/**\n * Wraps an object as an Expression. This will automatically wrap any bare objects with\n * the appropriate {@link object} escaping.\n * @param {Object} obj\n *  The object to be wrapped as an Expression.\n * @returns {Expr}\n *   The expression wrapping the provided object.\n * @private\n */\nfunction wrap(obj) {\n  // the arity functions throw when provided undefined arguments\n  // but wrap can accept undefined values. It still should be given\n  // exactly one argument, even if it is undefined.\n  if (arguments.length !== 1) {\n    throw new errors.InvalidArity(1, 1, arguments.length, wrap.name)\n  }\n  if (obj === undefined || obj === null) {\n    return obj\n  } else if (\n    obj instanceof Expr ||\n    util.checkInstanceHasProperty(obj, '_isFaunaExpr')\n  ) {\n    return obj\n  } else if (typeof obj === 'symbol') {\n    return obj.toString().replace(/Symbol\\((.*)\\)/, function(str, symbol) {\n      return symbol\n    })\n  } else if (typeof obj === 'function') {\n    return Lambda(obj)\n  } else if (Array.isArray(obj)) {\n    return new Expr(\n      obj.map(function(elem) {\n        return wrap(elem)\n      })\n    )\n  } else if (obj instanceof Uint8Array || obj instanceof ArrayBuffer) {\n    return new values.Bytes(obj)\n  } else if (typeof obj === 'object') {\n    return new Expr({ object: wrapValues(obj) })\n  } else {\n    return obj\n  }\n}\n\n/**\n * Wraps all of the values of a provided Object, while leaving the parent object unwrapped.\n * @param {Object} obj\n *  The object whose values are to be wrapped as Expressions.\n * @returns {Object}\n *  A copy of the provided object, with the values wrapped as Expressions.\n * @private\n */\nfunction wrapValues(obj) {\n  if (obj !== null) {\n    var rv = {}\n\n    Object.keys(obj).forEach(function(key) {\n      rv[key] = wrap(obj[key])\n    })\n\n    return rv\n  } else {\n    return null\n  }\n}\n\nmodule.exports = {\n  Ref: Ref,\n  Bytes: Bytes,\n  Abort: Abort,\n  At: At,\n  Let: Let,\n  Var: Var,\n  If: If,\n  Do: Do,\n  Object: objectFunction,\n  Lambda: Lambda,\n  Call: Call,\n  Query: Query,\n  Map: Map,\n  Foreach: Foreach,\n  Filter: Filter,\n  Take: Take,\n  Drop: Drop,\n  Prepend: Prepend,\n  Append: Append,\n  IsEmpty: IsEmpty,\n  IsNonEmpty: IsNonEmpty,\n  IsNumber: IsNumber,\n  IsDouble: IsDouble,\n  IsInteger: IsInteger,\n  IsBoolean: IsBoolean,\n  IsNull: IsNull,\n  IsBytes: IsBytes,\n  IsTimestamp: IsTimestamp,\n  IsDate: IsDate,\n  IsString: IsString,\n  IsArray: IsArray,\n  IsObject: IsObject,\n  IsRef: IsRef,\n  IsSet: IsSet,\n  IsDoc: IsDoc,\n  IsLambda: IsLambda,\n  IsCollection: IsCollection,\n  IsDatabase: IsDatabase,\n  IsIndex: IsIndex,\n  IsFunction: IsFunction,\n  IsKey: IsKey,\n  IsToken: IsToken,\n  IsCredentials: IsCredentials,\n  IsRole: IsRole,\n  Get: Get,\n  KeyFromSecret: KeyFromSecret,\n  Reduce: Reduce,\n  Paginate: Paginate,\n  Exists: Exists,\n  Create: Create,\n  Update: Update,\n  Replace: Replace,\n  Delete: Delete,\n  Insert: Insert,\n  Remove: Remove,\n  CreateClass: deprecate(\n    CreateClass,\n    'CreateClass() is deprecated, use CreateCollection() instead'\n  ),\n  CreateCollection: CreateCollection,\n  CreateDatabase: CreateDatabase,\n  CreateIndex: CreateIndex,\n  CreateKey: CreateKey,\n  CreateFunction: CreateFunction,\n  CreateRole: CreateRole,\n  CreateAccessProvider: CreateAccessProvider,\n  Singleton: Singleton,\n  Events: Events,\n  Match: Match,\n  Union: Union,\n  Merge: Merge,\n  Intersection: Intersection,\n  Difference: Difference,\n  Distinct: Distinct,\n  Join: Join,\n  Range: Range,\n  Login: Login,\n  Logout: Logout,\n  Identify: Identify,\n  Identity: deprecate(\n    Identity,\n    'Identity() is deprecated, use CurrentIdentity() instead'\n  ),\n  CurrentIdentity: CurrentIdentity,\n  HasIdentity: deprecate(\n    HasIdentity,\n    'HasIdentity() is deprecated, use HasCurrentIdentity() instead'\n  ),\n  HasCurrentIdentity: HasCurrentIdentity,\n  CurrentToken: CurrentToken,\n  HasCurrentToken: HasCurrentToken,\n  Concat: Concat,\n  Casefold: Casefold,\n  ContainsStr: ContainsStr,\n  ContainsStrRegex: ContainsStrRegex,\n  StartsWith: StartsWith,\n  EndsWith: EndsWith,\n  FindStr: FindStr,\n  FindStrRegex: FindStrRegex,\n  Length: Length,\n  LowerCase: LowerCase,\n  LTrim: LTrim,\n  NGram: NGram,\n  Repeat: Repeat,\n  ReplaceStr: ReplaceStr,\n  ReplaceStrRegex: ReplaceStrRegex,\n  RegexEscape: RegexEscape,\n  RTrim: RTrim,\n  Space: Space,\n  SubString: SubString,\n  TitleCase: TitleCase,\n  Trim: Trim,\n  UpperCase: UpperCase,\n  Format: Format,\n  Time: Time,\n  TimeAdd: TimeAdd,\n  TimeSubtract: TimeSubtract,\n  TimeDiff: TimeDiff,\n  Epoch: Epoch,\n  Date: Date,\n  Now: Now,\n  NextId: deprecate(NextId, 'NextId() is deprecated, use NewId() instead'),\n  NewId: NewId,\n  Database: Database,\n  Index: Index,\n  Class: deprecate(Class, 'Class() is deprecated, use Collection() instead'),\n  Collection: Collection,\n  Function: FunctionFn,\n  Role: Role,\n  AccessProviders: AccessProviders,\n  Classes: deprecate(\n    Classes,\n    'Classes() is deprecated, use Collections() instead'\n  ),\n  Collections: Collections,\n  Databases: Databases,\n  Indexes: Indexes,\n  Functions: Functions,\n  Roles: Roles,\n  Keys: Keys,\n  Tokens: Tokens,\n  Credentials: Credentials,\n  Equals: Equals,\n  Contains: deprecate(\n    Contains,\n    'Contains() is deprecated, use ContainsPath() instead'\n  ),\n  ContainsPath: ContainsPath,\n  ContainsField: ContainsField,\n  ContainsValue: ContainsValue,\n  Select: Select,\n  SelectAll: deprecate(SelectAll, 'SelectAll() is deprecated. Avoid use.'),\n  Abs: Abs,\n  Add: Add,\n  BitAnd: BitAnd,\n  BitNot: BitNot,\n  BitOr: BitOr,\n  BitXor: BitXor,\n  Ceil: Ceil,\n  Divide: Divide,\n  Floor: Floor,\n  Max: Max,\n  Min: Min,\n  Modulo: Modulo,\n  Multiply: Multiply,\n  Round: Round,\n  Subtract: Subtract,\n  Sign: Sign,\n  Sqrt: Sqrt,\n  Trunc: Trunc,\n  Count: Count,\n  Sum: Sum,\n  Mean: Mean,\n  Any: Any,\n  All: All,\n  Acos: Acos,\n  Asin: Asin,\n  Atan: Atan,\n  Cos: Cos,\n  Cosh: Cosh,\n  Degrees: Degrees,\n  Exp: Exp,\n  Hypot: Hypot,\n  Ln: Ln,\n  Log: Log,\n  Pow: Pow,\n  Radians: Radians,\n  Sin: Sin,\n  Sinh: Sinh,\n  Tan: Tan,\n  Tanh: Tanh,\n  LT: LT,\n  LTE: LTE,\n  GT: GT,\n  GTE: GTE,\n  And: And,\n  Or: Or,\n  Not: Not,\n  ToString: ToString,\n  ToNumber: ToNumber,\n  ToObject: ToObject,\n  ToArray: ToArray,\n  ToDouble: ToDouble,\n  ToInteger: ToInteger,\n  ToTime: ToTime,\n  ToSeconds: ToSeconds,\n  ToMicros: ToMicros,\n  ToMillis: ToMillis,\n  DayOfMonth: DayOfMonth,\n  DayOfWeek: DayOfWeek,\n  DayOfYear: DayOfYear,\n  Second: Second,\n  Minute: Minute,\n  Hour: Hour,\n  Month: Month,\n  Year: Year,\n  ToDate: ToDate,\n  MoveDatabase: MoveDatabase,\n  Documents: Documents,\n  Reverse: Reverse,\n  AccessProvider: AccessProvider,\n  arity: arity,\n  wrap: wrap,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/stream.js":
/*!********************************************!*\
  !*** ./node_modules/faunadb/src/stream.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/** @module stream */\n\n// NOTE: Although implemented in a separate module, streaming shares internal\n// responsibilities with both Client and HTTP interfaces, such as updating last\n// seen transaction timestamp. Therefore, this implementation\n// sometimes breaks encapsulation and calls internal getters and methods. As a\n// general rule: it's okay to call internal methods. You can interpret this\n// as calling for a package visible method in languages with fine-grained\n// visibility control. However, DO NOT change any internal state from outside of\n// its context as it'd most certainly lead to errors.\n\nvar { AbortController } = __webpack_require__(/*! node-abort-controller */ \"(ssr)/./node_modules/node-abort-controller/index.js\")\nvar RequestResult = __webpack_require__(/*! ./RequestResult */ \"(ssr)/./node_modules/faunadb/src/RequestResult.js\")\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/faunadb/src/errors.js\")\nvar json = __webpack_require__(/*! ./_json */ \"(ssr)/./node_modules/faunadb/src/_json.js\")\nvar http = __webpack_require__(/*! ./_http */ \"(ssr)/./node_modules/faunadb/src/_http/index.js\")\nvar q = __webpack_require__(/*! ./query */ \"(ssr)/./node_modules/faunadb/src/query.js\")\nvar util = __webpack_require__(/*! ./_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\n\nvar DefaultEvents = ['start', 'error', 'version', 'history_rewrite', 'set']\nvar DocumentStreamEvents = DefaultEvents.concat(['snapshot'])\n\n/**\n * The internal stream client interface. This class handles the network side of\n * a stream subscription.\n *\n * @constructor\n * @param {Client} client The FaunaDB client.\n * @param {module:query~ExprArg} expression The FQL expression you are subscribing to.\n * @param {module:stream~Options} options The stream options.\n * @param {function} onEvent The stream event's callback function.\n * @private\n */\nfunction StreamClient(client, expression, options, onEvent) {\n  options = util.applyDefaults(options, {\n    fields: null,\n  })\n\n  this._client = client\n  this._onEvent = onEvent\n  this._query = q.wrap(expression)\n  this._urlParams = options.fields ? { fields: options.fields.join(',') } : null\n  this._abort = new AbortController()\n  this._state = 'idle'\n}\n\n/**\n * Takes a snapshot of the current query. Assumes the subscribed query returns a\n * reference.\n */\nStreamClient.prototype.snapshot = function() {\n  var self = this\n  self._client\n    .query(q.Get(self._query))\n    .then(function(doc) {\n      self._onEvent({\n        type: 'snapshot',\n        event: doc,\n      })\n    })\n    .catch(function(error) {\n      self._onEvent({\n        type: 'error',\n        event: error,\n      })\n    })\n}\n\n/** Initiates the stream subscription.  */\nStreamClient.prototype.subscribe = function() {\n  var self = this\n\n  if (self._state === 'idle') {\n    self._state = 'open'\n  } else {\n    throw new Error(\n      'Subscription#start should not be called several times, ' +\n        'consider instantiating a new stream instead.'\n    )\n  }\n\n  var body = JSON.stringify(self._query)\n  var startTime = Date.now()\n  var buffer = ''\n\n  function onResponse(response) {\n    var endTime = Date.now()\n    var parsed\n\n    try {\n      parsed = json.parseJSON(response.body)\n    } catch (_) {\n      parsed = response.body\n    }\n\n    var result = new RequestResult(\n      'POST',\n      'stream',\n      self._urlParams,\n      body,\n      self._query,\n      response.body,\n      parsed,\n      response.status,\n      response.headers,\n      startTime,\n      endTime\n    )\n\n    self._client._handleRequestResult(response, result)\n  }\n\n  function onData(data) {\n    var result = json.parseJSONStreaming(buffer + data)\n\n    buffer = result.buffer\n\n    result.values.forEach(function(event) {\n      if (event.txn !== undefined) {\n        self._client.syncLastTxnTime(event.txn)\n      }\n\n      if (event.event === 'error') {\n        onError(new errors.StreamErrorEvent(event))\n      } else {\n        self._onEvent(event)\n      }\n    })\n  }\n\n  function onError(error) {\n    // AbortError is triggered as result of calling\n    // close() on a Subscription. There's no need to relay this event back up.\n    if (error instanceof http.AbortError) {\n      return\n    }\n\n    self._onEvent({\n      type: 'error',\n      event: error,\n    })\n  }\n\n  self._client._http\n    .execute({\n      method: 'POST',\n      path: 'stream',\n      body: body,\n      query: self._urlParams,\n      signal: this._abort.signal,\n      streamConsumer: {\n        onError: onError,\n        onData: onData,\n      },\n    })\n    .then(onResponse)\n    .catch(onError)\n}\n\n/** Closes the stream subscription by aborting its underlying http request. */\nStreamClient.prototype.close = function() {\n  if (this._state !== 'closed') {\n    this._state = 'closed'\n    this._abort.abort()\n  }\n}\n\n/**\n * Event dispatch interface for stream subscription.\n *\n * @constructor\n * @param {string[]} allowedEvents List of allowed events.\n * @private\n */\nfunction EventDispatcher(allowedEvents) {\n  this._allowedEvents = allowedEvents\n  this._listeners = {}\n}\n\n/** Subscribe to an event\n *\n * @param {string} type The event type.\n * @param {module:stream~Subscription~eventCalllback} callback\n *   The event's callback.\n */\nEventDispatcher.prototype.on = function(type, callback) {\n  if (this._allowedEvents.indexOf(type) === -1) {\n    throw new Error('Unknown event type: ' + type)\n  }\n  if (this._listeners[type] === undefined) {\n    this._listeners[type] = []\n  }\n  this._listeners[type].push(callback)\n}\n\n/**\n * Dispatch the given event to the appropriate listeners.\n *\n * @param {Object} event The event.\n */\nEventDispatcher.prototype.dispatch = function(event) {\n  var listeners = this._listeners[event.type]\n  if (!listeners) {\n    return\n  }\n\n  for (var i = 0; i < listeners.length; i++) {\n    listeners[i].call(null, event.event, event)\n  }\n}\n\n/**\n * Stream's start event. A stream subscription always begins with a start event.\n * Upcoming events are guaranteed to have transaction timestamps equal to or greater than\n * the stream's start timestamp.\n *\n * @event module:stream~Subscription#start\n * @type {object}\n * @property {string} type='start'\n *   The event type.\n * @property {number} txn\n *   The event's transaction timestamp.\n * @property {module:number} event\n *   The stream start timestamp.\n */\n\n/**\n * A version event occurs upon any modifications to the current state of the\n * subscribed document.\n *\n * @event module:stream~Subscription#version\n * @type {object}\n * @property {string} type='version'\n *   The event type.\n * @property {number} txn\n *   The event's transaction timestamp.\n * @property {object} event\n *   The event's data.\n */\n\n/**\n * A history rewrite event occurs upon any modifications to the history of the\n * subscribed document.\n *\n * @event module:stream~Subscription#history_rewrite\n * @type {object}\n * @property {string} type='history_rewrite'\n *   The event type.\n * @property {number} txn\n *   The event's transaction timestamp.\n * @property {object} event\n *   The event's data.\n */\n\n/**\n * A snapshot event. A snapshot event is fired once the `document` stream helper\n * finishes loading the subscribed document's snapshot data. See {@link\n * Client#stream} for more details on the `document` stream helper.\n *\n * @event module:stream~Subscription#snapshot\n * @type {object}\n * @property {string} type='snapshot'\n *   The event type.\n * @property {number} txn\n *   The event's transaction timestamp.\n * @property {object} event\n *   The event's data.\n */\n\n/**\n * An error event is fired both for client and server errors that may occur as\n * a result of a subscription.\n *\n * @event module:stream~Subscription#error\n * @type {object}\n * @property {string} type='error'\n *   The event type.\n * @property {?number} txn\n *   The event's transaction timestamp.\n * @property {Error} event\n *   The underlying error.\n */\n\n/**\n * @typedef {Object} Options\n * @property {string[]} [fields=['action', 'document', 'diff', 'prev', 'index']]\n *   The fields event fields to opt-in during stream subscription. Possible\n *   options:\n *   * 'action': The action type\n *   * 'document': The document's data\n *   * 'diff': The difference between 'document' and 'prev'\n *   * 'prev': The event's previous data\n *   * 'index': The event's source index, if a set event\n */\n\n/**\n * The callback to be executed when an new event occurs.\n *\n * @callback module:stream~Subscription~eventCalllback\n * @param {any} data The event's data field.\n * @param {object} event The event's entire object.\n */\n\n/**\n * A stream subscription which dispatches events received to the registered\n * listener functions. This class must be constructed via {@link Client#stream}\n * method.\n *\n * @constructor\n * @param {StreamClient} client\n *   Internal stream client interface.\n * @param {EventDispatcher} dispatcher\n *   Internal event dispatcher interface.\n */\nfunction Subscription(client, dispatcher) {\n  this._client = client\n  this._dispatcher = dispatcher\n}\n\n/**\n * Subscribes to an event type.\n *\n * @param {string} event\n *   The event's type.\n * @param {module:stream~Subscription~eventCalllback} callback\n *   A callback function.\n *\n * @returns {module:stream~Subscription} This instance.\n */\nSubscription.prototype.on = function(type, callback) {\n  this._dispatcher.on(type, callback)\n  return this\n}\n\n/**\n * Initiates the underlying subscription network calls.\n * @returns {module:stream~Subscription} This instance.\n */\nSubscription.prototype.start = function() {\n  this._client.subscribe()\n  return this\n}\n\n/**\n * Stops the current subscription and closes the underlying network connection.\n */\nSubscription.prototype.close = function() {\n  this._client.close()\n}\n\n/**\n * Stream API factory function. See {@link Client#stream} for details on how to\n * use stream's public interface.\n * @private\n */\nfunction StreamAPI(client) {\n  var api = function(expression, options) {\n    var dispatcher = new EventDispatcher(DefaultEvents)\n    var streamClient = new StreamClient(client, expression, options, function(\n      event\n    ) {\n      dispatcher.dispatch(event)\n    })\n    return new Subscription(streamClient, dispatcher)\n  }\n\n  api.document = function(expression, options) {\n    var buffer = []\n    var buffering = true\n    var dispatcher = new EventDispatcher(DocumentStreamEvents)\n    var streamClient = new StreamClient(client, expression, options, onEvent)\n\n    function onEvent(event) {\n      switch (event.type) {\n        case 'start':\n          dispatcher.dispatch(event)\n          streamClient.snapshot()\n          break\n        case 'snapshot':\n          resume(event)\n          break\n        case 'error':\n          dispatcher.dispatch(event)\n          break\n        default:\n          if (buffering) {\n            buffer.push(event)\n          } else {\n            dispatcher.dispatch(event)\n          }\n      }\n    }\n\n    function resume(snapshotEvent) {\n      dispatcher.dispatch(snapshotEvent)\n      for (var i = 0; i < buffer.length; i++) {\n        var bufferedEvent = buffer[i]\n        if (bufferedEvent.txn > snapshotEvent.event.ts) {\n          dispatcher.dispatch(bufferedEvent)\n        }\n      }\n      buffering = false\n      buffer = null\n    }\n\n    return new Subscription(streamClient, dispatcher)\n  }\n\n  return api\n}\n\nmodule.exports = {\n  StreamAPI: StreamAPI,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/src/values.js":
/*!********************************************!*\
  !*** ./node_modules/faunadb/src/values.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar base64 = __webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/base64-js/index.js\")\nvar deprecate = __webpack_require__(/*! util-deprecate */ \"(ssr)/./node_modules/util-deprecate/node.js\")\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/faunadb/src/errors.js\")\nvar Expr = __webpack_require__(/*! ./Expr */ \"(ssr)/./node_modules/faunadb/src/Expr.js\")\nvar util = __webpack_require__(/*! ./_util */ \"(ssr)/./node_modules/faunadb/src/_util.js\")\nvar nodeUtil = util.isNodeEnv() ? __webpack_require__(/*! util */ \"util\") : null\n\nvar customInspect = nodeUtil && nodeUtil.inspect.custom\nvar stringify = nodeUtil ? nodeUtil.inspect : JSON.stringify\n\n/**\n * FaunaDB value types. Generally, these collections do not need to be instantiated\n * directly; they can be constructed through helper methods in {@link module:query}.\n *\n * Instances of these collections will be returned in responses if the response object\n * contains these values. For example, a FaunaDB response containing\n *`{ \"@ref\": { \"id\": \"123\", \"collection\": { \"@ref\": { \"id\": \"frogs\", \"collection\": { \"@ref\": { \"id\": \"collectiones\" } } } } } }`\n * will be returned as `new values.Ref(\"123\", new values.Ref(\"frogs\", values.Native.COLLECTIONS))`.\n *\n * See the [FaunaDB Query API Documentation](https://app.fauna.com/documentation/reference/queryapi#simple-type)\n * for more information.\n *\n * @module values\n */\n\n/**\n * Base type for FaunaDB value objects.\n *\n * @extends Expr\n * @abstract\n * @constructor\n */\nfunction Value() {}\n\nutil.inherits(Value, Expr)\n\nValue.prototype._isFaunaValue = true\n\n/**\n * FaunaDB ref.\n * See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string} id\n *   The id portion of the ref.\n * @param {Ref} [collection]\n *   The collection portion of the ref.\n * @param {Ref} [database]\n *   The database portion of the ref.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction Ref(id, collection, database) {\n  if (!id) throw new errors.InvalidValue('id cannot be null or undefined')\n\n  this.value = { id: id }\n  if (collection) this.value['collection'] = collection\n  if (database) this.value['database'] = database\n}\n\nutil.inherits(Ref, Value)\n\nRef.prototype._isFaunaRef = true\n\n/**\n * Gets the collection part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#collection\n */\nObject.defineProperty(Ref.prototype, 'collection', {\n  get: function() {\n    return this.value['collection']\n  },\n})\n\n/**\n * DEPRECATED. Gets the class part out of the Ref.\n *\n * @member {string}\n * @name module:values~Ref#class\n */\nObject.defineProperty(Ref.prototype, 'class', {\n  get: deprecate(function() {\n    return this.value['collection']\n  }, 'class is deprecated, use collection instead'),\n})\n\n/**\n * Gets the database part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#database\n */\nObject.defineProperty(Ref.prototype, 'database', {\n  get: function() {\n    return this.value['database']\n  },\n})\n\n/**\n * Gets the id part out of the Ref.\n *\n * @member {Ref}\n * @name module:values~Ref#id\n */\nObject.defineProperty(Ref.prototype, 'id', {\n  get: function() {\n    return this.value['id']\n  },\n})\n\n/** @ignore */\nRef.prototype.toJSON = function() {\n  return { '@ref': this.value }\n}\n\nwrapToString(Ref, function() {\n  var constructors = {\n    collections: 'Collection',\n    databases: 'Database',\n    indexes: 'Index',\n    functions: 'Function',\n    roles: 'Role',\n    access_providers: 'AccessProvider',\n  }\n\n  var isNative = function(ref) {\n    return ref.collection === undefined\n  }\n\n  var toString = function(ref) {\n    if (isNative(ref)) {\n      var db = ref.database !== undefined ? ref.database.toString() : ''\n\n      if (ref.id === 'access_providers') return 'AccessProviders(' + db + ')'\n\n      return ref.id.charAt(0).toUpperCase() + ref.id.slice(1) + '(' + db + ')'\n    }\n\n    if (isNative(ref.collection)) {\n      var constructor = constructors[ref.collection.id]\n      if (constructor !== undefined) {\n        var db =\n          ref.database !== undefined ? ', ' + ref.database.toString() : ''\n        return constructor + '(\"' + ref.id + '\"' + db + ')'\n      }\n    }\n\n    return 'Ref(' + toString(ref.collection) + ', \"' + ref.id + '\")'\n  }\n\n  return toString(this)\n})\n\n/** @ignore */\nRef.prototype.valueOf = function() {\n  return this.value\n}\n\n/**\n * Whether these are both Refs and have the same value.\n * @param {any} other\n * @returns {boolean}\n */\nRef.prototype.equals = function(other) {\n  return (\n    (other instanceof Ref ||\n      util.checkInstanceHasProperty(other, '_isFaunaRef')) &&\n    this.id === other.id &&\n    ((this.collection === undefined && other.collection === undefined) ||\n      this.collection.equals(other.collection)) &&\n    ((this.database === undefined && other.database === undefined) ||\n      this.database.equals(other.database))\n  )\n}\n\nvar Native = {\n  COLLECTIONS: new Ref('collections'),\n  INDEXES: new Ref('indexes'),\n  DATABASES: new Ref('databases'),\n  FUNCTIONS: new Ref('functions'),\n  ROLES: new Ref('roles'),\n  KEYS: new Ref('keys'),\n  ACCESS_PROVIDERS: new Ref('access_providers'),\n}\n\nNative.fromName = function(name) {\n  switch (name) {\n    case 'collections':\n      return Native.COLLECTIONS\n    case 'indexes':\n      return Native.INDEXES\n    case 'databases':\n      return Native.DATABASES\n    case 'functions':\n      return Native.FUNCTIONS\n    case 'roles':\n      return Native.ROLES\n    case 'keys':\n      return Native.KEYS\n    case 'access_providers':\n      return Native.ACCESS_PROVIDERS\n  }\n  return new Ref(name)\n}\n\n/**\n * FaunaDB Set.\n * This represents a set returned as part of a response.\n * This looks like `{\"@set\": set_query}`.\n * For query sets see {@link match}, {@link union},\n * {@link intersection}, {@link difference}, and {@link join}.\n *\n * @extends module:values~Value\n * @constructor\n */\nfunction SetRef(value) {\n  /** Raw query object. */\n  this.value = value\n}\n\nutil.inherits(SetRef, Value)\n\nwrapToString(SetRef, function() {\n  return Expr.toString(this.value)\n})\n\n/** @ignore */\nSetRef.prototype.toJSON = function() {\n  return { '@set': this.value }\n}\n\n/** FaunaDB time. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value If a Date, this is converted to a string.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaTime(value) {\n  if (value instanceof Date) {\n    value = value.toISOString()\n  } else if (!(value.charAt(value.length - 1) === 'Z')) {\n    throw new errors.InvalidValue(\"Only allowed timezone is 'Z', got: \" + value)\n  }\n\n  this.value = value\n}\n\nutil.inherits(FaunaTime, Value)\n\n/**\n * Returns the date wrapped by this object.\n * This is lossy as Dates have millisecond rather than nanosecond precision.\n *\n * @member {Date}\n * @name module:values~FaunaTime#date\n */\nObject.defineProperty(FaunaTime.prototype, 'date', {\n  get: function() {\n    return new Date(this.value)\n  },\n})\n\nwrapToString(FaunaTime, function() {\n  return 'Time(\"' + this.value + '\")'\n})\n\n/** @ignore */\nFaunaTime.prototype.toJSON = function() {\n  return { '@ts': this.value }\n}\n\n/** FaunaDB date. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {string|Date} value\n *   If a Date, this is converted to a string, with time-of-day discarded.\n * @extends module:values~Value\n * @constructor\n */\nfunction FaunaDate(value) {\n  if (value instanceof Date) {\n    // The first 10 characters 'YYYY-MM-DD' are the date portion.\n    value = value.toISOString().slice(0, 10)\n  }\n\n  /**\n   * ISO8601 date.\n   * @type {string}\n   */\n  this.value = value\n}\n\nutil.inherits(FaunaDate, Value)\n\n/**\n * @member {Date}\n * @name module:values~FaunaDate#date\n */\nObject.defineProperty(FaunaDate.prototype, 'date', {\n  get: function() {\n    return new Date(this.value)\n  },\n})\n\nwrapToString(FaunaDate, function() {\n  return 'Date(\"' + this.value + '\")'\n})\n\n/** @ignore */\nFaunaDate.prototype.toJSON = function() {\n  return { '@date': this.value }\n}\n\n/** FaunaDB bytes. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {Uint8Array|ArrayBuffer|string} value\n *    If ArrayBuffer it's converted to Uint8Array\n *    If string it must be base64 encoded and it's converted to Uint8Array\n * @extends module:values~Value\n * @constructor\n */\nfunction Bytes(value) {\n  if (value instanceof ArrayBuffer) {\n    this.value = new Uint8Array(value)\n  } else if (typeof value === 'string') {\n    this.value = base64.toByteArray(value)\n  } else if (value instanceof Uint8Array) {\n    this.value = value\n  } else {\n    throw new errors.InvalidValue(\n      'Bytes type expect argument to be either Uint8Array|ArrayBuffer|string, got: ' +\n        stringify(value)\n    )\n  }\n}\n\nutil.inherits(Bytes, Value)\n\nwrapToString(Bytes, function() {\n  return 'Bytes(\"' + base64.fromByteArray(this.value) + '\")'\n})\n\n/** @ignore */\nBytes.prototype.toJSON = function() {\n  return { '@bytes': base64.fromByteArray(this.value) }\n}\n\n/** FaunaDB query. See the [docs](https://app.fauna.com/documentation/reference/queryapi#special-type).\n *\n * @param {any} value\n * @extends module:values~Value\n * @constructor\n */\nfunction Query(value) {\n  this.value = value\n}\n\nutil.inherits(Query, Value)\n\nwrapToString(Query, function() {\n  return 'Query(' + Expr.toString(this.value) + ')'\n})\n\n/** @ignore */\nQuery.prototype.toJSON = function() {\n  return { '@query': this.value }\n}\n\n/** @ignore */\nfunction wrapToString(type, fn) {\n  type.prototype.toString = fn\n  type.prototype.inspect = fn\n\n  if (customInspect) {\n    type.prototype[customInspect] = fn\n  }\n}\n\nmodule.exports = {\n  Value: Value,\n  Ref: Ref,\n  Native: Native,\n  SetRef: SetRef,\n  FaunaTime: FaunaTime,\n  FaunaDate: FaunaDate,\n  Bytes: Bytes,\n  Query: Query,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/faunadb/src/values.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/faunadb/package.json":
/*!*******************************************!*\
  !*** ./node_modules/faunadb/package.json ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"faunadb","version":"4.8.0","apiVersion":"4","description":"FaunaDB Javascript driver for Node.JS and Browsers","homepage":"https://fauna.com","repository":"fauna/faunadb-js","license":"MPL-2.0","keywords":["database","fauna","official","driver"],"bugs":{"url":"https://github.com/fauna/faunadb-js/issues"},"files":["index.d.ts","src/","dist/","tools/printReleaseNotes.js"],"main":"index.js","scripts":{"doc":"jsdoc -c ./jsdoc.json","browserify":"browserify index.js --standalone faunadb -o dist/faunadb.js","browserify-min":"browserify index.js --standalone faunadb | terser -c -m --keep-fnames --keep-classnames -o dist/faunadb-min.js","prettify":"prettier --write \\"{src,test}/**/*.{js,ts}\\"","test":"jest --env=node --verbose=true --forceExit --runInBand ./test","posttest":"node ./test/afterComplete","semantic-release":"semantic-release","wp":"webpack","postinstall":"node ./tools/printReleaseNotes","postupdate":"node ./tools/printReleaseNotes","load-test":"node ./tools/loadTest"},"types":"index.d.ts","dependencies":{"base64-js":"^1.2.0","boxen":"^5.0.1","btoa-lite":"^1.0.0","chalk":"^4.1.1","cross-fetch":"^3.1.5","dotenv":"^8.2.0","fn-annotate":"^1.1.3","node-abort-controller":"^3.0.1","object-assign":"^4.1.0","util-deprecate":"^1.0.2"},"devDependencies":{"ansi-regex":">=5.0.1","browserify":"^16.2.2","eslint":"^5.3.0","eslint-config-prettier":"^6.5.0","eslint-plugin-prettier":"^3.1.1","husky":"^7.0.4","jest":"^27.4.7","jsdoc":"^3.6.10","json-schema":">=0.4.0","lint-staged":">=8","marked":">=4.0.10","prettier":"1.18.2","semantic-release":"^19.0.3","terser":"^4.3.9","webpack":"^5.23.0","webpack-cli":"^4.5.0","yargs":"^16.2.0"},"lint-staged":{"*.{js,css,json,md}":["prettier --write","git add"],"*.js":["eslint --fix","git add"]},"release":{"branches":["main"]},"browser":{"http2":false,"http":false,"https":false,"os":false,"util":false,"boxen":false,"chalk":false}}');

/***/ })

};
;